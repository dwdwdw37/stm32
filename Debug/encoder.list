
encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08006768  08006768  00016768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d0  080069d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080069d0  080069d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069d0  080069d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000074  08006a4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08006a4c  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4af  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023c5  00000000  00000000  0002e54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00031628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199a5  00000000  00000000  000321f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7d9  00000000  00000000  0004bb95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bf24  00000000  00000000  0005836e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4292  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df0  00000000  00000000  000e4310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006750 	.word	0x08006750

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006750 	.word	0x08006750

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2iz>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30f      	bcc.n	8000fd2 <__aeabi_f2iz+0x2a>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d90d      	bls.n	8000fd8 <__aeabi_f2iz+0x30>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	bf18      	it	ne
 8000fce:	4240      	negne	r0, r0
 8000fd0:	4770      	bx	lr
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4770      	bx	lr
 8000fd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_f2iz+0x3a>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d105      	bne.n	8000fee <__aeabi_f2iz+0x46>
 8000fe2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe6:	bf08      	it	eq
 8000fe8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <Float2Byte>:
//target:Ŀ�굥��������
//buf:��д������
//beg:ָ��������ڼ���Ԫ�ؿ�ʼд��
//�����޷��� 
void Float2Byte(float *target,uint8_t *buf,uint8_t beg)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71fb      	strb	r3, [r7, #7]
    uint8_t *point;
    point = (uint8_t*)target;	  //�õ�float�ĵ�ַ
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	617b      	str	r3, [r7, #20]
    buf[beg]   = point[0];
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	701a      	strb	r2, [r3, #0]
    buf[beg+1] = point[1];
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	3301      	adds	r3, #1
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	4413      	add	r3, r2
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	7852      	ldrb	r2, [r2, #1]
 800101e:	701a      	strb	r2, [r3, #0]
    buf[beg+2] = point[2];
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	3302      	adds	r3, #2
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	4413      	add	r3, r2
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	7892      	ldrb	r2, [r2, #2]
 800102c:	701a      	strb	r2, [r3, #0]
    buf[beg+3] = point[3];
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	3303      	adds	r3, #3
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	78d2      	ldrb	r2, [r2, #3]
 800103a:	701a      	strb	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
	...

08001048 <DataScope_Get_Channel_Data>:
//����˵������������ͨ���ĵ����ȸ�������д�뷢�ͻ�����
//Data��ͨ������
//Channel��ѡ��ͨ����1-10��
//�����޷��� 
void DataScope_Get_Channel_Data(float Data,uint8_t Channel)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
	if ( (Channel > 10) || (Channel == 0) ) return;  //ͨ����������10�����0��ֱ����������ִ�к���
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	2b0a      	cmp	r3, #10
 8001058:	d865      	bhi.n	8001126 <DataScope_Get_Channel_Data+0xde>
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d062      	beq.n	8001126 <DataScope_Get_Channel_Data+0xde>
  else
  {
     switch (Channel){
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	3b01      	subs	r3, #1
 8001064:	2b09      	cmp	r3, #9
 8001066:	d85f      	bhi.n	8001128 <DataScope_Get_Channel_Data+0xe0>
 8001068:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <DataScope_Get_Channel_Data+0x28>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	08001099 	.word	0x08001099
 8001074:	080010a7 	.word	0x080010a7
 8001078:	080010b5 	.word	0x080010b5
 800107c:	080010c3 	.word	0x080010c3
 8001080:	080010d1 	.word	0x080010d1
 8001084:	080010df 	.word	0x080010df
 8001088:	080010ed 	.word	0x080010ed
 800108c:	080010fb 	.word	0x080010fb
 8001090:	08001109 	.word	0x08001109
 8001094:	08001117 	.word	0x08001117
		case 1:  Float2Byte(&Data,DataScope_OutPut_Buffer,1); break;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2201      	movs	r2, #1
 800109c:	4924      	ldr	r1, [pc, #144]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffa8 	bl	8000ff4 <Float2Byte>
 80010a4:	e040      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 2:  Float2Byte(&Data,DataScope_OutPut_Buffer,5); break;
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2205      	movs	r2, #5
 80010aa:	4921      	ldr	r1, [pc, #132]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffa1 	bl	8000ff4 <Float2Byte>
 80010b2:	e039      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 3:  Float2Byte(&Data,DataScope_OutPut_Buffer,9); break;
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2209      	movs	r2, #9
 80010b8:	491d      	ldr	r1, [pc, #116]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff9a 	bl	8000ff4 <Float2Byte>
 80010c0:	e032      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 4:  Float2Byte(&Data,DataScope_OutPut_Buffer,13); break;
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	220d      	movs	r2, #13
 80010c6:	491a      	ldr	r1, [pc, #104]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff93 	bl	8000ff4 <Float2Byte>
 80010ce:	e02b      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 5:  Float2Byte(&Data,DataScope_OutPut_Buffer,17); break;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2211      	movs	r2, #17
 80010d4:	4916      	ldr	r1, [pc, #88]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff8c 	bl	8000ff4 <Float2Byte>
 80010dc:	e024      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 6:  Float2Byte(&Data,DataScope_OutPut_Buffer,21); break;
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2215      	movs	r2, #21
 80010e2:	4913      	ldr	r1, [pc, #76]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff85 	bl	8000ff4 <Float2Byte>
 80010ea:	e01d      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 7:  Float2Byte(&Data,DataScope_OutPut_Buffer,25); break;
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2219      	movs	r2, #25
 80010f0:	490f      	ldr	r1, [pc, #60]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff7e 	bl	8000ff4 <Float2Byte>
 80010f8:	e016      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 8:  Float2Byte(&Data,DataScope_OutPut_Buffer,29); break;
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	221d      	movs	r2, #29
 80010fe:	490c      	ldr	r1, [pc, #48]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff77 	bl	8000ff4 <Float2Byte>
 8001106:	e00f      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 9:  Float2Byte(&Data,DataScope_OutPut_Buffer,33); break;
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2221      	movs	r2, #33	; 0x21
 800110c:	4908      	ldr	r1, [pc, #32]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff70 	bl	8000ff4 <Float2Byte>
 8001114:	e008      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 10: Float2Byte(&Data,DataScope_OutPut_Buffer,37); break;
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2225      	movs	r2, #37	; 0x25
 800111a:	4905      	ldr	r1, [pc, #20]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff69 	bl	8000ff4 <Float2Byte>
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
	if ( (Channel > 10) || (Channel == 0) ) return;  //ͨ����������10�����0��ֱ����������ִ�к���
 8001126:	bf00      	nop
     }
  }	 
}
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000090 	.word	0x20000090

08001134 <DataScope_Data_Generate>:
//����˵�������� DataScopeV1.0 ����ȷʶ���֡��ʽ
//Channel_Number����Ҫ���͵�ͨ������
//���ط��ͻ��������ݸ���
//����0��ʾ֡��ʽ����ʧ�� 
uint8_t DataScope_Data_Generate(uint8_t Channel_Number)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	if ( (Channel_Number > 10) || (Channel_Number == 0) ) { return 0; }  //ͨ����������10�����0��ֱ����������ִ�к���
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b0a      	cmp	r3, #10
 8001142:	d802      	bhi.n	800114a <DataScope_Data_Generate+0x16>
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <DataScope_Data_Generate+0x1a>
 800114a:	2300      	movs	r3, #0
 800114c:	e054      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
  else
  {	
	 DataScope_OutPut_Buffer[0] = '$';  //֡ͷ
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <DataScope_Data_Generate+0xd0>)
 8001150:	2224      	movs	r2, #36	; 0x24
 8001152:	701a      	strb	r2, [r3, #0]
		
	 switch(Channel_Number)   
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	3b01      	subs	r3, #1
 8001158:	2b09      	cmp	r3, #9
 800115a:	d84c      	bhi.n	80011f6 <DataScope_Data_Generate+0xc2>
 800115c:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <DataScope_Data_Generate+0x30>)
 800115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001162:	bf00      	nop
 8001164:	0800118d 	.word	0x0800118d
 8001168:	08001197 	.word	0x08001197
 800116c:	080011a1 	.word	0x080011a1
 8001170:	080011ab 	.word	0x080011ab
 8001174:	080011b5 	.word	0x080011b5
 8001178:	080011bf 	.word	0x080011bf
 800117c:	080011c9 	.word	0x080011c9
 8001180:	080011d3 	.word	0x080011d3
 8001184:	080011df 	.word	0x080011df
 8001188:	080011eb 	.word	0x080011eb
   { 
		 case 1:   DataScope_OutPut_Buffer[5]  =  5; return  6;  
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <DataScope_Data_Generate+0xd0>)
 800118e:	2205      	movs	r2, #5
 8001190:	715a      	strb	r2, [r3, #5]
 8001192:	2306      	movs	r3, #6
 8001194:	e030      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 2:   DataScope_OutPut_Buffer[9]  =  9; return 10;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <DataScope_Data_Generate+0xd0>)
 8001198:	2209      	movs	r2, #9
 800119a:	725a      	strb	r2, [r3, #9]
 800119c:	230a      	movs	r3, #10
 800119e:	e02b      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 3:   DataScope_OutPut_Buffer[13] = 13; return 14; 
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011a2:	220d      	movs	r2, #13
 80011a4:	735a      	strb	r2, [r3, #13]
 80011a6:	230e      	movs	r3, #14
 80011a8:	e026      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 4:   DataScope_OutPut_Buffer[17] = 17; return 18;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011ac:	2211      	movs	r2, #17
 80011ae:	745a      	strb	r2, [r3, #17]
 80011b0:	2312      	movs	r3, #18
 80011b2:	e021      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 5:   DataScope_OutPut_Buffer[21] = 21; return 22;  
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011b6:	2215      	movs	r2, #21
 80011b8:	755a      	strb	r2, [r3, #21]
 80011ba:	2316      	movs	r3, #22
 80011bc:	e01c      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 6:   DataScope_OutPut_Buffer[25] = 25; return 26;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011c0:	2219      	movs	r2, #25
 80011c2:	765a      	strb	r2, [r3, #25]
 80011c4:	231a      	movs	r3, #26
 80011c6:	e017      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 7:   DataScope_OutPut_Buffer[29] = 29; return 30; 
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011ca:	221d      	movs	r2, #29
 80011cc:	775a      	strb	r2, [r3, #29]
 80011ce:	231e      	movs	r3, #30
 80011d0:	e012      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 8:   DataScope_OutPut_Buffer[33] = 33; return 34; 
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011d4:	2221      	movs	r2, #33	; 0x21
 80011d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80011da:	2322      	movs	r3, #34	; 0x22
 80011dc:	e00c      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 9:   DataScope_OutPut_Buffer[37] = 37; return 38;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011e0:	2225      	movs	r2, #37	; 0x25
 80011e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80011e6:	2326      	movs	r3, #38	; 0x26
 80011e8:	e006      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 10:  DataScope_OutPut_Buffer[41] = 41; return 42;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011ec:	2229      	movs	r2, #41	; 0x29
 80011ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80011f2:	232a      	movs	r3, #42	; 0x2a
 80011f4:	e000      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
   }	 
  }
	return 0;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000090 	.word	0x20000090

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x38>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <MX_DMA_Init+0x38>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x38>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200e      	movs	r0, #14
 800122c:	f001 f815 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001230:	200e      	movs	r0, #14
 8001232:	f001 f82e 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_GPIO_Init+0x90>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <MX_GPIO_Init+0x90>)
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_GPIO_Init+0x90>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_GPIO_Init+0x90>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <MX_GPIO_Init+0x90>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_GPIO_Init+0x90>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_GPIO_Init+0x90>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <MX_GPIO_Init+0x90>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_GPIO_Init+0x90>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <MX_GPIO_Init+0x94>)
 80012a8:	f001 fbcc 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 80012ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_GPIO_Init+0x94>)
 80012c6:	f001 fa63 	bl	8002790 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010c00 	.word	0x40010c00

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f000 fe82 	bl	8001fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e4:	f000 f826 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f7ff ffac 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ec:	f7ff ff8c 	bl	8001208 <MX_DMA_Init>
  MX_TIM1_Init();
 80012f0:	f000 f9fa 	bl	80016e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012f4:	f000 faa4 	bl	8001840 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012f8:	f000 faee 	bl	80018d8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012fc:	f000 fbf2 	bl	8001ae4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001300:	f000 fc1a 	bl	8001b38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <main+0x48>)
 8001306:	f000 fdbf 	bl	8001e88 <RetargetInit>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800130a:	2100      	movs	r1, #0
 800130c:	4806      	ldr	r0, [pc, #24]	; (8001328 <main+0x4c>)
 800130e:	f002 f8ed 	bl	80034ec <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <main+0x50>)
 8001314:	f002 f840 	bl	8003398 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001318:	213c      	movs	r1, #60	; 0x3c
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <main+0x54>)
 800131c:	f002 fa2a 	bl	8003774 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001320:	e7fe      	b.n	8001320 <main+0x44>
 8001322:	bf00      	nop
 8001324:	20000240 	.word	0x20000240
 8001328:	2000012c 	.word	0x2000012c
 800132c:	20000174 	.word	0x20000174
 8001330:	200000e4 	.word	0x200000e4

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b090      	sub	sp, #64	; 0x40
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	2228      	movs	r2, #40	; 0x28
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fe6a 	bl	800501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001372:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	4618      	mov	r0, r3
 800137e:	f001 fb79 	bl	8002a74 <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001388:	f000 f8e8 	bl	800155c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2102      	movs	r1, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fde4 	bl	8002f74 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013b2:	f000 f8d3 	bl	800155c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80013b6:	f001 fec7 	bl	8003148 <HAL_RCC_EnableCSS>
}
 80013ba:	bf00      	nop
 80013bc:	3740      	adds	r7, #64	; 0x40
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	0000      	movs	r0, r0
 80013c4:	0000      	movs	r0, r0
	...

080013c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	int moto;
	if(htim==(&htim2)){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a57      	ldr	r2, [pc, #348]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	f040 8098 	bne.w	800150a <HAL_TIM_PeriodElapsedCallback+0x142>
		cnt = cnt + 0.02;
 80013da:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f81a 	bl	8000418 <__aeabi_f2d>
 80013e4:	a34c      	add	r3, pc, #304	; (adr r3, 8001518 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7fe feb7 	bl	800015c <__adddf3>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	4618      	mov	r0, r3
 80013f4:	4621      	mov	r1, r4
 80013f6:	f7ff fb29 	bl	8000a4c <__aeabi_d2f>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80013fe:	601a      	str	r2, [r3, #0]
		if(cnt>6.28)cnt = 0;
 8001400:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f807 	bl	8000418 <__aeabi_f2d>
 800140a:	a345      	add	r3, pc, #276	; (adr r3, 8001520 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff faea 	bl	80009e8 <__aeabi_dcmpgt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x5a>
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
		Target_velocity = DC + 500*sin(cnt);
 8001422:	4b44      	ldr	r3, [pc, #272]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fff6 	bl	8000418 <__aeabi_f2d>
 800142c:	4603      	mov	r3, r0
 800142e:	460c      	mov	r4, r1
 8001430:	4618      	mov	r0, r3
 8001432:	4621      	mov	r1, r4
 8001434:	f004 f9a2 	bl	800577c <sin>
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800143e:	f7ff f843 	bl	80004c8 <__aeabi_dmul>
 8001442:	4603      	mov	r3, r0
 8001444:	460c      	mov	r4, r1
 8001446:	4618      	mov	r0, r3
 8001448:	4621      	mov	r1, r4
 800144a:	a337      	add	r3, pc, #220	; (adr r3, 8001528 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7fe fe84 	bl	800015c <__adddf3>
 8001454:	4603      	mov	r3, r0
 8001456:	460c      	mov	r4, r1
 8001458:	4618      	mov	r0, r3
 800145a:	4621      	mov	r1, r4
 800145c:	f7ff face 	bl	80009fc <__aeabi_d2iz>
 8001460:	4602      	mov	r2, r0
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001464:	601a      	str	r2, [r3, #0]
		DirectionA = (int)(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3));
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	2b10      	cmp	r3, #16
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800147e:	601a      	str	r2, [r3, #0]
		CaptureNumberA = (short)(__HAL_TIM_GetCounter(&htim3));
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	b21b      	sxth	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800148c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3,0);
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

		moto=Incremental_PI(CaptureNumberA,Target_velocity);
 8001496:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	4610      	mov	r0, r2
 80014a2:	f000 fc9f 	bl	8001de4 <Incremental_PI>
 80014a6:	60f8      	str	r0, [r7, #12]
		Set_Pwm(moto);
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 fc5b 	bl	8001d64 <Set_Pwm>

		DataScope_Get_Channel_Data((float)(CaptureNumberA/100),1);
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a26      	ldr	r2, [pc, #152]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80014b4:	fb82 1203 	smull	r1, r2, r2, r3
 80014b8:	1152      	asrs	r2, r2, #5
 80014ba:	17db      	asrs	r3, r3, #31
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fbce 	bl	8000c60 <__aeabi_i2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2101      	movs	r1, #1
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fdbd 	bl	8001048 <DataScope_Get_Channel_Data>
		DataScope_Get_Channel_Data((float)(Target_velocity/100),2);
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	1152      	asrs	r2, r2, #5
 80014da:	17db      	asrs	r3, r3, #31
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fbbe 	bl	8000c60 <__aeabi_i2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2102      	movs	r1, #2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fdad 	bl	8001048 <DataScope_Get_Channel_Data>
		Send_Count = DataScope_Data_Generate(4);
 80014ee:	2004      	movs	r0, #4
 80014f0:	f7ff fe20 	bl	8001134 <DataScope_Data_Generate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80014fa:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1, &DataScope_OutPut_Buffer, Send_Count);
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4914      	ldr	r1, [pc, #80]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001506:	f003 f949 	bl	800479c <HAL_UART_Transmit_DMA>
	}



}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	47ae147b 	.word	0x47ae147b
 800151c:	3f947ae1 	.word	0x3f947ae1
 8001520:	51eb851f 	.word	0x51eb851f
 8001524:	40191eb8 	.word	0x40191eb8
 8001528:	00000000 	.word	0x00000000
 800152c:	40977000 	.word	0x40977000
 8001530:	20000174 	.word	0x20000174
 8001534:	200000bc 	.word	0x200000bc
 8001538:	407f4000 	.word	0x407f4000
 800153c:	20000000 	.word	0x20000000
 8001540:	200000e4 	.word	0x200000e4
 8001544:	200000d8 	.word	0x200000d8
 8001548:	200000e0 	.word	0x200000e0
 800154c:	51eb851f 	.word	0x51eb851f
 8001550:	200000dc 	.word	0x200000dc
 8001554:	20000090 	.word	0x20000090
 8001558:	20000200 	.word	0x20000200

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_MspInit+0x5c>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <HAL_MspInit+0x5c>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_MspInit+0x5c>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_MspInit+0x5c>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_MspInit+0x5c>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_MspInit+0x5c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_MspInit+0x60>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <HAL_MspInit+0x60>)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80015d0:	f001 fe5a 	bl	8003288 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <HardFault_Handler+0x4>

080015de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <BusFault_Handler+0x4>

080015ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <UsageFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001618:	f000 fd2c 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA1_Channel4_IRQHandler+0x10>)
 8001626:	f000 ff7f 	bl	8002528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001bc 	.word	0x200001bc

08001634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM2_IRQHandler+0x10>)
 800163a:	f002 f928 	bl	800388e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000174 	.word	0x20000174

08001648 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM3_IRQHandler+0x10>)
 800164e:	f002 f91e 	bl	800388e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200000e4 	.word	0x200000e4

0800165c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <USART1_IRQHandler+0x10>)
 8001662:	f003 f907 	bl	8004874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000200 	.word	0x20000200

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f003 fc92 	bl	8004fc8 <__errno>
 80016a4:	4602      	mov	r2, r0
 80016a6:	230c      	movs	r3, #12
 80016a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20005000 	.word	0x20005000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	200000c0 	.word	0x200000c0
 80016d8:	20000290 	.word	0x20000290

080016dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b096      	sub	sp, #88	; 0x58
 80016ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2220      	movs	r2, #32
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fc7b 	bl	800501c <memset>

  htim1.Instance = TIM1;
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <MX_TIM1_Init+0x150>)
 8001728:	4a44      	ldr	r2, [pc, #272]	; (800183c <MX_TIM1_Init+0x154>)
 800172a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800172c:	4b42      	ldr	r3, [pc, #264]	; (8001838 <MX_TIM1_Init+0x150>)
 800172e:	2200      	movs	r2, #0
 8001730:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <MX_TIM1_Init+0x150>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001738:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <MX_TIM1_Init+0x150>)
 800173a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800173e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <MX_TIM1_Init+0x150>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <MX_TIM1_Init+0x150>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <MX_TIM1_Init+0x150>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001752:	4839      	ldr	r0, [pc, #228]	; (8001838 <MX_TIM1_Init+0x150>)
 8001754:	f001 fdd0 	bl	80032f8 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800175e:	f7ff fefd 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001768:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800176c:	4619      	mov	r1, r3
 800176e:	4832      	ldr	r0, [pc, #200]	; (8001838 <MX_TIM1_Init+0x150>)
 8001770:	f002 fa54 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800177a:	f7ff feef 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800177e:	482e      	ldr	r0, [pc, #184]	; (8001838 <MX_TIM1_Init+0x150>)
 8001780:	f001 fe5c 	bl	800343c <HAL_TIM_PWM_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800178a:	f7ff fee7 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001796:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800179a:	4619      	mov	r1, r3
 800179c:	4826      	ldr	r0, [pc, #152]	; (8001838 <MX_TIM1_Init+0x150>)
 800179e:	f002 fdbd 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017a8:	f7ff fed8 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	2200      	movs	r2, #0
 80017ce:	4619      	mov	r1, r3
 80017d0:	4819      	ldr	r0, [pc, #100]	; (8001838 <MX_TIM1_Init+0x150>)
 80017d2:	f002 f965 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80017dc:	f7ff febe 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	2204      	movs	r2, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <MX_TIM1_Init+0x150>)
 80017ea:	f002 f959 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017f4:	f7ff feb2 	bl	800155c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001810:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	4619      	mov	r1, r3
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM1_Init+0x150>)
 800181c:	f002 fddc 	bl	80043d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001826:	f7ff fe99 	bl	800155c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800182a:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM1_Init+0x150>)
 800182c:	f000 f926 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 8001830:	bf00      	nop
 8001832:	3758      	adds	r7, #88	; 0x58
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000012c 	.word	0x2000012c
 800183c:	40012c00 	.word	0x40012c00

08001840 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_TIM2_Init+0x94>)
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_TIM2_Init+0x94>)
 8001866:	2247      	movs	r2, #71	; 0x47
 8001868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_TIM2_Init+0x94>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_TIM2_Init+0x94>)
 8001872:	f242 720f 	movw	r2, #9999	; 0x270f
 8001876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <MX_TIM2_Init+0x94>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_TIM2_Init+0x94>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <MX_TIM2_Init+0x94>)
 8001886:	f001 fd37 	bl	80032f8 <HAL_TIM_Base_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001890:	f7ff fe64 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	4619      	mov	r1, r3
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <MX_TIM2_Init+0x94>)
 80018a2:	f002 f9bb 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018ac:	f7ff fe56 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_TIM2_Init+0x94>)
 80018be:	f002 fd2d 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018c8:	f7ff fe48 	bl	800155c <Error_Handler>
  }

}
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000174 	.word	0x20000174

080018d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2224      	movs	r2, #36	; 0x24
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 fb98 	bl	800501c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <MX_TIM3_Init+0xa0>)
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <MX_TIM3_Init+0xa4>)
 80018f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MX_TIM3_Init+0xa0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_TIM3_Init+0xa0>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <MX_TIM3_Init+0xa0>)
 8001908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800190c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_TIM3_Init+0xa0>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <MX_TIM3_Init+0xa0>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800191a:	2303      	movs	r3, #3
 800191c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001922:	2301      	movs	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800192a:	230a      	movs	r3, #10
 800192c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001932:	2301      	movs	r3, #1
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800193a:	230a      	movs	r3, #10
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_TIM3_Init+0xa0>)
 8001946:	f001 fe73 	bl	8003630 <HAL_TIM_Encoder_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001950:	f7ff fe04 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_TIM3_Init+0xa0>)
 8001962:	f002 fcdb 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800196c:	f7ff fdf6 	bl	800155c <Error_Handler>
  }

}
 8001970:	bf00      	nop
 8001972:	3730      	adds	r7, #48	; 0x30
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200000e4 	.word	0x200000e4
 800197c:	40000400 	.word	0x40000400

08001980 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a16      	ldr	r2, [pc, #88]	; (80019e8 <HAL_TIM_Base_MspInit+0x68>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10c      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_TIM_Base_MspInit+0x6c>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <HAL_TIM_Base_MspInit+0x6c>)
 8001998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199c:	6193      	str	r3, [r2, #24]
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_TIM_Base_MspInit+0x6c>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019aa:	e018      	b.n	80019de <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b4:	d113      	bne.n	80019de <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_TIM_Base_MspInit+0x6c>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_TIM_Base_MspInit+0x6c>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_TIM_Base_MspInit+0x6c>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	201c      	movs	r0, #28
 80019d4:	f000 fc41 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019d8:	201c      	movs	r0, #28
 80019da:	f000 fc5a 	bl	8002292 <HAL_NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d12b      	bne.n	8001a68 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	61d3      	str	r3, [r2, #28]
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a40:	23c0      	movs	r3, #192	; 0xc0
 8001a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4619      	mov	r1, r3
 8001a52:	4809      	ldr	r0, [pc, #36]	; (8001a78 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a54:	f000 fe9c 	bl	8002790 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	201d      	movs	r0, #29
 8001a5e:	f000 fbfc 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a62:	201d      	movs	r0, #29
 8001a64:	f000 fc15 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010800 	.word	0x40010800

08001a7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_TIM_MspPostInit+0x5c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d118      	bne.n	8001ace <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_TIM_MspPostInit+0x60>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_TIM_MspPostInit+0x60>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_TIM_MspPostInit+0x60>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ab4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_TIM_MspPostInit+0x64>)
 8001aca:	f000 fe61 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3720      	adds	r7, #32
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010800 	.word	0x40010800

08001ae4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <MX_USART1_UART_Init+0x50>)
 8001aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b1c:	f002 fcbf 	bl	800449e <HAL_UART_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b26:	f7ff fd19 	bl	800155c <Error_Handler>
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000200 	.word	0x20000200
 8001b34:	40013800 	.word	0x40013800

08001b38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <MX_USART2_UART_Init+0x50>)
 8001b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b70:	f002 fc95 	bl	800449e <HAL_UART_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b7a:	f7ff fcef 	bl	800155c <Error_Handler>
  }

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000240 	.word	0x20000240
 8001b88:	40004400 	.word	0x40004400

08001b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	; 0x30
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a54      	ldr	r2, [pc, #336]	; (8001cf8 <HAL_UART_MspInit+0x16c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d16c      	bne.n	8001c86 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b4d      	ldr	r3, [pc, #308]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001bca:	f043 0308 	orr.w	r3, r3, #8
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bdc:	2340      	movs	r3, #64	; 0x40
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	4844      	ldr	r0, [pc, #272]	; (8001d00 <HAL_UART_MspInit+0x174>)
 8001bf0:	f000 fdce 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	483e      	ldr	r0, [pc, #248]	; (8001d00 <HAL_UART_MspInit+0x174>)
 8001c08:	f000 fdc2 	bl	8002790 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_UART_MspInit+0x178>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c22:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <HAL_UART_MspInit+0x178>)
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001c28:	4b37      	ldr	r3, [pc, #220]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c2a:	4a38      	ldr	r2, [pc, #224]	; (8001d0c <HAL_UART_MspInit+0x180>)
 8001c2c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c30:	2210      	movs	r2, #16
 8001c32:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c34:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c46:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c58:	482b      	ldr	r0, [pc, #172]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c5a:	f000 fb35 	bl	80022c8 <HAL_DMA_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8001c64:	f7ff fc7a 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6e:	4a26      	ldr	r2, [pc, #152]	; (8001d08 <HAL_UART_MspInit+0x17c>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2102      	movs	r1, #2
 8001c78:	2025      	movs	r0, #37	; 0x25
 8001c7a:	f000 faee 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c7e:	2025      	movs	r0, #37	; 0x25
 8001c80:	f000 fb07 	bl	8002292 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c84:	e034      	b.n	8001cf0 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <HAL_UART_MspInit+0x184>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d12f      	bne.n	8001cf0 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9a:	61d3      	str	r3, [r2, #28]
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	6193      	str	r3, [r2, #24]
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_UART_MspInit+0x170>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4810      	ldr	r0, [pc, #64]	; (8001d14 <HAL_UART_MspInit+0x188>)
 8001cd4:	f000 fd5c 	bl	8002790 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480a      	ldr	r0, [pc, #40]	; (8001d14 <HAL_UART_MspInit+0x188>)
 8001cec:	f000 fd50 	bl	8002790 <HAL_GPIO_Init>
}
 8001cf0:	bf00      	nop
 8001cf2:	3730      	adds	r7, #48	; 0x30
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010c00 	.word	0x40010c00
 8001d04:	40010000 	.word	0x40010000
 8001d08:	200001bc 	.word	0x200001bc
 8001d0c:	40020044 	.word	0x40020044
 8001d10:	40004400 	.word	0x40004400
 8001d14:	40010800 	.word	0x40010800

08001d18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d1a:	e003      	b.n	8001d24 <LoopCopyDataInit>

08001d1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d22:	3104      	adds	r1, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d24:	480a      	ldr	r0, [pc, #40]	; (8001d50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d2c:	d3f6      	bcc.n	8001d1c <CopyDataInit>
  ldr r2, =_sbss
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d30:	e002      	b.n	8001d38 <LoopFillZerobss>

08001d32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d34:	f842 3b04 	str.w	r3, [r2], #4

08001d38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d3c:	d3f9      	bcc.n	8001d32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d3e:	f7ff fccd 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d42:	f003 f947 	bl	8004fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d46:	f7ff fac9 	bl	80012dc <main>
  bx lr
 8001d4a:	4770      	bx	lr
  ldr r3, =_sidata
 8001d4c:	080069d8 	.word	0x080069d8
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d54:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001d58:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001d5c:	2000028c 	.word	0x2000028c

08001d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC1_2_IRQHandler>
	...

08001d64 <Set_Pwm>:

#define Amplitude 7100


void Set_Pwm(int moto)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	if(moto>Amplitude) moto = Amplitude;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 8001d72:	4293      	cmp	r3, r2
 8001d74:	dd02      	ble.n	8001d7c <Set_Pwm+0x18>
 8001d76:	f641 33bc 	movw	r3, #7100	; 0x1bbc
 8001d7a:	607b      	str	r3, [r7, #4]
	if(moto<-Amplitude) moto = -Amplitude;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <Set_Pwm+0x74>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	da01      	bge.n	8001d88 <Set_Pwm+0x24>
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <Set_Pwm+0x74>)
 8001d86:	607b      	str	r3, [r7, #4]
	if(moto>0){
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	dd0c      	ble.n	8001da8 <Set_Pwm+0x44>
		HAL_GPIO_WritePin(GPIOB, AIN1_Pin, RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d94:	4811      	ldr	r0, [pc, #68]	; (8001ddc <Set_Pwm+0x78>)
 8001d96:	f000 fe55 	bl	8002a44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, AIN2_Pin, SET);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001da0:	480e      	ldr	r0, [pc, #56]	; (8001ddc <Set_Pwm+0x78>)
 8001da2:	f000 fe4f 	bl	8002a44 <HAL_GPIO_WritePin>
 8001da6:	e00b      	b.n	8001dc0 <Set_Pwm+0x5c>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, AIN1_Pin, SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <Set_Pwm+0x78>)
 8001db0:	f000 fe48 	bl	8002a44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, AIN2_Pin, RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dba:	4808      	ldr	r0, [pc, #32]	; (8001ddc <Set_Pwm+0x78>)
 8001dbc:	f000 fe42 	bl	8002a44 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(moto));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001dc6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <Set_Pwm+0x7c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	ffffe444 	.word	0xffffe444
 8001ddc:	40010c00 	.word	0x40010c00
 8001de0:	2000012c 	.word	0x2000012c

08001de4 <Incremental_PI>:

int Incremental_PI (int Encoder,int Target)
{
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	float Kp=20,Ki=30;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <Incremental_PI+0x90>)
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <Incremental_PI+0x94>)
 8001df4:	60bb      	str	r3, [r7, #8]
	static int Bias,Pwm,Last_bias;
	Bias=Encoder-Target;
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <Incremental_PI+0x98>)
 8001dfe:	6013      	str	r3, [r2, #0]
	Pwm+=Kp*(Bias-Last_bias)+Ki*Bias;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <Incremental_PI+0x9c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe ff2b 	bl	8000c60 <__aeabi_i2f>
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <Incremental_PI+0x98>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <Incremental_PI+0xa0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe ff22 	bl	8000c60 <__aeabi_i2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff71 	bl	8000d08 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461d      	mov	r5, r3
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <Incremental_PI+0x98>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe ff16 	bl	8000c60 <__aeabi_i2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe ff65 	bl	8000d08 <__aeabi_fmul>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4619      	mov	r1, r3
 8001e42:	4628      	mov	r0, r5
 8001e44:	f7fe fe58 	bl	8000af8 <__addsf3>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7fe fe53 	bl	8000af8 <__addsf3>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f8a7 	bl	8000fa8 <__aeabi_f2iz>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <Incremental_PI+0x9c>)
 8001e5e:	601a      	str	r2, [r3, #0]
	Last_bias=Bias;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <Incremental_PI+0x98>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <Incremental_PI+0xa0>)
 8001e66:	6013      	str	r3, [r2, #0]
	return Pwm;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <Incremental_PI+0x9c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bdb0      	pop	{r4, r5, r7, pc}
 8001e74:	41a00000 	.word	0x41a00000
 8001e78:	41f00000 	.word	0x41f00000
 8001e7c:	200000c4 	.word	0x200000c4
 8001e80:	200000c8 	.word	0x200000c8
 8001e84:	200000cc 	.word	0x200000cc

08001e88 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <RetargetInit+0x28>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <RetargetInit+0x2c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6898      	ldr	r0, [r3, #8]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	f003 f8c3 	bl	800502c <setvbuf>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000280 	.word	0x20000280
 8001eb4:	20000010 	.word	0x20000010

08001eb8 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d002      	beq.n	8001ed0 <_write+0x18>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d111      	bne.n	8001ef4 <_write+0x3c>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len,1000);
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <_write+0x54>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	f002 fb2b 	bl	8004538 <HAL_UART_Transmit>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    //hstatus = HAL_UART_Transmit_DMA(gHuart, (uint8_t *) ptr, len);
    if (hstatus == HAL_OK)
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <_write+0x38>
      return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	e008      	b.n	8001f02 <_write+0x4a>
    else
      return EIO;
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	e006      	b.n	8001f02 <_write+0x4a>
  }
  errno = EBADF;
 8001ef4:	f003 f868 	bl	8004fc8 <__errno>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	2309      	movs	r3, #9
 8001efc:	6013      	str	r3, [r2, #0]
  return -1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000280 	.word	0x20000280

08001f10 <_close>:

int _close(int fd) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db04      	blt.n	8001f28 <_close+0x18>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	dc01      	bgt.n	8001f28 <_close+0x18>
    return 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e006      	b.n	8001f36 <_close+0x26>

  errno = EBADF;
 8001f28:	f003 f84e 	bl	8004fc8 <__errno>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	2309      	movs	r3, #9
 8001f30:	6013      	str	r3, [r2, #0]
  return -1;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001f4a:	f003 f83d 	bl	8004fc8 <__errno>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	2309      	movs	r3, #9
 8001f52:	6013      	str	r3, [r2, #0]
  return -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_read>:

int _read(int fd, char* ptr, int len) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d110      	bne.n	8001f94 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1,1000);
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <_read+0x4c>)
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	f002 fb6d 	bl	800465c <HAL_UART_Receive>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]
    //hstatus = HAL_UART_Receive_DMA(gHuart, (uint8_t *) ptr, 1);
    if (hstatus == HAL_OK)
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <_read+0x30>
      return 1;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e008      	b.n	8001fa2 <_read+0x42>
    else
      return EIO;
 8001f90:	2305      	movs	r3, #5
 8001f92:	e006      	b.n	8001fa2 <_read+0x42>
  }
  errno = EBADF;
 8001f94:	f003 f818 	bl	8004fc8 <__errno>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	2309      	movs	r3, #9
 8001f9c:	6013      	str	r3, [r2, #0]
  return -1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000280 	.word	0x20000280

08001fb0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db08      	blt.n	8001fd2 <_fstat+0x22>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	dc05      	bgt.n	8001fd2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fcc:	605a      	str	r2, [r3, #4]
    return 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e005      	b.n	8001fde <_fstat+0x2e>
  }

  errno = EBADF;
 8001fd2:	f002 fff9 	bl	8004fc8 <__errno>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	2309      	movs	r3, #9
 8001fda:	6013      	str	r3, [r2, #0]
  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_Init+0x28>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_Init+0x28>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f923 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f808 	bl	8002014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002004:	f7ff fab0 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x54>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	fbb3 f3f1 	udiv	r3, r3, r1
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f93b 	bl	80022ae <HAL_SYSTICK_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00e      	b.n	8002060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0f      	cmp	r3, #15
 8002046:	d80a      	bhi.n	800205e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002048:	2200      	movs	r2, #0
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f000 f903 	bl	800225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_InitTick+0x5c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000004 	.word	0x20000004
 800206c:	2000000c 	.word	0x2000000c
 8002070:	20000008 	.word	0x20000008

08002074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x1c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x20>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	4a03      	ldr	r2, [pc, #12]	; (8002094 <HAL_IncTick+0x20>)
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	2000000c 	.word	0x2000000c
 8002094:	20000284 	.word	0x20000284

08002098 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_GetTick+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20000284 	.word	0x20000284

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4906      	ldr	r1, [pc, #24]	; (8002144 <__NVIC_EnableIRQ+0x34>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f7ff ff90 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff2d 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff42 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff90 	bl	800219c <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5f 	bl	8002148 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff35 	bl	8002110 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa2 	bl	8002200 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e043      	b.n	8002366 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_DMA_Init+0xa8>)
 80022e6:	4413      	add	r3, r2
 80022e8:	4a22      	ldr	r2, [pc, #136]	; (8002374 <HAL_DMA_Init+0xac>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	009a      	lsls	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <HAL_DMA_Init+0xb0>)
 80022fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002312:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002316:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	bffdfff8 	.word	0xbffdfff8
 8002374:	cccccccd 	.word	0xcccccccd
 8002378:	40020000 	.word	0x40020000

0800237c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_DMA_Start_IT+0x20>
 8002398:	2302      	movs	r3, #2
 800239a:	e04a      	b.n	8002432 <HAL_DMA_Start_IT+0xb6>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d13a      	bne.n	8002424 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f9ae 	bl	8002734 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 020e 	orr.w	r2, r2, #14
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e00f      	b.n	8002412 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0204 	bic.w	r2, r2, #4
 8002400:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 020a 	orr.w	r2, r2, #10
 8002410:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e005      	b.n	8002430 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800242c:	2302      	movs	r3, #2
 800242e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800244e:	2b02      	cmp	r3, #2
 8002450:	d005      	beq.n	800245e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2204      	movs	r2, #4
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e051      	b.n	8002502 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 020e 	bic.w	r2, r2, #14
 800246c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a22      	ldr	r2, [pc, #136]	; (800250c <HAL_DMA_Abort_IT+0xd0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d029      	beq.n	80024dc <HAL_DMA_Abort_IT+0xa0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a20      	ldr	r2, [pc, #128]	; (8002510 <HAL_DMA_Abort_IT+0xd4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d022      	beq.n	80024d8 <HAL_DMA_Abort_IT+0x9c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <HAL_DMA_Abort_IT+0xd8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d01a      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x96>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1d      	ldr	r2, [pc, #116]	; (8002518 <HAL_DMA_Abort_IT+0xdc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d012      	beq.n	80024cc <HAL_DMA_Abort_IT+0x90>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_DMA_Abort_IT+0xe0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00a      	beq.n	80024c6 <HAL_DMA_Abort_IT+0x8a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1a      	ldr	r2, [pc, #104]	; (8002520 <HAL_DMA_Abort_IT+0xe4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d102      	bne.n	80024c0 <HAL_DMA_Abort_IT+0x84>
 80024ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024be:	e00e      	b.n	80024de <HAL_DMA_Abort_IT+0xa2>
 80024c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c4:	e00b      	b.n	80024de <HAL_DMA_Abort_IT+0xa2>
 80024c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ca:	e008      	b.n	80024de <HAL_DMA_Abort_IT+0xa2>
 80024cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d0:	e005      	b.n	80024de <HAL_DMA_Abort_IT+0xa2>
 80024d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024d6:	e002      	b.n	80024de <HAL_DMA_Abort_IT+0xa2>
 80024d8:	2310      	movs	r3, #16
 80024da:	e000      	b.n	80024de <HAL_DMA_Abort_IT+0xa2>
 80024dc:	2301      	movs	r3, #1
 80024de:	4a11      	ldr	r2, [pc, #68]	; (8002524 <HAL_DMA_Abort_IT+0xe8>)
 80024e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
    } 
  }
  return status;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40020008 	.word	0x40020008
 8002510:	4002001c 	.word	0x4002001c
 8002514:	40020030 	.word	0x40020030
 8002518:	40020044 	.word	0x40020044
 800251c:	40020058 	.word	0x40020058
 8002520:	4002006c 	.word	0x4002006c
 8002524:	40020000 	.word	0x40020000

08002528 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2204      	movs	r2, #4
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d04f      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xc8>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d04a      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0204 	bic.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a66      	ldr	r2, [pc, #408]	; (8002718 <HAL_DMA_IRQHandler+0x1f0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d029      	beq.n	80025d6 <HAL_DMA_IRQHandler+0xae>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a65      	ldr	r2, [pc, #404]	; (800271c <HAL_DMA_IRQHandler+0x1f4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d022      	beq.n	80025d2 <HAL_DMA_IRQHandler+0xaa>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a63      	ldr	r2, [pc, #396]	; (8002720 <HAL_DMA_IRQHandler+0x1f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01a      	beq.n	80025cc <HAL_DMA_IRQHandler+0xa4>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a62      	ldr	r2, [pc, #392]	; (8002724 <HAL_DMA_IRQHandler+0x1fc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d012      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x9e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a60      	ldr	r2, [pc, #384]	; (8002728 <HAL_DMA_IRQHandler+0x200>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00a      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x98>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a5f      	ldr	r2, [pc, #380]	; (800272c <HAL_DMA_IRQHandler+0x204>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d102      	bne.n	80025ba <HAL_DMA_IRQHandler+0x92>
 80025b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b8:	e00e      	b.n	80025d8 <HAL_DMA_IRQHandler+0xb0>
 80025ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025be:	e00b      	b.n	80025d8 <HAL_DMA_IRQHandler+0xb0>
 80025c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025c4:	e008      	b.n	80025d8 <HAL_DMA_IRQHandler+0xb0>
 80025c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ca:	e005      	b.n	80025d8 <HAL_DMA_IRQHandler+0xb0>
 80025cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d0:	e002      	b.n	80025d8 <HAL_DMA_IRQHandler+0xb0>
 80025d2:	2340      	movs	r3, #64	; 0x40
 80025d4:	e000      	b.n	80025d8 <HAL_DMA_IRQHandler+0xb0>
 80025d6:	2304      	movs	r3, #4
 80025d8:	4a55      	ldr	r2, [pc, #340]	; (8002730 <HAL_DMA_IRQHandler+0x208>)
 80025da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8094 	beq.w	800270e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025ee:	e08e      	b.n	800270e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	2202      	movs	r2, #2
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d056      	beq.n	80026ae <HAL_DMA_IRQHandler+0x186>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d051      	beq.n	80026ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 020a 	bic.w	r2, r2, #10
 8002626:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a38      	ldr	r2, [pc, #224]	; (8002718 <HAL_DMA_IRQHandler+0x1f0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d029      	beq.n	800268e <HAL_DMA_IRQHandler+0x166>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a37      	ldr	r2, [pc, #220]	; (800271c <HAL_DMA_IRQHandler+0x1f4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d022      	beq.n	800268a <HAL_DMA_IRQHandler+0x162>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a35      	ldr	r2, [pc, #212]	; (8002720 <HAL_DMA_IRQHandler+0x1f8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01a      	beq.n	8002684 <HAL_DMA_IRQHandler+0x15c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a34      	ldr	r2, [pc, #208]	; (8002724 <HAL_DMA_IRQHandler+0x1fc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d012      	beq.n	800267e <HAL_DMA_IRQHandler+0x156>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a32      	ldr	r2, [pc, #200]	; (8002728 <HAL_DMA_IRQHandler+0x200>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00a      	beq.n	8002678 <HAL_DMA_IRQHandler+0x150>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a31      	ldr	r2, [pc, #196]	; (800272c <HAL_DMA_IRQHandler+0x204>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d102      	bne.n	8002672 <HAL_DMA_IRQHandler+0x14a>
 800266c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002670:	e00e      	b.n	8002690 <HAL_DMA_IRQHandler+0x168>
 8002672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002676:	e00b      	b.n	8002690 <HAL_DMA_IRQHandler+0x168>
 8002678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800267c:	e008      	b.n	8002690 <HAL_DMA_IRQHandler+0x168>
 800267e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002682:	e005      	b.n	8002690 <HAL_DMA_IRQHandler+0x168>
 8002684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002688:	e002      	b.n	8002690 <HAL_DMA_IRQHandler+0x168>
 800268a:	2320      	movs	r3, #32
 800268c:	e000      	b.n	8002690 <HAL_DMA_IRQHandler+0x168>
 800268e:	2302      	movs	r3, #2
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_DMA_IRQHandler+0x208>)
 8002692:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d034      	beq.n	800270e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026ac:	e02f      	b.n	800270e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2208      	movs	r2, #8
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d028      	beq.n	8002710 <HAL_DMA_IRQHandler+0x1e8>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d023      	beq.n	8002710 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 020e 	bic.w	r2, r2, #14
 80026d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f202 	lsl.w	r2, r1, r2
 80026e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
    }
  }
  return;
 800270e:	bf00      	nop
 8002710:	bf00      	nop
}
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40020008 	.word	0x40020008
 800271c:	4002001c 	.word	0x4002001c
 8002720:	40020030 	.word	0x40020030
 8002724:	40020044 	.word	0x40020044
 8002728:	40020058 	.word	0x40020058
 800272c:	4002006c 	.word	0x4002006c
 8002730:	40020000 	.word	0x40020000

08002734 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f202 	lsl.w	r2, r1, r2
 8002750:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b10      	cmp	r3, #16
 8002760:	d108      	bne.n	8002774 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002772:	e007      	b.n	8002784 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	60da      	str	r2, [r3, #12]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
	...

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b08b      	sub	sp, #44	; 0x2c
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	e127      	b.n	80029f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027a4:	2201      	movs	r2, #1
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	429a      	cmp	r2, r3
 80027be:	f040 8116 	bne.w	80029ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d034      	beq.n	8002834 <HAL_GPIO_Init+0xa4>
 80027ca:	2b12      	cmp	r3, #18
 80027cc:	d80d      	bhi.n	80027ea <HAL_GPIO_Init+0x5a>
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d02b      	beq.n	800282a <HAL_GPIO_Init+0x9a>
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d804      	bhi.n	80027e0 <HAL_GPIO_Init+0x50>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d031      	beq.n	800283e <HAL_GPIO_Init+0xae>
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d01c      	beq.n	8002818 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027de:	e048      	b.n	8002872 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d043      	beq.n	800286c <HAL_GPIO_Init+0xdc>
 80027e4:	2b11      	cmp	r3, #17
 80027e6:	d01b      	beq.n	8002820 <HAL_GPIO_Init+0x90>
          break;
 80027e8:	e043      	b.n	8002872 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027ea:	4a89      	ldr	r2, [pc, #548]	; (8002a10 <HAL_GPIO_Init+0x280>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d026      	beq.n	800283e <HAL_GPIO_Init+0xae>
 80027f0:	4a87      	ldr	r2, [pc, #540]	; (8002a10 <HAL_GPIO_Init+0x280>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d806      	bhi.n	8002804 <HAL_GPIO_Init+0x74>
 80027f6:	4a87      	ldr	r2, [pc, #540]	; (8002a14 <HAL_GPIO_Init+0x284>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d020      	beq.n	800283e <HAL_GPIO_Init+0xae>
 80027fc:	4a86      	ldr	r2, [pc, #536]	; (8002a18 <HAL_GPIO_Init+0x288>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01d      	beq.n	800283e <HAL_GPIO_Init+0xae>
          break;
 8002802:	e036      	b.n	8002872 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002804:	4a85      	ldr	r2, [pc, #532]	; (8002a1c <HAL_GPIO_Init+0x28c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d019      	beq.n	800283e <HAL_GPIO_Init+0xae>
 800280a:	4a85      	ldr	r2, [pc, #532]	; (8002a20 <HAL_GPIO_Init+0x290>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d016      	beq.n	800283e <HAL_GPIO_Init+0xae>
 8002810:	4a84      	ldr	r2, [pc, #528]	; (8002a24 <HAL_GPIO_Init+0x294>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0xae>
          break;
 8002816:	e02c      	b.n	8002872 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	623b      	str	r3, [r7, #32]
          break;
 800281e:	e028      	b.n	8002872 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	3304      	adds	r3, #4
 8002826:	623b      	str	r3, [r7, #32]
          break;
 8002828:	e023      	b.n	8002872 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	3308      	adds	r3, #8
 8002830:	623b      	str	r3, [r7, #32]
          break;
 8002832:	e01e      	b.n	8002872 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	330c      	adds	r3, #12
 800283a:	623b      	str	r3, [r7, #32]
          break;
 800283c:	e019      	b.n	8002872 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002846:	2304      	movs	r3, #4
 8002848:	623b      	str	r3, [r7, #32]
          break;
 800284a:	e012      	b.n	8002872 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002854:	2308      	movs	r3, #8
 8002856:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	611a      	str	r2, [r3, #16]
          break;
 800285e:	e008      	b.n	8002872 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002860:	2308      	movs	r3, #8
 8002862:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	615a      	str	r2, [r3, #20]
          break;
 800286a:	e002      	b.n	8002872 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800286c:	2300      	movs	r3, #0
 800286e:	623b      	str	r3, [r7, #32]
          break;
 8002870:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2bff      	cmp	r3, #255	; 0xff
 8002876:	d801      	bhi.n	800287c <HAL_GPIO_Init+0xec>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	e001      	b.n	8002880 <HAL_GPIO_Init+0xf0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d802      	bhi.n	800288e <HAL_GPIO_Init+0xfe>
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	e002      	b.n	8002894 <HAL_GPIO_Init+0x104>
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	3b08      	subs	r3, #8
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	210f      	movs	r1, #15
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	401a      	ands	r2, r3
 80028a6:	6a39      	ldr	r1, [r7, #32]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	431a      	orrs	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8096 	beq.w	80029ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028c2:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_GPIO_Init+0x298>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_GPIO_Init+0x298>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6193      	str	r3, [r2, #24]
 80028ce:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <HAL_GPIO_Init+0x298>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028da:	4a54      	ldr	r2, [pc, #336]	; (8002a2c <HAL_GPIO_Init+0x29c>)
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4013      	ands	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4b      	ldr	r2, [pc, #300]	; (8002a30 <HAL_GPIO_Init+0x2a0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x19e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_GPIO_Init+0x2a4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x19a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <HAL_GPIO_Init+0x2a8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x196>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a48      	ldr	r2, [pc, #288]	; (8002a3c <HAL_GPIO_Init+0x2ac>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x192>
 800291e:	2303      	movs	r3, #3
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x1a0>
 8002922:	2304      	movs	r3, #4
 8002924:	e004      	b.n	8002930 <HAL_GPIO_Init+0x1a0>
 8002926:	2302      	movs	r3, #2
 8002928:	e002      	b.n	8002930 <HAL_GPIO_Init+0x1a0>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_GPIO_Init+0x1a0>
 800292e:	2300      	movs	r3, #0
 8002930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002932:	f002 0203 	and.w	r2, r2, #3
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	4093      	lsls	r3, r2
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002940:	493a      	ldr	r1, [pc, #232]	; (8002a2c <HAL_GPIO_Init+0x29c>)
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4938      	ldr	r1, [pc, #224]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
 8002966:	e006      	b.n	8002976 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	43db      	mvns	r3, r3
 8002970:	4933      	ldr	r1, [pc, #204]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 8002972:	4013      	ands	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002982:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	492e      	ldr	r1, [pc, #184]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
 800298e:	e006      	b.n	800299e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	43db      	mvns	r3, r3
 8002998:	4929      	ldr	r1, [pc, #164]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 800299a:	4013      	ands	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	4924      	ldr	r1, [pc, #144]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
 80029b6:	e006      	b.n	80029c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029b8:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	43db      	mvns	r3, r3
 80029c0:	491f      	ldr	r1, [pc, #124]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	491a      	ldr	r1, [pc, #104]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60cb      	str	r3, [r1, #12]
 80029de:	e006      	b.n	80029ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	4915      	ldr	r1, [pc, #84]	; (8002a40 <HAL_GPIO_Init+0x2b0>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	3301      	adds	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f47f aed0 	bne.w	80027a4 <HAL_GPIO_Init+0x14>
  }
}
 8002a04:	bf00      	nop
 8002a06:	372c      	adds	r7, #44	; 0x2c
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	10210000 	.word	0x10210000
 8002a14:	10110000 	.word	0x10110000
 8002a18:	10120000 	.word	0x10120000
 8002a1c:	10310000 	.word	0x10310000
 8002a20:	10320000 	.word	0x10320000
 8002a24:	10220000 	.word	0x10220000
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40010800 	.word	0x40010800
 8002a34:	40010c00 	.word	0x40010c00
 8002a38:	40011000 	.word	0x40011000
 8002a3c:	40011400 	.word	0x40011400
 8002a40:	40010400 	.word	0x40010400

08002a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a60:	e003      	b.n	8002a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	041a      	lsls	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e26c      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8087 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a94:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d00c      	beq.n	8002aba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa0:	4b8f      	ldr	r3, [pc, #572]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d112      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x5e>
 8002aac:	4b8c      	ldr	r3, [pc, #560]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aba:	4b89      	ldr	r3, [pc, #548]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d06c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x12c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d168      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e246      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x76>
 8002adc:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a7f      	ldr	r2, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	e02e      	b.n	8002b48 <HAL_RCC_OscConfig+0xd4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x98>
 8002af2:	4b7b      	ldr	r3, [pc, #492]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7a      	ldr	r2, [pc, #488]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b78      	ldr	r3, [pc, #480]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a77      	ldr	r2, [pc, #476]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e01d      	b.n	8002b48 <HAL_RCC_OscConfig+0xd4>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0xbc>
 8002b16:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a71      	ldr	r2, [pc, #452]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b6f      	ldr	r3, [pc, #444]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6e      	ldr	r2, [pc, #440]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0xd4>
 8002b30:	4b6b      	ldr	r3, [pc, #428]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6a      	ldr	r2, [pc, #424]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a67      	ldr	r2, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7ff faa2 	bl	8002098 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7ff fa9e 	bl	8002098 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1fa      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0xe4>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff fa8e 	bl	8002098 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7ff fa8a 	bl	8002098 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1e6      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x10c>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d063      	beq.n	8002c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bae:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bba:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x18c>
 8002bc6:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x176>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e1ba      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4939      	ldr	r1, [pc, #228]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	e03a      	b.n	8002c76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c08:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7ff fa43 	bl	8002098 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7ff fa3f 	bl	8002098 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e19b      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4927      	ldr	r1, [pc, #156]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fa22 	bl	8002098 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7ff fa1e 	bl	8002098 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e17a      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d03a      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d019      	beq.n	8002cbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7ff fa02 	bl	8002098 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7ff f9fe 	bl	8002098 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e15a      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f000 fafa 	bl	80032b0 <RCC_Delay>
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc4:	f7ff f9e8 	bl	8002098 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cca:	e00f      	b.n	8002cec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ccc:	f7ff f9e4 	bl	8002098 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d908      	bls.n	8002cec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e140      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	42420000 	.word	0x42420000
 8002ce8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b9e      	ldr	r3, [pc, #632]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e9      	bne.n	8002ccc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80a6 	beq.w	8002e52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b97      	ldr	r3, [pc, #604]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10d      	bne.n	8002d32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	4b94      	ldr	r3, [pc, #592]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4a93      	ldr	r2, [pc, #588]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	61d3      	str	r3, [r2, #28]
 8002d22:	4b91      	ldr	r3, [pc, #580]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d32:	4b8e      	ldr	r3, [pc, #568]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d118      	bne.n	8002d70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3e:	4b8b      	ldr	r3, [pc, #556]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a8a      	ldr	r2, [pc, #552]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4a:	f7ff f9a5 	bl	8002098 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d52:	f7ff f9a1 	bl	8002098 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	; 0x64
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0fd      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	4b81      	ldr	r3, [pc, #516]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x312>
 8002d78:	4b7b      	ldr	r3, [pc, #492]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a7a      	ldr	r2, [pc, #488]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	e02d      	b.n	8002de2 <HAL_RCC_OscConfig+0x36e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x334>
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a75      	ldr	r2, [pc, #468]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	6213      	str	r3, [r2, #32]
 8002d9a:	4b73      	ldr	r3, [pc, #460]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a72      	ldr	r2, [pc, #456]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	6213      	str	r3, [r2, #32]
 8002da6:	e01c      	b.n	8002de2 <HAL_RCC_OscConfig+0x36e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x356>
 8002db0:	4b6d      	ldr	r3, [pc, #436]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a6c      	ldr	r2, [pc, #432]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a69      	ldr	r2, [pc, #420]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCC_OscConfig+0x36e>
 8002dca:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	6213      	str	r3, [r2, #32]
 8002dd6:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d015      	beq.n	8002e16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7ff f955 	bl	8002098 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7ff f951 	bl	8002098 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0ab      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e08:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ee      	beq.n	8002df2 <HAL_RCC_OscConfig+0x37e>
 8002e14:	e014      	b.n	8002e40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7ff f93f 	bl	8002098 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7ff f93b 	bl	8002098 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e095      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e34:	4b4c      	ldr	r3, [pc, #304]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ee      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b48      	ldr	r3, [pc, #288]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4a47      	ldr	r2, [pc, #284]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8081 	beq.w	8002f5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5c:	4b42      	ldr	r3, [pc, #264]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d061      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d146      	bne.n	8002efe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <HAL_RCC_OscConfig+0x4fc>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7ff f90f 	bl	8002098 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7ff f90b 	bl	8002098 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e067      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e90:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea6:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	492d      	ldr	r1, [pc, #180]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a19      	ldr	r1, [r3, #32]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	4927      	ldr	r1, [pc, #156]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed0:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <HAL_RCC_OscConfig+0x4fc>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7ff f8df 	bl	8002098 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ede:	f7ff f8db 	bl	8002098 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e037      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x46a>
 8002efc:	e02f      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <HAL_RCC_OscConfig+0x4fc>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff f8c8 	bl	8002098 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7ff f8c4 	bl	8002098 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e020      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x498>
 8002f2a:	e018      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e013      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_OscConfig+0x4f4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	42420060 	.word	0x42420060

08002f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d0      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4965      	ldr	r1, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d040      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e073      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7ff f818 	bl	8002098 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7ff f814 	bl	8002098 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e053      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d210      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f82d 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8003106:	4601      	mov	r1, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	fa21 f303 	lsr.w	r3, r1, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1cc>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1d0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe ff76 	bl	8002014 <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40022000 	.word	0x40022000
 8003138:	40021000 	.word	0x40021000
 800313c:	0800677c 	.word	0x0800677c
 8003140:	20000004 	.word	0x20000004
 8003144:	20000008 	.word	0x20000008

08003148 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_RCC_EnableCSS+0x14>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	4242004c 	.word	0x4242004c

08003160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	b490      	push	{r4, r7}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003166:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003168:	1d3c      	adds	r4, r7, #4
 800316a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800316c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003170:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b04      	cmp	r3, #4
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x40>
 800319a:	2b08      	cmp	r3, #8
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x46>
 800319e:	e02d      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031a0:	4b1e      	ldr	r3, [pc, #120]	; (800321c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031a2:	623b      	str	r3, [r7, #32]
      break;
 80031a4:	e02d      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	0c9b      	lsrs	r3, r3, #18
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031b2:	4413      	add	r3, r2
 80031b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0c5b      	lsrs	r3, r3, #17
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031d2:	4413      	add	r3, r2
 80031d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	4a0f      	ldr	r2, [pc, #60]	; (800321c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031de:	fb02 f203 	mul.w	r2, r2, r3
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ea:	e004      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	623b      	str	r3, [r7, #32]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031fe:	623b      	str	r3, [r7, #32]
      break;
 8003200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003202:	6a3b      	ldr	r3, [r7, #32]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3728      	adds	r7, #40	; 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	bc90      	pop	{r4, r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	08006768 	.word	0x08006768
 8003214:	08006778 	.word	0x08006778
 8003218:	40021000 	.word	0x40021000
 800321c:	007a1200 	.word	0x007a1200
 8003220:	003d0900 	.word	0x003d0900

08003224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b02      	ldr	r3, [pc, #8]	; (8003234 <HAL_RCC_GetHCLKFreq+0x10>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	20000004 	.word	0x20000004

08003238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800323c:	f7ff fff2 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003240:	4601      	mov	r1, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4a03      	ldr	r2, [pc, #12]	; (800325c <HAL_RCC_GetPCLK1Freq+0x24>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	0800678c 	.word	0x0800678c

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003264:	f7ff ffde 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003268:	4601      	mov	r1, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	0adb      	lsrs	r3, r3, #11
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4a03      	ldr	r2, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	0800678c 	.word	0x0800678c

08003288 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d104      	bne.n	80032a2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003298:	f000 f828 	bl	80032ec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_NMI_IRQHandler+0x24>)
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	701a      	strb	r2, [r3, #0]
  }
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	4002100a 	.word	0x4002100a

080032b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <RCC_Delay+0x34>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <RCC_Delay+0x38>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0a5b      	lsrs	r3, r3, #9
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032cc:	bf00      	nop
  }
  while (Delay --);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1e5a      	subs	r2, r3, #1
 80032d2:	60fa      	str	r2, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f9      	bne.n	80032cc <RCC_Delay+0x1c>
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000004 	.word	0x20000004
 80032e8:	10624dd3 	.word	0x10624dd3

080032ec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e041      	b.n	800338e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fb2e 	bl	8001980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 fd4c 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d001      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e03a      	b.n	8003426 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_TIM_Base_Start_IT+0x98>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_TIM_Base_Start_IT+0x58>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d009      	beq.n	80033f0 <HAL_TIM_Base_Start_IT+0x58>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <HAL_TIM_Base_Start_IT+0x9c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_TIM_Base_Start_IT+0x58>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a13      	ldr	r2, [pc, #76]	; (8003438 <HAL_TIM_Base_Start_IT+0xa0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d111      	bne.n	8003414 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d010      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003412:	e007      	b.n	8003424 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800

0800343c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e041      	b.n	80034d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f839 	bl	80034da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f000 fcaa 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_TIM_PWM_Start+0x24>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e022      	b.n	8003556 <HAL_TIM_PWM_Start+0x6a>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d109      	bne.n	800352a <HAL_TIM_PWM_Start+0x3e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	e015      	b.n	8003556 <HAL_TIM_PWM_Start+0x6a>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d109      	bne.n	8003544 <HAL_TIM_PWM_Start+0x58>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e008      	b.n	8003556 <HAL_TIM_PWM_Start+0x6a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e05e      	b.n	800361c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start+0x82>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	e013      	b.n	8003596 <HAL_TIM_PWM_Start+0xaa>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d104      	bne.n	800357e <HAL_TIM_PWM_Start+0x92>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800357c:	e00b      	b.n	8003596 <HAL_TIM_PWM_Start+0xaa>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d104      	bne.n	800358e <HAL_TIM_PWM_Start+0xa2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800358c:	e003      	b.n	8003596 <HAL_TIM_PWM_Start+0xaa>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2201      	movs	r2, #1
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fe98 	bl	80042d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_TIM_PWM_Start+0x138>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d107      	bne.n	80035be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <HAL_TIM_PWM_Start+0x138>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_TIM_PWM_Start+0xfa>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d009      	beq.n	80035e6 <HAL_TIM_PWM_Start+0xfa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a14      	ldr	r2, [pc, #80]	; (8003628 <HAL_TIM_PWM_Start+0x13c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_TIM_PWM_Start+0xfa>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a12      	ldr	r2, [pc, #72]	; (800362c <HAL_TIM_PWM_Start+0x140>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d111      	bne.n	800360a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b06      	cmp	r3, #6
 80035f6:	d010      	beq.n	800361a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003608:	e007      	b.n	800361a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800

08003630 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e093      	b.n	800376c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7fe f9c9 	bl	80019f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003674:	f023 0307 	bic.w	r3, r3, #7
 8003678:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f000 fba5 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	4313      	orrs	r3, r2
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036d0:	f023 030c 	bic.w	r3, r3, #12
 80036d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	4313      	orrs	r3, r2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	011a      	lsls	r2, r3, #4
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	031b      	lsls	r3, r3, #12
 8003700:	4313      	orrs	r3, r2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800370e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	4313      	orrs	r3, r2
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003784:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800378c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003794:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800379c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d110      	bne.n	80037c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d102      	bne.n	80037b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d001      	beq.n	80037b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e068      	b.n	8003886 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c4:	e031      	b.n	800382a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d110      	bne.n	80037ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037cc:	7bbb      	ldrb	r3, [r7, #14]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d102      	bne.n	80037d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037d2:	7b3b      	ldrb	r3, [r7, #12]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d001      	beq.n	80037dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e054      	b.n	8003886 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ec:	e01d      	b.n	800382a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d108      	bne.n	8003806 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037fa:	7b7b      	ldrb	r3, [r7, #13]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d102      	bne.n	8003806 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003800:	7b3b      	ldrb	r3, [r7, #12]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e03d      	b.n	8003886 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_TIM_Encoder_Start+0xc2>
 8003830:	2b04      	cmp	r3, #4
 8003832:	d008      	beq.n	8003846 <HAL_TIM_Encoder_Start+0xd2>
 8003834:	e00f      	b.n	8003856 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fd48 	bl	80042d4 <TIM_CCxChannelCmd>
      break;
 8003844:	e016      	b.n	8003874 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2201      	movs	r2, #1
 800384c:	2104      	movs	r1, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fd40 	bl	80042d4 <TIM_CCxChannelCmd>
      break;
 8003854:	e00e      	b.n	8003874 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2201      	movs	r2, #1
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fd38 	bl	80042d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	2104      	movs	r1, #4
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fd31 	bl	80042d4 <TIM_CCxChannelCmd>
      break;
 8003872:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d122      	bne.n	80038ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d11b      	bne.n	80038ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f06f 0202 	mvn.w	r2, #2
 80038ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa63 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 80038d6:	e005      	b.n	80038e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fa56 	bl	8003d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa65 	bl	8003dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d122      	bne.n	800393e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d11b      	bne.n	800393e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f06f 0204 	mvn.w	r2, #4
 800390e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa39 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 800392a:	e005      	b.n	8003938 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fa2c 	bl	8003d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fa3b 	bl	8003dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d122      	bne.n	8003992 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b08      	cmp	r3, #8
 8003958:	d11b      	bne.n	8003992 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0208 	mvn.w	r2, #8
 8003962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2204      	movs	r2, #4
 8003968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fa0f 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 800397e:	e005      	b.n	800398c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fa02 	bl	8003d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fa11 	bl	8003dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b10      	cmp	r3, #16
 800399e:	d122      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d11b      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f06f 0210 	mvn.w	r2, #16
 80039b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2208      	movs	r2, #8
 80039bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f9e5 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 80039d2:	e005      	b.n	80039e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f9d8 	bl	8003d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9e7 	bl	8003dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10e      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f06f 0201 	mvn.w	r2, #1
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fd fcdb 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b80      	cmp	r3, #128	; 0x80
 8003a1e:	d10e      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b80      	cmp	r3, #128	; 0x80
 8003a2c:	d107      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fd27 	bl	800448c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d10e      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f9ab 	bl	8003dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d10e      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d107      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0220 	mvn.w	r2, #32
 8003a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fcf2 	bl	800447a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0ac      	b.n	8003c14 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	f200 809f 	bhi.w	8003c08 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003c09 	.word	0x08003c09
 8003ad8:	08003c09 	.word	0x08003c09
 8003adc:	08003c09 	.word	0x08003c09
 8003ae0:	08003b45 	.word	0x08003b45
 8003ae4:	08003c09 	.word	0x08003c09
 8003ae8:	08003c09 	.word	0x08003c09
 8003aec:	08003c09 	.word	0x08003c09
 8003af0:	08003b87 	.word	0x08003b87
 8003af4:	08003c09 	.word	0x08003c09
 8003af8:	08003c09 	.word	0x08003c09
 8003afc:	08003c09 	.word	0x08003c09
 8003b00:	08003bc7 	.word	0x08003bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f9c4 	bl	8003e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0208 	orr.w	r2, r2, #8
 8003b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6999      	ldr	r1, [r3, #24]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	619a      	str	r2, [r3, #24]
      break;
 8003b42:	e062      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fa0a 	bl	8003f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]
      break;
 8003b84:	e041      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fa53 	bl	8004038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0208 	orr.w	r2, r2, #8
 8003ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0204 	bic.w	r2, r2, #4
 8003bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69d9      	ldr	r1, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	61da      	str	r2, [r3, #28]
      break;
 8003bc4:	e021      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fa9d 	bl	800410c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	61da      	str	r2, [r3, #28]
      break;
 8003c06:	e000      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003c08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIM_ConfigClockSource+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e0a6      	b.n	8003d82 <HAL_TIM_ConfigClockSource+0x166>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d067      	beq.n	8003d3c <HAL_TIM_ConfigClockSource+0x120>
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d80b      	bhi.n	8003c88 <HAL_TIM_ConfigClockSource+0x6c>
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d073      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0x140>
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d802      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x62>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d06f      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c7c:	e078      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d06c      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0x140>
 8003c82:	2b30      	cmp	r3, #48	; 0x30
 8003c84:	d06a      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c86:	e073      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c88:	2b70      	cmp	r3, #112	; 0x70
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_TIM_ConfigClockSource+0x8c>
 8003c8c:	2b70      	cmp	r3, #112	; 0x70
 8003c8e:	d804      	bhi.n	8003c9a <HAL_TIM_ConfigClockSource+0x7e>
 8003c90:	2b50      	cmp	r3, #80	; 0x50
 8003c92:	d033      	beq.n	8003cfc <HAL_TIM_ConfigClockSource+0xe0>
 8003c94:	2b60      	cmp	r3, #96	; 0x60
 8003c96:	d041      	beq.n	8003d1c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c98:	e06a      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	d066      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x152>
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d017      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003ca6:	e063      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f000 faed 	bl	8004296 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	609a      	str	r2, [r3, #8]
      break;
 8003cd4:	e04c      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6899      	ldr	r1, [r3, #8]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f000 fad6 	bl	8004296 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf8:	609a      	str	r2, [r3, #8]
      break;
 8003cfa:	e039      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	f000 fa4d 	bl	80041a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2150      	movs	r1, #80	; 0x50
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 faa4 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003d1a:	e029      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f000 fa6b 	bl	8004204 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2160      	movs	r1, #96	; 0x60
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fa94 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003d3a:	e019      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f000 fa2d 	bl	80041a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2140      	movs	r1, #64	; 0x40
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fa84 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003d5a:	e009      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f000 fa7b 	bl	8004262 <TIM_ITRx_SetConfig>
        break;
 8003d6c:	e000      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr

08003dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
	...

08003dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a29      	ldr	r2, [pc, #164]	; (8003e8c <TIM_Base_SetConfig+0xb8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <TIM_Base_SetConfig+0x30>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d007      	beq.n	8003e04 <TIM_Base_SetConfig+0x30>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a26      	ldr	r2, [pc, #152]	; (8003e90 <TIM_Base_SetConfig+0xbc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_Base_SetConfig+0x30>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a25      	ldr	r2, [pc, #148]	; (8003e94 <TIM_Base_SetConfig+0xc0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d108      	bne.n	8003e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <TIM_Base_SetConfig+0xb8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <TIM_Base_SetConfig+0x62>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d007      	beq.n	8003e36 <TIM_Base_SetConfig+0x62>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <TIM_Base_SetConfig+0xbc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_Base_SetConfig+0x62>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <TIM_Base_SetConfig+0xc0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d108      	bne.n	8003e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <TIM_Base_SetConfig+0xb8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d103      	bne.n	8003e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	615a      	str	r2, [r3, #20]
}
 8003e82:	bf00      	nop
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800

08003e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 0302 	bic.w	r3, r3, #2
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <TIM_OC1_SetConfig+0xc8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d10c      	bne.n	8003f0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0308 	bic.w	r3, r3, #8
 8003efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <TIM_OC1_SetConfig+0xc8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d111      	bne.n	8003f3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40012c00 	.word	0x40012c00

08003f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f023 0210 	bic.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f023 0320 	bic.w	r3, r3, #32
 8003fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <TIM_OC2_SetConfig+0xd0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10d      	bne.n	8003fe0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a14      	ldr	r2, [pc, #80]	; (8004034 <TIM_OC2_SetConfig+0xd0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d113      	bne.n	8004010 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00

08004038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <TIM_OC3_SetConfig+0xd0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10d      	bne.n	80040b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800409c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a14      	ldr	r2, [pc, #80]	; (8004108 <TIM_OC3_SetConfig+0xd0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d113      	bne.n	80040e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	621a      	str	r2, [r3, #32]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00

0800410c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	031b      	lsls	r3, r3, #12
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a0f      	ldr	r2, [pc, #60]	; (80041a4 <TIM_OC4_SetConfig+0x98>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d109      	bne.n	8004180 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	019b      	lsls	r3, r3, #6
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00

080041a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0201 	bic.w	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f023 030a 	bic.w	r3, r3, #10
 80041e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f023 0210 	bic.w	r2, r3, #16
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800422e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	031b      	lsls	r3, r3, #12
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004240:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004262:	b480      	push	{r7}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	f043 0307 	orr.w	r3, r3, #7
 8004284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004296:	b480      	push	{r7}
 8004298:	b087      	sub	sp, #28
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	021a      	lsls	r2, r3, #8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4313      	orrs	r3, r2
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	609a      	str	r2, [r3, #8]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2201      	movs	r2, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1a      	ldr	r2, [r3, #32]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	401a      	ands	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004330:	2302      	movs	r3, #2
 8004332:	e046      	b.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a16      	ldr	r2, [pc, #88]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d009      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10c      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800

080043d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e03d      	b.n	8004470 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e03f      	b.n	8004530 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fd fb61 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2224      	movs	r2, #36	; 0x24
 80044ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fce2 	bl	8004eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004506:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004516:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b20      	cmp	r3, #32
 8004556:	d17c      	bne.n	8004652 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_UART_Transmit+0x2c>
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e075      	b.n	8004654 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_UART_Transmit+0x3e>
 8004572:	2302      	movs	r3, #2
 8004574:	e06e      	b.n	8004654 <HAL_UART_Transmit+0x11c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2221      	movs	r2, #33	; 0x21
 8004588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800458c:	f7fd fd84 	bl	8002098 <HAL_GetTick>
 8004590:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	88fa      	ldrh	r2, [r7, #6]
 800459c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d108      	bne.n	80045ba <HAL_UART_Transmit+0x82>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e003      	b.n	80045c2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80045ca:	e02a      	b.n	8004622 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2200      	movs	r2, #0
 80045d4:	2180      	movs	r1, #128	; 0x80
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 faf1 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e036      	b.n	8004654 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045fa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	3302      	adds	r3, #2
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e007      	b.n	8004614 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3301      	adds	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1cf      	bne.n	80045cc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	2140      	movs	r1, #64	; 0x40
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fac1 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e006      	b.n	8004654 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b20      	cmp	r3, #32
 800467a:	f040 8089 	bne.w	8004790 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_UART_Receive+0x2e>
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e081      	b.n	8004792 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_UART_Receive+0x40>
 8004698:	2302      	movs	r3, #2
 800469a:	e07a      	b.n	8004792 <HAL_UART_Receive+0x136>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2222      	movs	r2, #34	; 0x22
 80046ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046b2:	f7fd fcf1 	bl	8002098 <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	88fa      	ldrh	r2, [r7, #6]
 80046c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046cc:	d108      	bne.n	80046e0 <HAL_UART_Receive+0x84>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d104      	bne.n	80046e0 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e003      	b.n	80046e8 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046f0:	e043      	b.n	800477a <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2120      	movs	r1, #32
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fa5e 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e042      	b.n	8004792 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10c      	bne.n	800472c <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471e:	b29a      	uxth	r2, r3
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	3302      	adds	r3, #2
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e01f      	b.n	800476c <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004734:	d007      	beq.n	8004746 <HAL_UART_Receive+0xea>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <HAL_UART_Receive+0xf8>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e008      	b.n	8004766 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004760:	b2da      	uxtb	r2, r3
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3301      	adds	r3, #1
 800476a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1b6      	bne.n	80046f2 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d153      	bne.n	800485e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_UART_Transmit_DMA+0x26>
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e04c      	b.n	8004860 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_UART_Transmit_DMA+0x38>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e045      	b.n	8004860 <HAL_UART_Transmit_DMA+0xc4>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2221      	movs	r2, #33	; 0x21
 80047f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <HAL_UART_Transmit_DMA+0xcc>)
 8004802:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	4a18      	ldr	r2, [pc, #96]	; (800486c <HAL_UART_Transmit_DMA+0xd0>)
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	4a17      	ldr	r2, [pc, #92]	; (8004870 <HAL_UART_Transmit_DMA+0xd4>)
 8004812:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	2200      	movs	r2, #0
 800481a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800481c:	f107 0308 	add.w	r3, r7, #8
 8004820:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3304      	adds	r3, #4
 8004830:	461a      	mov	r2, r3
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	f7fd fda2 	bl	800237c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004840:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004858:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	08004abd 	.word	0x08004abd
 800486c:	08004b0f 	.word	0x08004b0f
 8004870:	08004b2b 	.word	0x08004b2b

08004874 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10d      	bne.n	80048c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_UART_IRQHandler+0x52>
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa74 	bl	8004dac <UART_Receive_IT>
      return;
 80048c4:	e0d1      	b.n	8004a6a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80b0 	beq.w	8004a2e <HAL_UART_IRQHandler+0x1ba>
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <HAL_UART_IRQHandler+0x70>
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80a5 	beq.w	8004a2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_UART_IRQHandler+0x90>
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_UART_IRQHandler+0xb0>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	f043 0202 	orr.w	r2, r3, #2
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_UART_IRQHandler+0xd0>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	f043 0204 	orr.w	r2, r3, #4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00f      	beq.n	800496e <HAL_UART_IRQHandler+0xfa>
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <HAL_UART_IRQHandler+0xee>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	f043 0208 	orr.w	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d078      	beq.n	8004a68 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <HAL_UART_IRQHandler+0x11c>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa0e 	bl	8004dac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf14      	ite	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	2300      	moveq	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <HAL_UART_IRQHandler+0x144>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d031      	beq.n	8004a1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f95f 	bl	8004c7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d023      	beq.n	8004a14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	4a21      	ldr	r2, [pc, #132]	; (8004a70 <HAL_UART_IRQHandler+0x1fc>)
 80049ea:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fd fd23 	bl	800243c <HAL_DMA_Abort_IT>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d016      	beq.n	8004a2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a06:	4610      	mov	r0, r2
 8004a08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0a:	e00e      	b.n	8004a2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f84c 	bl	8004aaa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a12:	e00a      	b.n	8004a2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f848 	bl	8004aaa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1a:	e006      	b.n	8004a2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f844 	bl	8004aaa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a28:	e01e      	b.n	8004a68 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2a:	bf00      	nop
    return;
 8004a2c:	e01c      	b.n	8004a68 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1d6>
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f94b 	bl	8004cde <UART_Transmit_IT>
    return;
 8004a48:	e00f      	b.n	8004a6a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1f6>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f98c 	bl	8004d7c <UART_EndTransmit_IT>
    return;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004a68:	bf00      	nop
  }
}
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	08004cb7 	.word	0x08004cb7

08004a74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d113      	bne.n	8004b00 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aec:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004afe:	e002      	b.n	8004b06 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff ffb7 	bl	8004a74 <HAL_UART_TxCpltCallback>
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff ffb2 	bl	8004a86 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b21      	cmp	r3, #33	; 0x21
 8004b5c:	d108      	bne.n	8004b70 <UART_DMAError+0x46>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004b6a:	68b8      	ldr	r0, [r7, #8]
 8004b6c:	f000 f871 	bl	8004c52 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf14      	ite	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	2300      	moveq	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b22      	cmp	r3, #34	; 0x22
 8004b90:	d108      	bne.n	8004ba4 <UART_DMAError+0x7a>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b9e:	68b8      	ldr	r0, [r7, #8]
 8004ba0:	f000 f86c 	bl	8004c7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	f043 0210 	orr.w	r2, r3, #16
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bb0:	68b8      	ldr	r0, [r7, #8]
 8004bb2:	f7ff ff7a 	bl	8004aaa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	e02c      	b.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d028      	beq.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0x30>
 8004bde:	f7fd fa5b 	bl	8002098 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d21d      	bcs.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bfc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e00f      	b.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d0c3      	beq.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c68:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr

08004c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff feea 	bl	8004aaa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b21      	cmp	r3, #33	; 0x21
 8004cf0:	d13e      	bne.n	8004d70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfa:	d114      	bne.n	8004d26 <UART_Transmit_IT+0x48>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d110      	bne.n	8004d26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	621a      	str	r2, [r3, #32]
 8004d24:	e008      	b.n	8004d38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	1c59      	adds	r1, r3, #1
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6211      	str	r1, [r2, #32]
 8004d30:	781a      	ldrb	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4619      	mov	r1, r3
 8004d46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10f      	bne.n	8004d6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e000      	b.n	8004d72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
  }
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fe69 	bl	8004a74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b22      	cmp	r3, #34	; 0x22
 8004dbe:	d170      	bne.n	8004ea2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc8:	d117      	bne.n	8004dfa <UART_Receive_IT+0x4e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d113      	bne.n	8004dfa <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28
 8004df8:	e026      	b.n	8004e48 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0c:	d007      	beq.n	8004e1e <UART_Receive_IT+0x72>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <UART_Receive_IT+0x80>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	e008      	b.n	8004e3e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	4619      	mov	r1, r3
 8004e56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d120      	bne.n	8004e9e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0220 	bic.w	r2, r2, #32
 8004e6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fdff 	bl	8004a98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e002      	b.n	8004ea4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ee6:	f023 030c 	bic.w	r3, r3, #12
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <UART_SetConfig+0x114>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d103      	bne.n	8004f1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7fe f9a4 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	e002      	b.n	8004f22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f1c:	f7fe f98c 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8004f20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009a      	lsls	r2, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	4a22      	ldr	r2, [pc, #136]	; (8004fc4 <UART_SetConfig+0x118>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	0119      	lsls	r1, r3, #4
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009a      	lsls	r2, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f58:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <UART_SetConfig+0x118>)
 8004f5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	2064      	movs	r0, #100	; 0x64
 8004f62:	fb00 f303 	mul.w	r3, r0, r3
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	3332      	adds	r3, #50	; 0x32
 8004f6c:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <UART_SetConfig+0x118>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f78:	4419      	add	r1, r3
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009a      	lsls	r2, r3, #2
 8004f84:	441a      	add	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <UART_SetConfig+0x118>)
 8004f92:	fba3 0302 	umull	r0, r3, r3, r2
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2064      	movs	r0, #100	; 0x64
 8004f9a:	fb00 f303 	mul.w	r3, r0, r3
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	3332      	adds	r3, #50	; 0x32
 8004fa4:	4a07      	ldr	r2, [pc, #28]	; (8004fc4 <UART_SetConfig+0x118>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	f003 020f 	and.w	r2, r3, #15
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40013800 	.word	0x40013800
 8004fc4:	51eb851f 	.word	0x51eb851f

08004fc8 <__errno>:
 8004fc8:	4b01      	ldr	r3, [pc, #4]	; (8004fd0 <__errno+0x8>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20000010 	.word	0x20000010

08004fd4 <__libc_init_array>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	2500      	movs	r5, #0
 8004fd8:	4e0c      	ldr	r6, [pc, #48]	; (800500c <__libc_init_array+0x38>)
 8004fda:	4c0d      	ldr	r4, [pc, #52]	; (8005010 <__libc_init_array+0x3c>)
 8004fdc:	1ba4      	subs	r4, r4, r6
 8004fde:	10a4      	asrs	r4, r4, #2
 8004fe0:	42a5      	cmp	r5, r4
 8004fe2:	d109      	bne.n	8004ff8 <__libc_init_array+0x24>
 8004fe4:	f001 fbb4 	bl	8006750 <_init>
 8004fe8:	2500      	movs	r5, #0
 8004fea:	4e0a      	ldr	r6, [pc, #40]	; (8005014 <__libc_init_array+0x40>)
 8004fec:	4c0a      	ldr	r4, [pc, #40]	; (8005018 <__libc_init_array+0x44>)
 8004fee:	1ba4      	subs	r4, r4, r6
 8004ff0:	10a4      	asrs	r4, r4, #2
 8004ff2:	42a5      	cmp	r5, r4
 8004ff4:	d105      	bne.n	8005002 <__libc_init_array+0x2e>
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ffc:	4798      	blx	r3
 8004ffe:	3501      	adds	r5, #1
 8005000:	e7ee      	b.n	8004fe0 <__libc_init_array+0xc>
 8005002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005006:	4798      	blx	r3
 8005008:	3501      	adds	r5, #1
 800500a:	e7f2      	b.n	8004ff2 <__libc_init_array+0x1e>
 800500c:	080069d0 	.word	0x080069d0
 8005010:	080069d0 	.word	0x080069d0
 8005014:	080069d0 	.word	0x080069d0
 8005018:	080069d4 	.word	0x080069d4

0800501c <memset>:
 800501c:	4603      	mov	r3, r0
 800501e:	4402      	add	r2, r0
 8005020:	4293      	cmp	r3, r2
 8005022:	d100      	bne.n	8005026 <memset+0xa>
 8005024:	4770      	bx	lr
 8005026:	f803 1b01 	strb.w	r1, [r3], #1
 800502a:	e7f9      	b.n	8005020 <memset+0x4>

0800502c <setvbuf>:
 800502c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005030:	461d      	mov	r5, r3
 8005032:	4b51      	ldr	r3, [pc, #324]	; (8005178 <setvbuf+0x14c>)
 8005034:	4604      	mov	r4, r0
 8005036:	681e      	ldr	r6, [r3, #0]
 8005038:	460f      	mov	r7, r1
 800503a:	4690      	mov	r8, r2
 800503c:	b126      	cbz	r6, 8005048 <setvbuf+0x1c>
 800503e:	69b3      	ldr	r3, [r6, #24]
 8005040:	b913      	cbnz	r3, 8005048 <setvbuf+0x1c>
 8005042:	4630      	mov	r0, r6
 8005044:	f000 f990 	bl	8005368 <__sinit>
 8005048:	4b4c      	ldr	r3, [pc, #304]	; (800517c <setvbuf+0x150>)
 800504a:	429c      	cmp	r4, r3
 800504c:	d152      	bne.n	80050f4 <setvbuf+0xc8>
 800504e:	6874      	ldr	r4, [r6, #4]
 8005050:	f1b8 0f02 	cmp.w	r8, #2
 8005054:	d006      	beq.n	8005064 <setvbuf+0x38>
 8005056:	f1b8 0f01 	cmp.w	r8, #1
 800505a:	f200 8089 	bhi.w	8005170 <setvbuf+0x144>
 800505e:	2d00      	cmp	r5, #0
 8005060:	f2c0 8086 	blt.w	8005170 <setvbuf+0x144>
 8005064:	4621      	mov	r1, r4
 8005066:	4630      	mov	r0, r6
 8005068:	f000 f914 	bl	8005294 <_fflush_r>
 800506c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800506e:	b141      	cbz	r1, 8005082 <setvbuf+0x56>
 8005070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005074:	4299      	cmp	r1, r3
 8005076:	d002      	beq.n	800507e <setvbuf+0x52>
 8005078:	4630      	mov	r0, r6
 800507a:	f000 fa2b 	bl	80054d4 <_free_r>
 800507e:	2300      	movs	r3, #0
 8005080:	6363      	str	r3, [r4, #52]	; 0x34
 8005082:	2300      	movs	r3, #0
 8005084:	61a3      	str	r3, [r4, #24]
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	061b      	lsls	r3, r3, #24
 800508c:	d503      	bpl.n	8005096 <setvbuf+0x6a>
 800508e:	6921      	ldr	r1, [r4, #16]
 8005090:	4630      	mov	r0, r6
 8005092:	f000 fa1f 	bl	80054d4 <_free_r>
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	f1b8 0f02 	cmp.w	r8, #2
 800509c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80050a0:	f023 0303 	bic.w	r3, r3, #3
 80050a4:	81a3      	strh	r3, [r4, #12]
 80050a6:	d05d      	beq.n	8005164 <setvbuf+0x138>
 80050a8:	ab01      	add	r3, sp, #4
 80050aa:	466a      	mov	r2, sp
 80050ac:	4621      	mov	r1, r4
 80050ae:	4630      	mov	r0, r6
 80050b0:	f000 f9e4 	bl	800547c <__swhatbuf_r>
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	4318      	orrs	r0, r3
 80050b8:	81a0      	strh	r0, [r4, #12]
 80050ba:	bb2d      	cbnz	r5, 8005108 <setvbuf+0xdc>
 80050bc:	9d00      	ldr	r5, [sp, #0]
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 fa00 	bl	80054c4 <malloc>
 80050c4:	4607      	mov	r7, r0
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d14e      	bne.n	8005168 <setvbuf+0x13c>
 80050ca:	f8dd 9000 	ldr.w	r9, [sp]
 80050ce:	45a9      	cmp	r9, r5
 80050d0:	d13c      	bne.n	800514c <setvbuf+0x120>
 80050d2:	f04f 30ff 	mov.w	r0, #4294967295
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	2300      	movs	r3, #0
 80050e0:	60a3      	str	r3, [r4, #8]
 80050e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050e6:	6023      	str	r3, [r4, #0]
 80050e8:	6123      	str	r3, [r4, #16]
 80050ea:	2301      	movs	r3, #1
 80050ec:	6163      	str	r3, [r4, #20]
 80050ee:	b003      	add	sp, #12
 80050f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050f4:	4b22      	ldr	r3, [pc, #136]	; (8005180 <setvbuf+0x154>)
 80050f6:	429c      	cmp	r4, r3
 80050f8:	d101      	bne.n	80050fe <setvbuf+0xd2>
 80050fa:	68b4      	ldr	r4, [r6, #8]
 80050fc:	e7a8      	b.n	8005050 <setvbuf+0x24>
 80050fe:	4b21      	ldr	r3, [pc, #132]	; (8005184 <setvbuf+0x158>)
 8005100:	429c      	cmp	r4, r3
 8005102:	bf08      	it	eq
 8005104:	68f4      	ldreq	r4, [r6, #12]
 8005106:	e7a3      	b.n	8005050 <setvbuf+0x24>
 8005108:	2f00      	cmp	r7, #0
 800510a:	d0d8      	beq.n	80050be <setvbuf+0x92>
 800510c:	69b3      	ldr	r3, [r6, #24]
 800510e:	b913      	cbnz	r3, 8005116 <setvbuf+0xea>
 8005110:	4630      	mov	r0, r6
 8005112:	f000 f929 	bl	8005368 <__sinit>
 8005116:	f1b8 0f01 	cmp.w	r8, #1
 800511a:	bf08      	it	eq
 800511c:	89a3      	ldrheq	r3, [r4, #12]
 800511e:	6027      	str	r7, [r4, #0]
 8005120:	bf04      	itt	eq
 8005122:	f043 0301 	orreq.w	r3, r3, #1
 8005126:	81a3      	strheq	r3, [r4, #12]
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800512e:	f013 0008 	ands.w	r0, r3, #8
 8005132:	d01b      	beq.n	800516c <setvbuf+0x140>
 8005134:	f013 0001 	ands.w	r0, r3, #1
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	bf1f      	itttt	ne
 800513e:	426d      	negne	r5, r5
 8005140:	60a3      	strne	r3, [r4, #8]
 8005142:	61a5      	strne	r5, [r4, #24]
 8005144:	4618      	movne	r0, r3
 8005146:	bf08      	it	eq
 8005148:	60a5      	streq	r5, [r4, #8]
 800514a:	e7d0      	b.n	80050ee <setvbuf+0xc2>
 800514c:	4648      	mov	r0, r9
 800514e:	f000 f9b9 	bl	80054c4 <malloc>
 8005152:	4607      	mov	r7, r0
 8005154:	2800      	cmp	r0, #0
 8005156:	d0bc      	beq.n	80050d2 <setvbuf+0xa6>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	464d      	mov	r5, r9
 800515c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005160:	81a3      	strh	r3, [r4, #12]
 8005162:	e7d3      	b.n	800510c <setvbuf+0xe0>
 8005164:	2000      	movs	r0, #0
 8005166:	e7b6      	b.n	80050d6 <setvbuf+0xaa>
 8005168:	46a9      	mov	r9, r5
 800516a:	e7f5      	b.n	8005158 <setvbuf+0x12c>
 800516c:	60a0      	str	r0, [r4, #8]
 800516e:	e7be      	b.n	80050ee <setvbuf+0xc2>
 8005170:	f04f 30ff 	mov.w	r0, #4294967295
 8005174:	e7bb      	b.n	80050ee <setvbuf+0xc2>
 8005176:	bf00      	nop
 8005178:	20000010 	.word	0x20000010
 800517c:	080067b8 	.word	0x080067b8
 8005180:	080067d8 	.word	0x080067d8
 8005184:	08006798 	.word	0x08006798

08005188 <__sflush_r>:
 8005188:	898a      	ldrh	r2, [r1, #12]
 800518a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518e:	4605      	mov	r5, r0
 8005190:	0710      	lsls	r0, r2, #28
 8005192:	460c      	mov	r4, r1
 8005194:	d458      	bmi.n	8005248 <__sflush_r+0xc0>
 8005196:	684b      	ldr	r3, [r1, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dc05      	bgt.n	80051a8 <__sflush_r+0x20>
 800519c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	dc02      	bgt.n	80051a8 <__sflush_r+0x20>
 80051a2:	2000      	movs	r0, #0
 80051a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d0f9      	beq.n	80051a2 <__sflush_r+0x1a>
 80051ae:	2300      	movs	r3, #0
 80051b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051b4:	682f      	ldr	r7, [r5, #0]
 80051b6:	6a21      	ldr	r1, [r4, #32]
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	d032      	beq.n	8005222 <__sflush_r+0x9a>
 80051bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	075a      	lsls	r2, r3, #29
 80051c2:	d505      	bpl.n	80051d0 <__sflush_r+0x48>
 80051c4:	6863      	ldr	r3, [r4, #4]
 80051c6:	1ac0      	subs	r0, r0, r3
 80051c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051ca:	b10b      	cbz	r3, 80051d0 <__sflush_r+0x48>
 80051cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051ce:	1ac0      	subs	r0, r0, r3
 80051d0:	2300      	movs	r3, #0
 80051d2:	4602      	mov	r2, r0
 80051d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051d6:	6a21      	ldr	r1, [r4, #32]
 80051d8:	4628      	mov	r0, r5
 80051da:	47b0      	blx	r6
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	d106      	bne.n	80051f0 <__sflush_r+0x68>
 80051e2:	6829      	ldr	r1, [r5, #0]
 80051e4:	291d      	cmp	r1, #29
 80051e6:	d848      	bhi.n	800527a <__sflush_r+0xf2>
 80051e8:	4a29      	ldr	r2, [pc, #164]	; (8005290 <__sflush_r+0x108>)
 80051ea:	40ca      	lsrs	r2, r1
 80051ec:	07d6      	lsls	r6, r2, #31
 80051ee:	d544      	bpl.n	800527a <__sflush_r+0xf2>
 80051f0:	2200      	movs	r2, #0
 80051f2:	6062      	str	r2, [r4, #4]
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	04d9      	lsls	r1, r3, #19
 80051f8:	6022      	str	r2, [r4, #0]
 80051fa:	d504      	bpl.n	8005206 <__sflush_r+0x7e>
 80051fc:	1c42      	adds	r2, r0, #1
 80051fe:	d101      	bne.n	8005204 <__sflush_r+0x7c>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b903      	cbnz	r3, 8005206 <__sflush_r+0x7e>
 8005204:	6560      	str	r0, [r4, #84]	; 0x54
 8005206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005208:	602f      	str	r7, [r5, #0]
 800520a:	2900      	cmp	r1, #0
 800520c:	d0c9      	beq.n	80051a2 <__sflush_r+0x1a>
 800520e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005212:	4299      	cmp	r1, r3
 8005214:	d002      	beq.n	800521c <__sflush_r+0x94>
 8005216:	4628      	mov	r0, r5
 8005218:	f000 f95c 	bl	80054d4 <_free_r>
 800521c:	2000      	movs	r0, #0
 800521e:	6360      	str	r0, [r4, #52]	; 0x34
 8005220:	e7c0      	b.n	80051a4 <__sflush_r+0x1c>
 8005222:	2301      	movs	r3, #1
 8005224:	4628      	mov	r0, r5
 8005226:	47b0      	blx	r6
 8005228:	1c41      	adds	r1, r0, #1
 800522a:	d1c8      	bne.n	80051be <__sflush_r+0x36>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0c5      	beq.n	80051be <__sflush_r+0x36>
 8005232:	2b1d      	cmp	r3, #29
 8005234:	d001      	beq.n	800523a <__sflush_r+0xb2>
 8005236:	2b16      	cmp	r3, #22
 8005238:	d101      	bne.n	800523e <__sflush_r+0xb6>
 800523a:	602f      	str	r7, [r5, #0]
 800523c:	e7b1      	b.n	80051a2 <__sflush_r+0x1a>
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	e7ad      	b.n	80051a4 <__sflush_r+0x1c>
 8005248:	690f      	ldr	r7, [r1, #16]
 800524a:	2f00      	cmp	r7, #0
 800524c:	d0a9      	beq.n	80051a2 <__sflush_r+0x1a>
 800524e:	0793      	lsls	r3, r2, #30
 8005250:	bf18      	it	ne
 8005252:	2300      	movne	r3, #0
 8005254:	680e      	ldr	r6, [r1, #0]
 8005256:	bf08      	it	eq
 8005258:	694b      	ldreq	r3, [r1, #20]
 800525a:	eba6 0807 	sub.w	r8, r6, r7
 800525e:	600f      	str	r7, [r1, #0]
 8005260:	608b      	str	r3, [r1, #8]
 8005262:	f1b8 0f00 	cmp.w	r8, #0
 8005266:	dd9c      	ble.n	80051a2 <__sflush_r+0x1a>
 8005268:	4643      	mov	r3, r8
 800526a:	463a      	mov	r2, r7
 800526c:	6a21      	ldr	r1, [r4, #32]
 800526e:	4628      	mov	r0, r5
 8005270:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005272:	47b0      	blx	r6
 8005274:	2800      	cmp	r0, #0
 8005276:	dc06      	bgt.n	8005286 <__sflush_r+0xfe>
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	e78e      	b.n	80051a4 <__sflush_r+0x1c>
 8005286:	4407      	add	r7, r0
 8005288:	eba8 0800 	sub.w	r8, r8, r0
 800528c:	e7e9      	b.n	8005262 <__sflush_r+0xda>
 800528e:	bf00      	nop
 8005290:	20400001 	.word	0x20400001

08005294 <_fflush_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	690b      	ldr	r3, [r1, #16]
 8005298:	4605      	mov	r5, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b1db      	cbz	r3, 80052d6 <_fflush_r+0x42>
 800529e:	b118      	cbz	r0, 80052a8 <_fflush_r+0x14>
 80052a0:	6983      	ldr	r3, [r0, #24]
 80052a2:	b90b      	cbnz	r3, 80052a8 <_fflush_r+0x14>
 80052a4:	f000 f860 	bl	8005368 <__sinit>
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <_fflush_r+0x48>)
 80052aa:	429c      	cmp	r4, r3
 80052ac:	d109      	bne.n	80052c2 <_fflush_r+0x2e>
 80052ae:	686c      	ldr	r4, [r5, #4]
 80052b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052b4:	b17b      	cbz	r3, 80052d6 <_fflush_r+0x42>
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052be:	f7ff bf63 	b.w	8005188 <__sflush_r>
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <_fflush_r+0x4c>)
 80052c4:	429c      	cmp	r4, r3
 80052c6:	d101      	bne.n	80052cc <_fflush_r+0x38>
 80052c8:	68ac      	ldr	r4, [r5, #8]
 80052ca:	e7f1      	b.n	80052b0 <_fflush_r+0x1c>
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <_fflush_r+0x50>)
 80052ce:	429c      	cmp	r4, r3
 80052d0:	bf08      	it	eq
 80052d2:	68ec      	ldreq	r4, [r5, #12]
 80052d4:	e7ec      	b.n	80052b0 <_fflush_r+0x1c>
 80052d6:	2000      	movs	r0, #0
 80052d8:	bd38      	pop	{r3, r4, r5, pc}
 80052da:	bf00      	nop
 80052dc:	080067b8 	.word	0x080067b8
 80052e0:	080067d8 	.word	0x080067d8
 80052e4:	08006798 	.word	0x08006798

080052e8 <std>:
 80052e8:	2300      	movs	r3, #0
 80052ea:	b510      	push	{r4, lr}
 80052ec:	4604      	mov	r4, r0
 80052ee:	e9c0 3300 	strd	r3, r3, [r0]
 80052f2:	6083      	str	r3, [r0, #8]
 80052f4:	8181      	strh	r1, [r0, #12]
 80052f6:	6643      	str	r3, [r0, #100]	; 0x64
 80052f8:	81c2      	strh	r2, [r0, #14]
 80052fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052fe:	6183      	str	r3, [r0, #24]
 8005300:	4619      	mov	r1, r3
 8005302:	2208      	movs	r2, #8
 8005304:	305c      	adds	r0, #92	; 0x5c
 8005306:	f7ff fe89 	bl	800501c <memset>
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <std+0x38>)
 800530c:	6224      	str	r4, [r4, #32]
 800530e:	6263      	str	r3, [r4, #36]	; 0x24
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <std+0x3c>)
 8005312:	62a3      	str	r3, [r4, #40]	; 0x28
 8005314:	4b04      	ldr	r3, [pc, #16]	; (8005328 <std+0x40>)
 8005316:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005318:	4b04      	ldr	r3, [pc, #16]	; (800532c <std+0x44>)
 800531a:	6323      	str	r3, [r4, #48]	; 0x30
 800531c:	bd10      	pop	{r4, pc}
 800531e:	bf00      	nop
 8005320:	08005641 	.word	0x08005641
 8005324:	08005663 	.word	0x08005663
 8005328:	0800569b 	.word	0x0800569b
 800532c:	080056bf 	.word	0x080056bf

08005330 <_cleanup_r>:
 8005330:	4901      	ldr	r1, [pc, #4]	; (8005338 <_cleanup_r+0x8>)
 8005332:	f000 b885 	b.w	8005440 <_fwalk_reent>
 8005336:	bf00      	nop
 8005338:	08005295 	.word	0x08005295

0800533c <__sfmoreglue>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	2568      	movs	r5, #104	; 0x68
 8005340:	1e4a      	subs	r2, r1, #1
 8005342:	4355      	muls	r5, r2
 8005344:	460e      	mov	r6, r1
 8005346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800534a:	f000 f90f 	bl	800556c <_malloc_r>
 800534e:	4604      	mov	r4, r0
 8005350:	b140      	cbz	r0, 8005364 <__sfmoreglue+0x28>
 8005352:	2100      	movs	r1, #0
 8005354:	e9c0 1600 	strd	r1, r6, [r0]
 8005358:	300c      	adds	r0, #12
 800535a:	60a0      	str	r0, [r4, #8]
 800535c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005360:	f7ff fe5c 	bl	800501c <memset>
 8005364:	4620      	mov	r0, r4
 8005366:	bd70      	pop	{r4, r5, r6, pc}

08005368 <__sinit>:
 8005368:	6983      	ldr	r3, [r0, #24]
 800536a:	b510      	push	{r4, lr}
 800536c:	4604      	mov	r4, r0
 800536e:	bb33      	cbnz	r3, 80053be <__sinit+0x56>
 8005370:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005374:	6503      	str	r3, [r0, #80]	; 0x50
 8005376:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <__sinit+0x58>)
 8005378:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <__sinit+0x5c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6282      	str	r2, [r0, #40]	; 0x28
 800537e:	4298      	cmp	r0, r3
 8005380:	bf04      	itt	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	6183      	streq	r3, [r0, #24]
 8005386:	f000 f81f 	bl	80053c8 <__sfp>
 800538a:	6060      	str	r0, [r4, #4]
 800538c:	4620      	mov	r0, r4
 800538e:	f000 f81b 	bl	80053c8 <__sfp>
 8005392:	60a0      	str	r0, [r4, #8]
 8005394:	4620      	mov	r0, r4
 8005396:	f000 f817 	bl	80053c8 <__sfp>
 800539a:	2200      	movs	r2, #0
 800539c:	60e0      	str	r0, [r4, #12]
 800539e:	2104      	movs	r1, #4
 80053a0:	6860      	ldr	r0, [r4, #4]
 80053a2:	f7ff ffa1 	bl	80052e8 <std>
 80053a6:	2201      	movs	r2, #1
 80053a8:	2109      	movs	r1, #9
 80053aa:	68a0      	ldr	r0, [r4, #8]
 80053ac:	f7ff ff9c 	bl	80052e8 <std>
 80053b0:	2202      	movs	r2, #2
 80053b2:	2112      	movs	r1, #18
 80053b4:	68e0      	ldr	r0, [r4, #12]
 80053b6:	f7ff ff97 	bl	80052e8 <std>
 80053ba:	2301      	movs	r3, #1
 80053bc:	61a3      	str	r3, [r4, #24]
 80053be:	bd10      	pop	{r4, pc}
 80053c0:	08006794 	.word	0x08006794
 80053c4:	08005331 	.word	0x08005331

080053c8 <__sfp>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <__sfp+0x70>)
 80053cc:	4607      	mov	r7, r0
 80053ce:	681e      	ldr	r6, [r3, #0]
 80053d0:	69b3      	ldr	r3, [r6, #24]
 80053d2:	b913      	cbnz	r3, 80053da <__sfp+0x12>
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff ffc7 	bl	8005368 <__sinit>
 80053da:	3648      	adds	r6, #72	; 0x48
 80053dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	d503      	bpl.n	80053ec <__sfp+0x24>
 80053e4:	6833      	ldr	r3, [r6, #0]
 80053e6:	b133      	cbz	r3, 80053f6 <__sfp+0x2e>
 80053e8:	6836      	ldr	r6, [r6, #0]
 80053ea:	e7f7      	b.n	80053dc <__sfp+0x14>
 80053ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80053f0:	b16d      	cbz	r5, 800540e <__sfp+0x46>
 80053f2:	3468      	adds	r4, #104	; 0x68
 80053f4:	e7f4      	b.n	80053e0 <__sfp+0x18>
 80053f6:	2104      	movs	r1, #4
 80053f8:	4638      	mov	r0, r7
 80053fa:	f7ff ff9f 	bl	800533c <__sfmoreglue>
 80053fe:	6030      	str	r0, [r6, #0]
 8005400:	2800      	cmp	r0, #0
 8005402:	d1f1      	bne.n	80053e8 <__sfp+0x20>
 8005404:	230c      	movs	r3, #12
 8005406:	4604      	mov	r4, r0
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4620      	mov	r0, r4
 800540c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <__sfp+0x74>)
 8005410:	6665      	str	r5, [r4, #100]	; 0x64
 8005412:	e9c4 5500 	strd	r5, r5, [r4]
 8005416:	60a5      	str	r5, [r4, #8]
 8005418:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800541c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005420:	2208      	movs	r2, #8
 8005422:	4629      	mov	r1, r5
 8005424:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005428:	f7ff fdf8 	bl	800501c <memset>
 800542c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005430:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005434:	e7e9      	b.n	800540a <__sfp+0x42>
 8005436:	bf00      	nop
 8005438:	08006794 	.word	0x08006794
 800543c:	ffff0001 	.word	0xffff0001

08005440 <_fwalk_reent>:
 8005440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005444:	4680      	mov	r8, r0
 8005446:	4689      	mov	r9, r1
 8005448:	2600      	movs	r6, #0
 800544a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800544e:	b914      	cbnz	r4, 8005456 <_fwalk_reent+0x16>
 8005450:	4630      	mov	r0, r6
 8005452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005456:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800545a:	3f01      	subs	r7, #1
 800545c:	d501      	bpl.n	8005462 <_fwalk_reent+0x22>
 800545e:	6824      	ldr	r4, [r4, #0]
 8005460:	e7f5      	b.n	800544e <_fwalk_reent+0xe>
 8005462:	89ab      	ldrh	r3, [r5, #12]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d907      	bls.n	8005478 <_fwalk_reent+0x38>
 8005468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800546c:	3301      	adds	r3, #1
 800546e:	d003      	beq.n	8005478 <_fwalk_reent+0x38>
 8005470:	4629      	mov	r1, r5
 8005472:	4640      	mov	r0, r8
 8005474:	47c8      	blx	r9
 8005476:	4306      	orrs	r6, r0
 8005478:	3568      	adds	r5, #104	; 0x68
 800547a:	e7ee      	b.n	800545a <_fwalk_reent+0x1a>

0800547c <__swhatbuf_r>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	460e      	mov	r6, r1
 8005480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005484:	b096      	sub	sp, #88	; 0x58
 8005486:	2900      	cmp	r1, #0
 8005488:	4614      	mov	r4, r2
 800548a:	461d      	mov	r5, r3
 800548c:	da07      	bge.n	800549e <__swhatbuf_r+0x22>
 800548e:	2300      	movs	r3, #0
 8005490:	602b      	str	r3, [r5, #0]
 8005492:	89b3      	ldrh	r3, [r6, #12]
 8005494:	061a      	lsls	r2, r3, #24
 8005496:	d410      	bmi.n	80054ba <__swhatbuf_r+0x3e>
 8005498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800549c:	e00e      	b.n	80054bc <__swhatbuf_r+0x40>
 800549e:	466a      	mov	r2, sp
 80054a0:	f000 f934 	bl	800570c <_fstat_r>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	dbf2      	blt.n	800548e <__swhatbuf_r+0x12>
 80054a8:	9a01      	ldr	r2, [sp, #4]
 80054aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80054ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80054b2:	425a      	negs	r2, r3
 80054b4:	415a      	adcs	r2, r3
 80054b6:	602a      	str	r2, [r5, #0]
 80054b8:	e7ee      	b.n	8005498 <__swhatbuf_r+0x1c>
 80054ba:	2340      	movs	r3, #64	; 0x40
 80054bc:	2000      	movs	r0, #0
 80054be:	6023      	str	r3, [r4, #0]
 80054c0:	b016      	add	sp, #88	; 0x58
 80054c2:	bd70      	pop	{r4, r5, r6, pc}

080054c4 <malloc>:
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <malloc+0xc>)
 80054c6:	4601      	mov	r1, r0
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	f000 b84f 	b.w	800556c <_malloc_r>
 80054ce:	bf00      	nop
 80054d0:	20000010 	.word	0x20000010

080054d4 <_free_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4605      	mov	r5, r0
 80054d8:	2900      	cmp	r1, #0
 80054da:	d043      	beq.n	8005564 <_free_r+0x90>
 80054dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e0:	1f0c      	subs	r4, r1, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfb8      	it	lt
 80054e6:	18e4      	addlt	r4, r4, r3
 80054e8:	f000 f934 	bl	8005754 <__malloc_lock>
 80054ec:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <_free_r+0x94>)
 80054ee:	6813      	ldr	r3, [r2, #0]
 80054f0:	4610      	mov	r0, r2
 80054f2:	b933      	cbnz	r3, 8005502 <_free_r+0x2e>
 80054f4:	6063      	str	r3, [r4, #4]
 80054f6:	6014      	str	r4, [r2, #0]
 80054f8:	4628      	mov	r0, r5
 80054fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054fe:	f000 b92a 	b.w	8005756 <__malloc_unlock>
 8005502:	42a3      	cmp	r3, r4
 8005504:	d90b      	bls.n	800551e <_free_r+0x4a>
 8005506:	6821      	ldr	r1, [r4, #0]
 8005508:	1862      	adds	r2, r4, r1
 800550a:	4293      	cmp	r3, r2
 800550c:	bf01      	itttt	eq
 800550e:	681a      	ldreq	r2, [r3, #0]
 8005510:	685b      	ldreq	r3, [r3, #4]
 8005512:	1852      	addeq	r2, r2, r1
 8005514:	6022      	streq	r2, [r4, #0]
 8005516:	6063      	str	r3, [r4, #4]
 8005518:	6004      	str	r4, [r0, #0]
 800551a:	e7ed      	b.n	80054f8 <_free_r+0x24>
 800551c:	4613      	mov	r3, r2
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	b10a      	cbz	r2, 8005526 <_free_r+0x52>
 8005522:	42a2      	cmp	r2, r4
 8005524:	d9fa      	bls.n	800551c <_free_r+0x48>
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	1858      	adds	r0, r3, r1
 800552a:	42a0      	cmp	r0, r4
 800552c:	d10b      	bne.n	8005546 <_free_r+0x72>
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	4401      	add	r1, r0
 8005532:	1858      	adds	r0, r3, r1
 8005534:	4282      	cmp	r2, r0
 8005536:	6019      	str	r1, [r3, #0]
 8005538:	d1de      	bne.n	80054f8 <_free_r+0x24>
 800553a:	6810      	ldr	r0, [r2, #0]
 800553c:	6852      	ldr	r2, [r2, #4]
 800553e:	4401      	add	r1, r0
 8005540:	6019      	str	r1, [r3, #0]
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	e7d8      	b.n	80054f8 <_free_r+0x24>
 8005546:	d902      	bls.n	800554e <_free_r+0x7a>
 8005548:	230c      	movs	r3, #12
 800554a:	602b      	str	r3, [r5, #0]
 800554c:	e7d4      	b.n	80054f8 <_free_r+0x24>
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	1821      	adds	r1, r4, r0
 8005552:	428a      	cmp	r2, r1
 8005554:	bf01      	itttt	eq
 8005556:	6811      	ldreq	r1, [r2, #0]
 8005558:	6852      	ldreq	r2, [r2, #4]
 800555a:	1809      	addeq	r1, r1, r0
 800555c:	6021      	streq	r1, [r4, #0]
 800555e:	6062      	str	r2, [r4, #4]
 8005560:	605c      	str	r4, [r3, #4]
 8005562:	e7c9      	b.n	80054f8 <_free_r+0x24>
 8005564:	bd38      	pop	{r3, r4, r5, pc}
 8005566:	bf00      	nop
 8005568:	200000d0 	.word	0x200000d0

0800556c <_malloc_r>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	1ccd      	adds	r5, r1, #3
 8005570:	f025 0503 	bic.w	r5, r5, #3
 8005574:	3508      	adds	r5, #8
 8005576:	2d0c      	cmp	r5, #12
 8005578:	bf38      	it	cc
 800557a:	250c      	movcc	r5, #12
 800557c:	2d00      	cmp	r5, #0
 800557e:	4606      	mov	r6, r0
 8005580:	db01      	blt.n	8005586 <_malloc_r+0x1a>
 8005582:	42a9      	cmp	r1, r5
 8005584:	d903      	bls.n	800558e <_malloc_r+0x22>
 8005586:	230c      	movs	r3, #12
 8005588:	6033      	str	r3, [r6, #0]
 800558a:	2000      	movs	r0, #0
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	f000 f8e1 	bl	8005754 <__malloc_lock>
 8005592:	4a21      	ldr	r2, [pc, #132]	; (8005618 <_malloc_r+0xac>)
 8005594:	6814      	ldr	r4, [r2, #0]
 8005596:	4621      	mov	r1, r4
 8005598:	b991      	cbnz	r1, 80055c0 <_malloc_r+0x54>
 800559a:	4c20      	ldr	r4, [pc, #128]	; (800561c <_malloc_r+0xb0>)
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	b91b      	cbnz	r3, 80055a8 <_malloc_r+0x3c>
 80055a0:	4630      	mov	r0, r6
 80055a2:	f000 f83d 	bl	8005620 <_sbrk_r>
 80055a6:	6020      	str	r0, [r4, #0]
 80055a8:	4629      	mov	r1, r5
 80055aa:	4630      	mov	r0, r6
 80055ac:	f000 f838 	bl	8005620 <_sbrk_r>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d124      	bne.n	80055fe <_malloc_r+0x92>
 80055b4:	230c      	movs	r3, #12
 80055b6:	4630      	mov	r0, r6
 80055b8:	6033      	str	r3, [r6, #0]
 80055ba:	f000 f8cc 	bl	8005756 <__malloc_unlock>
 80055be:	e7e4      	b.n	800558a <_malloc_r+0x1e>
 80055c0:	680b      	ldr	r3, [r1, #0]
 80055c2:	1b5b      	subs	r3, r3, r5
 80055c4:	d418      	bmi.n	80055f8 <_malloc_r+0x8c>
 80055c6:	2b0b      	cmp	r3, #11
 80055c8:	d90f      	bls.n	80055ea <_malloc_r+0x7e>
 80055ca:	600b      	str	r3, [r1, #0]
 80055cc:	18cc      	adds	r4, r1, r3
 80055ce:	50cd      	str	r5, [r1, r3]
 80055d0:	4630      	mov	r0, r6
 80055d2:	f000 f8c0 	bl	8005756 <__malloc_unlock>
 80055d6:	f104 000b 	add.w	r0, r4, #11
 80055da:	1d23      	adds	r3, r4, #4
 80055dc:	f020 0007 	bic.w	r0, r0, #7
 80055e0:	1ac3      	subs	r3, r0, r3
 80055e2:	d0d3      	beq.n	800558c <_malloc_r+0x20>
 80055e4:	425a      	negs	r2, r3
 80055e6:	50e2      	str	r2, [r4, r3]
 80055e8:	e7d0      	b.n	800558c <_malloc_r+0x20>
 80055ea:	684b      	ldr	r3, [r1, #4]
 80055ec:	428c      	cmp	r4, r1
 80055ee:	bf16      	itet	ne
 80055f0:	6063      	strne	r3, [r4, #4]
 80055f2:	6013      	streq	r3, [r2, #0]
 80055f4:	460c      	movne	r4, r1
 80055f6:	e7eb      	b.n	80055d0 <_malloc_r+0x64>
 80055f8:	460c      	mov	r4, r1
 80055fa:	6849      	ldr	r1, [r1, #4]
 80055fc:	e7cc      	b.n	8005598 <_malloc_r+0x2c>
 80055fe:	1cc4      	adds	r4, r0, #3
 8005600:	f024 0403 	bic.w	r4, r4, #3
 8005604:	42a0      	cmp	r0, r4
 8005606:	d005      	beq.n	8005614 <_malloc_r+0xa8>
 8005608:	1a21      	subs	r1, r4, r0
 800560a:	4630      	mov	r0, r6
 800560c:	f000 f808 	bl	8005620 <_sbrk_r>
 8005610:	3001      	adds	r0, #1
 8005612:	d0cf      	beq.n	80055b4 <_malloc_r+0x48>
 8005614:	6025      	str	r5, [r4, #0]
 8005616:	e7db      	b.n	80055d0 <_malloc_r+0x64>
 8005618:	200000d0 	.word	0x200000d0
 800561c:	200000d4 	.word	0x200000d4

08005620 <_sbrk_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	2300      	movs	r3, #0
 8005624:	4c05      	ldr	r4, [pc, #20]	; (800563c <_sbrk_r+0x1c>)
 8005626:	4605      	mov	r5, r0
 8005628:	4608      	mov	r0, r1
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	f7fc f820 	bl	8001670 <_sbrk>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_sbrk_r+0x1a>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	b103      	cbz	r3, 800563a <_sbrk_r+0x1a>
 8005638:	602b      	str	r3, [r5, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	20000288 	.word	0x20000288

08005640 <__sread>:
 8005640:	b510      	push	{r4, lr}
 8005642:	460c      	mov	r4, r1
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	f000 f886 	bl	8005758 <_read_r>
 800564c:	2800      	cmp	r0, #0
 800564e:	bfab      	itete	ge
 8005650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005652:	89a3      	ldrhlt	r3, [r4, #12]
 8005654:	181b      	addge	r3, r3, r0
 8005656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800565a:	bfac      	ite	ge
 800565c:	6563      	strge	r3, [r4, #84]	; 0x54
 800565e:	81a3      	strhlt	r3, [r4, #12]
 8005660:	bd10      	pop	{r4, pc}

08005662 <__swrite>:
 8005662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005666:	461f      	mov	r7, r3
 8005668:	898b      	ldrh	r3, [r1, #12]
 800566a:	4605      	mov	r5, r0
 800566c:	05db      	lsls	r3, r3, #23
 800566e:	460c      	mov	r4, r1
 8005670:	4616      	mov	r6, r2
 8005672:	d505      	bpl.n	8005680 <__swrite+0x1e>
 8005674:	2302      	movs	r3, #2
 8005676:	2200      	movs	r2, #0
 8005678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567c:	f000 f858 	bl	8005730 <_lseek_r>
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	4632      	mov	r2, r6
 8005684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800568e:	463b      	mov	r3, r7
 8005690:	4628      	mov	r0, r5
 8005692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005696:	f000 b817 	b.w	80056c8 <_write_r>

0800569a <__sseek>:
 800569a:	b510      	push	{r4, lr}
 800569c:	460c      	mov	r4, r1
 800569e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a2:	f000 f845 	bl	8005730 <_lseek_r>
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	bf15      	itete	ne
 80056ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80056ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056b6:	81a3      	strheq	r3, [r4, #12]
 80056b8:	bf18      	it	ne
 80056ba:	81a3      	strhne	r3, [r4, #12]
 80056bc:	bd10      	pop	{r4, pc}

080056be <__sclose>:
 80056be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c2:	f000 b813 	b.w	80056ec <_close_r>
	...

080056c8 <_write_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4605      	mov	r5, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	2200      	movs	r2, #0
 80056d2:	4c05      	ldr	r4, [pc, #20]	; (80056e8 <_write_r+0x20>)
 80056d4:	6022      	str	r2, [r4, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f7fc fbee 	bl	8001eb8 <_write>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_write_r+0x1e>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_write_r+0x1e>
 80056e4:	602b      	str	r3, [r5, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	20000288 	.word	0x20000288

080056ec <_close_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	2300      	movs	r3, #0
 80056f0:	4c05      	ldr	r4, [pc, #20]	; (8005708 <_close_r+0x1c>)
 80056f2:	4605      	mov	r5, r0
 80056f4:	4608      	mov	r0, r1
 80056f6:	6023      	str	r3, [r4, #0]
 80056f8:	f7fc fc0a 	bl	8001f10 <_close>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_close_r+0x1a>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	b103      	cbz	r3, 8005706 <_close_r+0x1a>
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	20000288 	.word	0x20000288

0800570c <_fstat_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	2300      	movs	r3, #0
 8005710:	4c06      	ldr	r4, [pc, #24]	; (800572c <_fstat_r+0x20>)
 8005712:	4605      	mov	r5, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	f7fc fc49 	bl	8001fb0 <_fstat>
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	d102      	bne.n	8005728 <_fstat_r+0x1c>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	b103      	cbz	r3, 8005728 <_fstat_r+0x1c>
 8005726:	602b      	str	r3, [r5, #0]
 8005728:	bd38      	pop	{r3, r4, r5, pc}
 800572a:	bf00      	nop
 800572c:	20000288 	.word	0x20000288

08005730 <_lseek_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4605      	mov	r5, r0
 8005734:	4608      	mov	r0, r1
 8005736:	4611      	mov	r1, r2
 8005738:	2200      	movs	r2, #0
 800573a:	4c05      	ldr	r4, [pc, #20]	; (8005750 <_lseek_r+0x20>)
 800573c:	6022      	str	r2, [r4, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	f7fc fbfd 	bl	8001f3e <_lseek>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_lseek_r+0x1e>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	b103      	cbz	r3, 800574e <_lseek_r+0x1e>
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	20000288 	.word	0x20000288

08005754 <__malloc_lock>:
 8005754:	4770      	bx	lr

08005756 <__malloc_unlock>:
 8005756:	4770      	bx	lr

08005758 <_read_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4605      	mov	r5, r0
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	2200      	movs	r2, #0
 8005762:	4c05      	ldr	r4, [pc, #20]	; (8005778 <_read_r+0x20>)
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	f7fc fbfa 	bl	8001f60 <_read>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_read_r+0x1e>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	b103      	cbz	r3, 8005776 <_read_r+0x1e>
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	20000288 	.word	0x20000288

0800577c <sin>:
 800577c:	b530      	push	{r4, r5, lr}
 800577e:	4a1a      	ldr	r2, [pc, #104]	; (80057e8 <sin+0x6c>)
 8005780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005784:	4293      	cmp	r3, r2
 8005786:	b087      	sub	sp, #28
 8005788:	dc06      	bgt.n	8005798 <sin+0x1c>
 800578a:	2300      	movs	r3, #0
 800578c:	2200      	movs	r2, #0
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	2300      	movs	r3, #0
 8005792:	f000 fe25 	bl	80063e0 <__kernel_sin>
 8005796:	e006      	b.n	80057a6 <sin+0x2a>
 8005798:	4a14      	ldr	r2, [pc, #80]	; (80057ec <sin+0x70>)
 800579a:	4293      	cmp	r3, r2
 800579c:	dd05      	ble.n	80057aa <sin+0x2e>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	f7fa fcd9 	bl	8000158 <__aeabi_dsub>
 80057a6:	b007      	add	sp, #28
 80057a8:	bd30      	pop	{r4, r5, pc}
 80057aa:	aa02      	add	r2, sp, #8
 80057ac:	f000 f820 	bl	80057f0 <__ieee754_rem_pio2>
 80057b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b4:	f000 0403 	and.w	r4, r0, #3
 80057b8:	2c01      	cmp	r4, #1
 80057ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057be:	d005      	beq.n	80057cc <sin+0x50>
 80057c0:	2c02      	cmp	r4, #2
 80057c2:	d006      	beq.n	80057d2 <sin+0x56>
 80057c4:	b964      	cbnz	r4, 80057e0 <sin+0x64>
 80057c6:	2401      	movs	r4, #1
 80057c8:	9400      	str	r4, [sp, #0]
 80057ca:	e7e2      	b.n	8005792 <sin+0x16>
 80057cc:	f000 fa00 	bl	8005bd0 <__kernel_cos>
 80057d0:	e7e9      	b.n	80057a6 <sin+0x2a>
 80057d2:	2401      	movs	r4, #1
 80057d4:	9400      	str	r4, [sp, #0]
 80057d6:	f000 fe03 	bl	80063e0 <__kernel_sin>
 80057da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80057de:	e7e2      	b.n	80057a6 <sin+0x2a>
 80057e0:	f000 f9f6 	bl	8005bd0 <__kernel_cos>
 80057e4:	e7f9      	b.n	80057da <sin+0x5e>
 80057e6:	bf00      	nop
 80057e8:	3fe921fb 	.word	0x3fe921fb
 80057ec:	7fefffff 	.word	0x7fefffff

080057f0 <__ieee754_rem_pio2>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	4614      	mov	r4, r2
 80057f6:	4ac2      	ldr	r2, [pc, #776]	; (8005b00 <__ieee754_rem_pio2+0x310>)
 80057f8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80057fc:	4592      	cmp	sl, r2
 80057fe:	b08d      	sub	sp, #52	; 0x34
 8005800:	468b      	mov	fp, r1
 8005802:	dc07      	bgt.n	8005814 <__ieee754_rem_pio2+0x24>
 8005804:	2200      	movs	r2, #0
 8005806:	2300      	movs	r3, #0
 8005808:	e9c4 0100 	strd	r0, r1, [r4]
 800580c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005810:	2500      	movs	r5, #0
 8005812:	e023      	b.n	800585c <__ieee754_rem_pio2+0x6c>
 8005814:	4abb      	ldr	r2, [pc, #748]	; (8005b04 <__ieee754_rem_pio2+0x314>)
 8005816:	4592      	cmp	sl, r2
 8005818:	dc71      	bgt.n	80058fe <__ieee754_rem_pio2+0x10e>
 800581a:	a3ab      	add	r3, pc, #684	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x2d8>)
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	2900      	cmp	r1, #0
 8005822:	4db9      	ldr	r5, [pc, #740]	; (8005b08 <__ieee754_rem_pio2+0x318>)
 8005824:	dd36      	ble.n	8005894 <__ieee754_rem_pio2+0xa4>
 8005826:	f7fa fc97 	bl	8000158 <__aeabi_dsub>
 800582a:	45aa      	cmp	sl, r5
 800582c:	4606      	mov	r6, r0
 800582e:	460f      	mov	r7, r1
 8005830:	d018      	beq.n	8005864 <__ieee754_rem_pio2+0x74>
 8005832:	a3a7      	add	r3, pc, #668	; (adr r3, 8005ad0 <__ieee754_rem_pio2+0x2e0>)
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	f7fa fc8e 	bl	8000158 <__aeabi_dsub>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4630      	mov	r0, r6
 8005842:	e9c4 2300 	strd	r2, r3, [r4]
 8005846:	4639      	mov	r1, r7
 8005848:	f7fa fc86 	bl	8000158 <__aeabi_dsub>
 800584c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005ad0 <__ieee754_rem_pio2+0x2e0>)
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	f7fa fc81 	bl	8000158 <__aeabi_dsub>
 8005856:	2501      	movs	r5, #1
 8005858:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800585c:	4628      	mov	r0, r5
 800585e:	b00d      	add	sp, #52	; 0x34
 8005860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005864:	a39c      	add	r3, pc, #624	; (adr r3, 8005ad8 <__ieee754_rem_pio2+0x2e8>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f7fa fc75 	bl	8000158 <__aeabi_dsub>
 800586e:	a39c      	add	r3, pc, #624	; (adr r3, 8005ae0 <__ieee754_rem_pio2+0x2f0>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	4606      	mov	r6, r0
 8005876:	460f      	mov	r7, r1
 8005878:	f7fa fc6e 	bl	8000158 <__aeabi_dsub>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4630      	mov	r0, r6
 8005882:	e9c4 2300 	strd	r2, r3, [r4]
 8005886:	4639      	mov	r1, r7
 8005888:	f7fa fc66 	bl	8000158 <__aeabi_dsub>
 800588c:	a394      	add	r3, pc, #592	; (adr r3, 8005ae0 <__ieee754_rem_pio2+0x2f0>)
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	e7de      	b.n	8005852 <__ieee754_rem_pio2+0x62>
 8005894:	f7fa fc62 	bl	800015c <__adddf3>
 8005898:	45aa      	cmp	sl, r5
 800589a:	4606      	mov	r6, r0
 800589c:	460f      	mov	r7, r1
 800589e:	d016      	beq.n	80058ce <__ieee754_rem_pio2+0xde>
 80058a0:	a38b      	add	r3, pc, #556	; (adr r3, 8005ad0 <__ieee754_rem_pio2+0x2e0>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f7fa fc59 	bl	800015c <__adddf3>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4630      	mov	r0, r6
 80058b0:	e9c4 2300 	strd	r2, r3, [r4]
 80058b4:	4639      	mov	r1, r7
 80058b6:	f7fa fc4f 	bl	8000158 <__aeabi_dsub>
 80058ba:	a385      	add	r3, pc, #532	; (adr r3, 8005ad0 <__ieee754_rem_pio2+0x2e0>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f7fa fc4c 	bl	800015c <__adddf3>
 80058c4:	f04f 35ff 	mov.w	r5, #4294967295
 80058c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058cc:	e7c6      	b.n	800585c <__ieee754_rem_pio2+0x6c>
 80058ce:	a382      	add	r3, pc, #520	; (adr r3, 8005ad8 <__ieee754_rem_pio2+0x2e8>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7fa fc42 	bl	800015c <__adddf3>
 80058d8:	a381      	add	r3, pc, #516	; (adr r3, 8005ae0 <__ieee754_rem_pio2+0x2f0>)
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	4606      	mov	r6, r0
 80058e0:	460f      	mov	r7, r1
 80058e2:	f7fa fc3b 	bl	800015c <__adddf3>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4630      	mov	r0, r6
 80058ec:	e9c4 2300 	strd	r2, r3, [r4]
 80058f0:	4639      	mov	r1, r7
 80058f2:	f7fa fc31 	bl	8000158 <__aeabi_dsub>
 80058f6:	a37a      	add	r3, pc, #488	; (adr r3, 8005ae0 <__ieee754_rem_pio2+0x2f0>)
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	e7e0      	b.n	80058c0 <__ieee754_rem_pio2+0xd0>
 80058fe:	4a83      	ldr	r2, [pc, #524]	; (8005b0c <__ieee754_rem_pio2+0x31c>)
 8005900:	4592      	cmp	sl, r2
 8005902:	f300 80d2 	bgt.w	8005aaa <__ieee754_rem_pio2+0x2ba>
 8005906:	f000 fe21 	bl	800654c <fabs>
 800590a:	a377      	add	r3, pc, #476	; (adr r3, 8005ae8 <__ieee754_rem_pio2+0x2f8>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	4606      	mov	r6, r0
 8005912:	460f      	mov	r7, r1
 8005914:	f7fa fdd8 	bl	80004c8 <__aeabi_dmul>
 8005918:	2200      	movs	r2, #0
 800591a:	4b7d      	ldr	r3, [pc, #500]	; (8005b10 <__ieee754_rem_pio2+0x320>)
 800591c:	f7fa fc1e 	bl	800015c <__adddf3>
 8005920:	f7fb f86c 	bl	80009fc <__aeabi_d2iz>
 8005924:	4605      	mov	r5, r0
 8005926:	f7fa fd65 	bl	80003f4 <__aeabi_i2d>
 800592a:	a367      	add	r3, pc, #412	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x2d8>)
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005934:	f7fa fdc8 	bl	80004c8 <__aeabi_dmul>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4630      	mov	r0, r6
 800593e:	4639      	mov	r1, r7
 8005940:	f7fa fc0a 	bl	8000158 <__aeabi_dsub>
 8005944:	a362      	add	r3, pc, #392	; (adr r3, 8005ad0 <__ieee754_rem_pio2+0x2e0>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	4606      	mov	r6, r0
 800594c:	460f      	mov	r7, r1
 800594e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005952:	f7fa fdb9 	bl	80004c8 <__aeabi_dmul>
 8005956:	2d1f      	cmp	r5, #31
 8005958:	4680      	mov	r8, r0
 800595a:	4689      	mov	r9, r1
 800595c:	dc0e      	bgt.n	800597c <__ieee754_rem_pio2+0x18c>
 800595e:	4b6d      	ldr	r3, [pc, #436]	; (8005b14 <__ieee754_rem_pio2+0x324>)
 8005960:	1e6a      	subs	r2, r5, #1
 8005962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005966:	4553      	cmp	r3, sl
 8005968:	d008      	beq.n	800597c <__ieee754_rem_pio2+0x18c>
 800596a:	4642      	mov	r2, r8
 800596c:	464b      	mov	r3, r9
 800596e:	4630      	mov	r0, r6
 8005970:	4639      	mov	r1, r7
 8005972:	f7fa fbf1 	bl	8000158 <__aeabi_dsub>
 8005976:	e9c4 0100 	strd	r0, r1, [r4]
 800597a:	e011      	b.n	80059a0 <__ieee754_rem_pio2+0x1b0>
 800597c:	464b      	mov	r3, r9
 800597e:	4642      	mov	r2, r8
 8005980:	4630      	mov	r0, r6
 8005982:	4639      	mov	r1, r7
 8005984:	f7fa fbe8 	bl	8000158 <__aeabi_dsub>
 8005988:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800598c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005990:	ebaa 0303 	sub.w	r3, sl, r3
 8005994:	2b10      	cmp	r3, #16
 8005996:	dc1f      	bgt.n	80059d8 <__ieee754_rem_pio2+0x1e8>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	e9c4 2300 	strd	r2, r3, [r4]
 80059a0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80059a4:	4630      	mov	r0, r6
 80059a6:	4653      	mov	r3, sl
 80059a8:	4639      	mov	r1, r7
 80059aa:	f7fa fbd5 	bl	8000158 <__aeabi_dsub>
 80059ae:	4642      	mov	r2, r8
 80059b0:	464b      	mov	r3, r9
 80059b2:	f7fa fbd1 	bl	8000158 <__aeabi_dsub>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	f1bb 0f00 	cmp.w	fp, #0
 80059be:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80059c2:	f6bf af4b 	bge.w	800585c <__ieee754_rem_pio2+0x6c>
 80059c6:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80059ca:	e9c4 3001 	strd	r3, r0, [r4, #4]
 80059ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80059d2:	60e1      	str	r1, [r4, #12]
 80059d4:	426d      	negs	r5, r5
 80059d6:	e741      	b.n	800585c <__ieee754_rem_pio2+0x6c>
 80059d8:	a33f      	add	r3, pc, #252	; (adr r3, 8005ad8 <__ieee754_rem_pio2+0x2e8>)
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e2:	f7fa fd71 	bl	80004c8 <__aeabi_dmul>
 80059e6:	4680      	mov	r8, r0
 80059e8:	4689      	mov	r9, r1
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4630      	mov	r0, r6
 80059f0:	4639      	mov	r1, r7
 80059f2:	f7fa fbb1 	bl	8000158 <__aeabi_dsub>
 80059f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4630      	mov	r0, r6
 8005a00:	4639      	mov	r1, r7
 8005a02:	f7fa fba9 	bl	8000158 <__aeabi_dsub>
 8005a06:	4642      	mov	r2, r8
 8005a08:	464b      	mov	r3, r9
 8005a0a:	f7fa fba5 	bl	8000158 <__aeabi_dsub>
 8005a0e:	a334      	add	r3, pc, #208	; (adr r3, 8005ae0 <__ieee754_rem_pio2+0x2f0>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	4606      	mov	r6, r0
 8005a16:	460f      	mov	r7, r1
 8005a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a1c:	f7fa fd54 	bl	80004c8 <__aeabi_dmul>
 8005a20:	4632      	mov	r2, r6
 8005a22:	463b      	mov	r3, r7
 8005a24:	f7fa fb98 	bl	8000158 <__aeabi_dsub>
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	4689      	mov	r9, r1
 8005a30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a34:	f7fa fb90 	bl	8000158 <__aeabi_dsub>
 8005a38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a3c:	ebaa 0a03 	sub.w	sl, sl, r3
 8005a40:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8005a44:	dc06      	bgt.n	8005a54 <__ieee754_rem_pio2+0x264>
 8005a46:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	e9c4 2300 	strd	r2, r3, [r4]
 8005a52:	e7a5      	b.n	80059a0 <__ieee754_rem_pio2+0x1b0>
 8005a54:	a326      	add	r3, pc, #152	; (adr r3, 8005af0 <__ieee754_rem_pio2+0x300>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a5e:	f7fa fd33 	bl	80004c8 <__aeabi_dmul>
 8005a62:	4680      	mov	r8, r0
 8005a64:	4689      	mov	r9, r1
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a6e:	f7fa fb73 	bl	8000158 <__aeabi_dsub>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4606      	mov	r6, r0
 8005a78:	460f      	mov	r7, r1
 8005a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a7e:	f7fa fb6b 	bl	8000158 <__aeabi_dsub>
 8005a82:	4642      	mov	r2, r8
 8005a84:	464b      	mov	r3, r9
 8005a86:	f7fa fb67 	bl	8000158 <__aeabi_dsub>
 8005a8a:	a31b      	add	r3, pc, #108	; (adr r3, 8005af8 <__ieee754_rem_pio2+0x308>)
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	4680      	mov	r8, r0
 8005a92:	4689      	mov	r9, r1
 8005a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a98:	f7fa fd16 	bl	80004c8 <__aeabi_dmul>
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	f7fa fb5a 	bl	8000158 <__aeabi_dsub>
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	e75f      	b.n	800596a <__ieee754_rem_pio2+0x17a>
 8005aaa:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <__ieee754_rem_pio2+0x328>)
 8005aac:	4592      	cmp	sl, r2
 8005aae:	dd35      	ble.n	8005b1c <__ieee754_rem_pio2+0x32c>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	f7fa fb50 	bl	8000158 <__aeabi_dsub>
 8005ab8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005abc:	e9c4 0100 	strd	r0, r1, [r4]
 8005ac0:	e6a6      	b.n	8005810 <__ieee754_rem_pio2+0x20>
 8005ac2:	bf00      	nop
 8005ac4:	f3af 8000 	nop.w
 8005ac8:	54400000 	.word	0x54400000
 8005acc:	3ff921fb 	.word	0x3ff921fb
 8005ad0:	1a626331 	.word	0x1a626331
 8005ad4:	3dd0b461 	.word	0x3dd0b461
 8005ad8:	1a600000 	.word	0x1a600000
 8005adc:	3dd0b461 	.word	0x3dd0b461
 8005ae0:	2e037073 	.word	0x2e037073
 8005ae4:	3ba3198a 	.word	0x3ba3198a
 8005ae8:	6dc9c883 	.word	0x6dc9c883
 8005aec:	3fe45f30 	.word	0x3fe45f30
 8005af0:	2e000000 	.word	0x2e000000
 8005af4:	3ba3198a 	.word	0x3ba3198a
 8005af8:	252049c1 	.word	0x252049c1
 8005afc:	397b839a 	.word	0x397b839a
 8005b00:	3fe921fb 	.word	0x3fe921fb
 8005b04:	4002d97b 	.word	0x4002d97b
 8005b08:	3ff921fb 	.word	0x3ff921fb
 8005b0c:	413921fb 	.word	0x413921fb
 8005b10:	3fe00000 	.word	0x3fe00000
 8005b14:	080067f8 	.word	0x080067f8
 8005b18:	7fefffff 	.word	0x7fefffff
 8005b1c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005b20:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005b24:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005b28:	460f      	mov	r7, r1
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	f7fa ff66 	bl	80009fc <__aeabi_d2iz>
 8005b30:	f7fa fc60 	bl	80003f4 <__aeabi_i2d>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4630      	mov	r0, r6
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b40:	f7fa fb0a 	bl	8000158 <__aeabi_dsub>
 8005b44:	2200      	movs	r2, #0
 8005b46:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <__ieee754_rem_pio2+0x3d8>)
 8005b48:	f7fa fcbe 	bl	80004c8 <__aeabi_dmul>
 8005b4c:	460f      	mov	r7, r1
 8005b4e:	4606      	mov	r6, r0
 8005b50:	f7fa ff54 	bl	80009fc <__aeabi_d2iz>
 8005b54:	f7fa fc4e 	bl	80003f4 <__aeabi_i2d>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	4639      	mov	r1, r7
 8005b60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005b64:	f7fa faf8 	bl	8000158 <__aeabi_dsub>
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <__ieee754_rem_pio2+0x3d8>)
 8005b6c:	f7fa fcac 	bl	80004c8 <__aeabi_dmul>
 8005b70:	f04f 0803 	mov.w	r8, #3
 8005b74:	2600      	movs	r6, #0
 8005b76:	2700      	movs	r7, #0
 8005b78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b7c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005b80:	4632      	mov	r2, r6
 8005b82:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005b86:	463b      	mov	r3, r7
 8005b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8005b8c:	f7fa ff04 	bl	8000998 <__aeabi_dcmpeq>
 8005b90:	b9b8      	cbnz	r0, 8005bc2 <__ieee754_rem_pio2+0x3d2>
 8005b92:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <__ieee754_rem_pio2+0x3dc>)
 8005b94:	462a      	mov	r2, r5
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	2302      	movs	r3, #2
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	a806      	add	r0, sp, #24
 8005ba0:	4643      	mov	r3, r8
 8005ba2:	f000 f8d3 	bl	8005d4c <__kernel_rem_pio2>
 8005ba6:	f1bb 0f00 	cmp.w	fp, #0
 8005baa:	4605      	mov	r5, r0
 8005bac:	f6bf ae56 	bge.w	800585c <__ieee754_rem_pio2+0x6c>
 8005bb0:	6863      	ldr	r3, [r4, #4]
 8005bb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	68e3      	ldr	r3, [r4, #12]
 8005bba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bbe:	60e3      	str	r3, [r4, #12]
 8005bc0:	e708      	b.n	80059d4 <__ieee754_rem_pio2+0x1e4>
 8005bc2:	46d0      	mov	r8, sl
 8005bc4:	e7dc      	b.n	8005b80 <__ieee754_rem_pio2+0x390>
 8005bc6:	bf00      	nop
 8005bc8:	41700000 	.word	0x41700000
 8005bcc:	08006878 	.word	0x08006878

08005bd0 <__kernel_cos>:
 8005bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005bd8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005bdc:	4680      	mov	r8, r0
 8005bde:	460f      	mov	r7, r1
 8005be0:	e9cd 2300 	strd	r2, r3, [sp]
 8005be4:	da04      	bge.n	8005bf0 <__kernel_cos+0x20>
 8005be6:	f7fa ff09 	bl	80009fc <__aeabi_d2iz>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	f000 8086 	beq.w	8005cfc <__kernel_cos+0x12c>
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	f7fa fc66 	bl	80004c8 <__aeabi_dmul>
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4b4e      	ldr	r3, [pc, #312]	; (8005d38 <__kernel_cos+0x168>)
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	f7fa fc60 	bl	80004c8 <__aeabi_dmul>
 8005c08:	a33f      	add	r3, pc, #252	; (adr r3, 8005d08 <__kernel_cos+0x138>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	4682      	mov	sl, r0
 8005c10:	468b      	mov	fp, r1
 8005c12:	4620      	mov	r0, r4
 8005c14:	4629      	mov	r1, r5
 8005c16:	f7fa fc57 	bl	80004c8 <__aeabi_dmul>
 8005c1a:	a33d      	add	r3, pc, #244	; (adr r3, 8005d10 <__kernel_cos+0x140>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f7fa fa9c 	bl	800015c <__adddf3>
 8005c24:	4622      	mov	r2, r4
 8005c26:	462b      	mov	r3, r5
 8005c28:	f7fa fc4e 	bl	80004c8 <__aeabi_dmul>
 8005c2c:	a33a      	add	r3, pc, #232	; (adr r3, 8005d18 <__kernel_cos+0x148>)
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f7fa fa91 	bl	8000158 <__aeabi_dsub>
 8005c36:	4622      	mov	r2, r4
 8005c38:	462b      	mov	r3, r5
 8005c3a:	f7fa fc45 	bl	80004c8 <__aeabi_dmul>
 8005c3e:	a338      	add	r3, pc, #224	; (adr r3, 8005d20 <__kernel_cos+0x150>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f7fa fa8a 	bl	800015c <__adddf3>
 8005c48:	4622      	mov	r2, r4
 8005c4a:	462b      	mov	r3, r5
 8005c4c:	f7fa fc3c 	bl	80004c8 <__aeabi_dmul>
 8005c50:	a335      	add	r3, pc, #212	; (adr r3, 8005d28 <__kernel_cos+0x158>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f7fa fa7f 	bl	8000158 <__aeabi_dsub>
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	f7fa fc33 	bl	80004c8 <__aeabi_dmul>
 8005c62:	a333      	add	r3, pc, #204	; (adr r3, 8005d30 <__kernel_cos+0x160>)
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa fa78 	bl	800015c <__adddf3>
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	462b      	mov	r3, r5
 8005c70:	f7fa fc2a 	bl	80004c8 <__aeabi_dmul>
 8005c74:	4622      	mov	r2, r4
 8005c76:	462b      	mov	r3, r5
 8005c78:	f7fa fc26 	bl	80004c8 <__aeabi_dmul>
 8005c7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c80:	4604      	mov	r4, r0
 8005c82:	460d      	mov	r5, r1
 8005c84:	4640      	mov	r0, r8
 8005c86:	4639      	mov	r1, r7
 8005c88:	f7fa fc1e 	bl	80004c8 <__aeabi_dmul>
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4602      	mov	r2, r0
 8005c90:	4629      	mov	r1, r5
 8005c92:	4620      	mov	r0, r4
 8005c94:	f7fa fa60 	bl	8000158 <__aeabi_dsub>
 8005c98:	4b28      	ldr	r3, [pc, #160]	; (8005d3c <__kernel_cos+0x16c>)
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	429e      	cmp	r6, r3
 8005c9e:	4689      	mov	r9, r1
 8005ca0:	dc0e      	bgt.n	8005cc0 <__kernel_cos+0xf0>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4650      	mov	r0, sl
 8005ca8:	4659      	mov	r1, fp
 8005caa:	f7fa fa55 	bl	8000158 <__aeabi_dsub>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4922      	ldr	r1, [pc, #136]	; (8005d40 <__kernel_cos+0x170>)
 8005cb6:	f7fa fa4f 	bl	8000158 <__aeabi_dsub>
 8005cba:	b003      	add	sp, #12
 8005cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc0:	2400      	movs	r4, #0
 8005cc2:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <__kernel_cos+0x174>)
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	429e      	cmp	r6, r3
 8005cc8:	bfcc      	ite	gt
 8005cca:	4d1f      	ldrgt	r5, [pc, #124]	; (8005d48 <__kernel_cos+0x178>)
 8005ccc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005cd0:	462b      	mov	r3, r5
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	491a      	ldr	r1, [pc, #104]	; (8005d40 <__kernel_cos+0x170>)
 8005cd6:	f7fa fa3f 	bl	8000158 <__aeabi_dsub>
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4606      	mov	r6, r0
 8005cde:	460f      	mov	r7, r1
 8005ce0:	462b      	mov	r3, r5
 8005ce2:	4650      	mov	r0, sl
 8005ce4:	4659      	mov	r1, fp
 8005ce6:	f7fa fa37 	bl	8000158 <__aeabi_dsub>
 8005cea:	4642      	mov	r2, r8
 8005cec:	464b      	mov	r3, r9
 8005cee:	f7fa fa33 	bl	8000158 <__aeabi_dsub>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	e7dc      	b.n	8005cb6 <__kernel_cos+0xe6>
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	4910      	ldr	r1, [pc, #64]	; (8005d40 <__kernel_cos+0x170>)
 8005d00:	e7db      	b.n	8005cba <__kernel_cos+0xea>
 8005d02:	bf00      	nop
 8005d04:	f3af 8000 	nop.w
 8005d08:	be8838d4 	.word	0xbe8838d4
 8005d0c:	bda8fae9 	.word	0xbda8fae9
 8005d10:	bdb4b1c4 	.word	0xbdb4b1c4
 8005d14:	3e21ee9e 	.word	0x3e21ee9e
 8005d18:	809c52ad 	.word	0x809c52ad
 8005d1c:	3e927e4f 	.word	0x3e927e4f
 8005d20:	19cb1590 	.word	0x19cb1590
 8005d24:	3efa01a0 	.word	0x3efa01a0
 8005d28:	16c15177 	.word	0x16c15177
 8005d2c:	3f56c16c 	.word	0x3f56c16c
 8005d30:	5555554c 	.word	0x5555554c
 8005d34:	3fa55555 	.word	0x3fa55555
 8005d38:	3fe00000 	.word	0x3fe00000
 8005d3c:	3fd33332 	.word	0x3fd33332
 8005d40:	3ff00000 	.word	0x3ff00000
 8005d44:	3fe90000 	.word	0x3fe90000
 8005d48:	3fd20000 	.word	0x3fd20000

08005d4c <__kernel_rem_pio2>:
 8005d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005d54:	9307      	str	r3, [sp, #28]
 8005d56:	9104      	str	r1, [sp, #16]
 8005d58:	4bbf      	ldr	r3, [pc, #764]	; (8006058 <__kernel_rem_pio2+0x30c>)
 8005d5a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005d5c:	1ed4      	subs	r4, r2, #3
 8005d5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d62:	2500      	movs	r5, #0
 8005d64:	9302      	str	r3, [sp, #8]
 8005d66:	9b07      	ldr	r3, [sp, #28]
 8005d68:	9008      	str	r0, [sp, #32]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	9306      	str	r3, [sp, #24]
 8005d6e:	2318      	movs	r3, #24
 8005d70:	fb94 f4f3 	sdiv	r4, r4, r3
 8005d74:	f06f 0317 	mvn.w	r3, #23
 8005d78:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005d7c:	fb04 3303 	mla	r3, r4, r3, r3
 8005d80:	eb03 0a02 	add.w	sl, r3, r2
 8005d84:	9a06      	ldr	r2, [sp, #24]
 8005d86:	9b02      	ldr	r3, [sp, #8]
 8005d88:	1aa7      	subs	r7, r4, r2
 8005d8a:	eb03 0802 	add.w	r8, r3, r2
 8005d8e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005d90:	2200      	movs	r2, #0
 8005d92:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005d96:	2300      	movs	r3, #0
 8005d98:	ae1e      	add	r6, sp, #120	; 0x78
 8005d9a:	4545      	cmp	r5, r8
 8005d9c:	dd14      	ble.n	8005dc8 <__kernel_rem_pio2+0x7c>
 8005d9e:	2600      	movs	r6, #0
 8005da0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8005da4:	9b02      	ldr	r3, [sp, #8]
 8005da6:	429e      	cmp	r6, r3
 8005da8:	dc39      	bgt.n	8005e1e <__kernel_rem_pio2+0xd2>
 8005daa:	9b08      	ldr	r3, [sp, #32]
 8005dac:	f04f 0800 	mov.w	r8, #0
 8005db0:	3b08      	subs	r3, #8
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	9b07      	ldr	r3, [sp, #28]
 8005db6:	f04f 0900 	mov.w	r9, #0
 8005dba:	199d      	adds	r5, r3, r6
 8005dbc:	ab20      	add	r3, sp, #128	; 0x80
 8005dbe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005dc2:	9305      	str	r3, [sp, #20]
 8005dc4:	2700      	movs	r7, #0
 8005dc6:	e023      	b.n	8005e10 <__kernel_rem_pio2+0xc4>
 8005dc8:	42ef      	cmn	r7, r5
 8005dca:	d40b      	bmi.n	8005de4 <__kernel_rem_pio2+0x98>
 8005dcc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005dd0:	e9cd 2300 	strd	r2, r3, [sp]
 8005dd4:	f7fa fb0e 	bl	80003f4 <__aeabi_i2d>
 8005dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ddc:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8005de0:	3501      	adds	r5, #1
 8005de2:	e7da      	b.n	8005d9a <__kernel_rem_pio2+0x4e>
 8005de4:	4610      	mov	r0, r2
 8005de6:	4619      	mov	r1, r3
 8005de8:	e7f8      	b.n	8005ddc <__kernel_rem_pio2+0x90>
 8005dea:	9905      	ldr	r1, [sp, #20]
 8005dec:	9d00      	ldr	r5, [sp, #0]
 8005dee:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005df2:	9105      	str	r1, [sp, #20]
 8005df4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8005df8:	9500      	str	r5, [sp, #0]
 8005dfa:	f7fa fb65 	bl	80004c8 <__aeabi_dmul>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4640      	mov	r0, r8
 8005e04:	4649      	mov	r1, r9
 8005e06:	f7fa f9a9 	bl	800015c <__adddf3>
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	4689      	mov	r9, r1
 8005e0e:	3701      	adds	r7, #1
 8005e10:	9b06      	ldr	r3, [sp, #24]
 8005e12:	429f      	cmp	r7, r3
 8005e14:	dde9      	ble.n	8005dea <__kernel_rem_pio2+0x9e>
 8005e16:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8005e1a:	3601      	adds	r6, #1
 8005e1c:	e7c2      	b.n	8005da4 <__kernel_rem_pio2+0x58>
 8005e1e:	9b02      	ldr	r3, [sp, #8]
 8005e20:	aa0c      	add	r2, sp, #48	; 0x30
 8005e22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e28:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005e2a:	9f02      	ldr	r7, [sp, #8]
 8005e2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005e30:	930a      	str	r3, [sp, #40]	; 0x28
 8005e32:	2600      	movs	r6, #0
 8005e34:	ab98      	add	r3, sp, #608	; 0x260
 8005e36:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8005e3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e42:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005e46:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005e4a:	ab98      	add	r3, sp, #608	; 0x260
 8005e4c:	445b      	add	r3, fp
 8005e4e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8005e52:	1bbb      	subs	r3, r7, r6
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dc71      	bgt.n	8005f3c <__kernel_rem_pio2+0x1f0>
 8005e58:	4652      	mov	r2, sl
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	f000 fbff 	bl	8006660 <scalbn>
 8005e62:	2200      	movs	r2, #0
 8005e64:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e68:	4604      	mov	r4, r0
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	f7fa fb2c 	bl	80004c8 <__aeabi_dmul>
 8005e70:	f000 fb72 	bl	8006558 <floor>
 8005e74:	2200      	movs	r2, #0
 8005e76:	4b79      	ldr	r3, [pc, #484]	; (800605c <__kernel_rem_pio2+0x310>)
 8005e78:	f7fa fb26 	bl	80004c8 <__aeabi_dmul>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4620      	mov	r0, r4
 8005e82:	4629      	mov	r1, r5
 8005e84:	f7fa f968 	bl	8000158 <__aeabi_dsub>
 8005e88:	460d      	mov	r5, r1
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	f7fa fdb6 	bl	80009fc <__aeabi_d2iz>
 8005e90:	9005      	str	r0, [sp, #20]
 8005e92:	f7fa faaf 	bl	80003f4 <__aeabi_i2d>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f7fa f95b 	bl	8000158 <__aeabi_dsub>
 8005ea2:	f1ba 0f00 	cmp.w	sl, #0
 8005ea6:	4680      	mov	r8, r0
 8005ea8:	4689      	mov	r9, r1
 8005eaa:	dd6c      	ble.n	8005f86 <__kernel_rem_pio2+0x23a>
 8005eac:	1e7a      	subs	r2, r7, #1
 8005eae:	ab0c      	add	r3, sp, #48	; 0x30
 8005eb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005eb4:	f1ca 0118 	rsb	r1, sl, #24
 8005eb8:	9c05      	ldr	r4, [sp, #20]
 8005eba:	fa40 f301 	asr.w	r3, r0, r1
 8005ebe:	441c      	add	r4, r3
 8005ec0:	408b      	lsls	r3, r1
 8005ec2:	1ac0      	subs	r0, r0, r3
 8005ec4:	ab0c      	add	r3, sp, #48	; 0x30
 8005ec6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005eca:	f1ca 0317 	rsb	r3, sl, #23
 8005ece:	9405      	str	r4, [sp, #20]
 8005ed0:	fa40 f303 	asr.w	r3, r0, r3
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dd62      	ble.n	8005fa2 <__kernel_rem_pio2+0x256>
 8005edc:	2200      	movs	r2, #0
 8005ede:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005ee2:	4614      	mov	r4, r2
 8005ee4:	9b05      	ldr	r3, [sp, #20]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	4297      	cmp	r7, r2
 8005eec:	f300 809f 	bgt.w	800602e <__kernel_rem_pio2+0x2e2>
 8005ef0:	f1ba 0f00 	cmp.w	sl, #0
 8005ef4:	dd07      	ble.n	8005f06 <__kernel_rem_pio2+0x1ba>
 8005ef6:	f1ba 0f01 	cmp.w	sl, #1
 8005efa:	f000 80bb 	beq.w	8006074 <__kernel_rem_pio2+0x328>
 8005efe:	f1ba 0f02 	cmp.w	sl, #2
 8005f02:	f000 80c1 	beq.w	8006088 <__kernel_rem_pio2+0x33c>
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d14a      	bne.n	8005fa2 <__kernel_rem_pio2+0x256>
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	464b      	mov	r3, r9
 8005f10:	2000      	movs	r0, #0
 8005f12:	4953      	ldr	r1, [pc, #332]	; (8006060 <__kernel_rem_pio2+0x314>)
 8005f14:	f7fa f920 	bl	8000158 <__aeabi_dsub>
 8005f18:	4680      	mov	r8, r0
 8005f1a:	4689      	mov	r9, r1
 8005f1c:	2c00      	cmp	r4, #0
 8005f1e:	d040      	beq.n	8005fa2 <__kernel_rem_pio2+0x256>
 8005f20:	4652      	mov	r2, sl
 8005f22:	2000      	movs	r0, #0
 8005f24:	494e      	ldr	r1, [pc, #312]	; (8006060 <__kernel_rem_pio2+0x314>)
 8005f26:	f000 fb9b 	bl	8006660 <scalbn>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4640      	mov	r0, r8
 8005f30:	4649      	mov	r1, r9
 8005f32:	f7fa f911 	bl	8000158 <__aeabi_dsub>
 8005f36:	4680      	mov	r8, r0
 8005f38:	4689      	mov	r9, r1
 8005f3a:	e032      	b.n	8005fa2 <__kernel_rem_pio2+0x256>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4b49      	ldr	r3, [pc, #292]	; (8006064 <__kernel_rem_pio2+0x318>)
 8005f40:	4640      	mov	r0, r8
 8005f42:	4649      	mov	r1, r9
 8005f44:	f7fa fac0 	bl	80004c8 <__aeabi_dmul>
 8005f48:	f7fa fd58 	bl	80009fc <__aeabi_d2iz>
 8005f4c:	f7fa fa52 	bl	80003f4 <__aeabi_i2d>
 8005f50:	2200      	movs	r2, #0
 8005f52:	4b45      	ldr	r3, [pc, #276]	; (8006068 <__kernel_rem_pio2+0x31c>)
 8005f54:	e9cd 0100 	strd	r0, r1, [sp]
 8005f58:	f7fa fab6 	bl	80004c8 <__aeabi_dmul>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4640      	mov	r0, r8
 8005f62:	4649      	mov	r1, r9
 8005f64:	f7fa f8f8 	bl	8000158 <__aeabi_dsub>
 8005f68:	f7fa fd48 	bl	80009fc <__aeabi_d2iz>
 8005f6c:	ab0c      	add	r3, sp, #48	; 0x30
 8005f6e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005f72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005f76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f7a:	f7fa f8ef 	bl	800015c <__adddf3>
 8005f7e:	3601      	adds	r6, #1
 8005f80:	4680      	mov	r8, r0
 8005f82:	4689      	mov	r9, r1
 8005f84:	e765      	b.n	8005e52 <__kernel_rem_pio2+0x106>
 8005f86:	d105      	bne.n	8005f94 <__kernel_rem_pio2+0x248>
 8005f88:	1e7b      	subs	r3, r7, #1
 8005f8a:	aa0c      	add	r2, sp, #48	; 0x30
 8005f8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005f90:	15c3      	asrs	r3, r0, #23
 8005f92:	e79f      	b.n	8005ed4 <__kernel_rem_pio2+0x188>
 8005f94:	2200      	movs	r2, #0
 8005f96:	4b35      	ldr	r3, [pc, #212]	; (800606c <__kernel_rem_pio2+0x320>)
 8005f98:	f7fa fd1c 	bl	80009d4 <__aeabi_dcmpge>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d143      	bne.n	8006028 <__kernel_rem_pio2+0x2dc>
 8005fa0:	9000      	str	r0, [sp, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa fcf5 	bl	8000998 <__aeabi_dcmpeq>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	f000 80c3 	beq.w	800613a <__kernel_rem_pio2+0x3ee>
 8005fb4:	1e7c      	subs	r4, r7, #1
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	2200      	movs	r2, #0
 8005fba:	9902      	ldr	r1, [sp, #8]
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	da6a      	bge.n	8006096 <__kernel_rem_pio2+0x34a>
 8005fc0:	2a00      	cmp	r2, #0
 8005fc2:	f000 8084 	beq.w	80060ce <__kernel_rem_pio2+0x382>
 8005fc6:	ab0c      	add	r3, sp, #48	; 0x30
 8005fc8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005fcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80b0 	beq.w	8006136 <__kernel_rem_pio2+0x3ea>
 8005fd6:	4652      	mov	r2, sl
 8005fd8:	2000      	movs	r0, #0
 8005fda:	4921      	ldr	r1, [pc, #132]	; (8006060 <__kernel_rem_pio2+0x314>)
 8005fdc:	f000 fb40 	bl	8006660 <scalbn>
 8005fe0:	4625      	mov	r5, r4
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	460f      	mov	r7, r1
 8005fe6:	f04f 0a00 	mov.w	sl, #0
 8005fea:	00e3      	lsls	r3, r4, #3
 8005fec:	aa98      	add	r2, sp, #608	; 0x260
 8005fee:	eb02 0803 	add.w	r8, r2, r3
 8005ff2:	f8df b070 	ldr.w	fp, [pc, #112]	; 8006064 <__kernel_rem_pio2+0x318>
 8005ff6:	9306      	str	r3, [sp, #24]
 8005ff8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8005ffc:	2d00      	cmp	r5, #0
 8005ffe:	f280 80d2 	bge.w	80061a6 <__kernel_rem_pio2+0x45a>
 8006002:	2500      	movs	r5, #0
 8006004:	9a06      	ldr	r2, [sp, #24]
 8006006:	ab98      	add	r3, sp, #608	; 0x260
 8006008:	189e      	adds	r6, r3, r2
 800600a:	3ea8      	subs	r6, #168	; 0xa8
 800600c:	1b63      	subs	r3, r4, r5
 800600e:	2b00      	cmp	r3, #0
 8006010:	f2c0 80f9 	blt.w	8006206 <__kernel_rem_pio2+0x4ba>
 8006014:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8006070 <__kernel_rem_pio2+0x324>
 8006018:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800601c:	f04f 0a00 	mov.w	sl, #0
 8006020:	f04f 0b00 	mov.w	fp, #0
 8006024:	2700      	movs	r7, #0
 8006026:	e0e2      	b.n	80061ee <__kernel_rem_pio2+0x4a2>
 8006028:	2302      	movs	r3, #2
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	e756      	b.n	8005edc <__kernel_rem_pio2+0x190>
 800602e:	ab0c      	add	r3, sp, #48	; 0x30
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	b94c      	cbnz	r4, 800604a <__kernel_rem_pio2+0x2fe>
 8006036:	b12b      	cbz	r3, 8006044 <__kernel_rem_pio2+0x2f8>
 8006038:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800603c:	a80c      	add	r0, sp, #48	; 0x30
 800603e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006042:	2301      	movs	r3, #1
 8006044:	3201      	adds	r2, #1
 8006046:	461c      	mov	r4, r3
 8006048:	e74f      	b.n	8005eea <__kernel_rem_pio2+0x19e>
 800604a:	1acb      	subs	r3, r1, r3
 800604c:	a80c      	add	r0, sp, #48	; 0x30
 800604e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006052:	4623      	mov	r3, r4
 8006054:	e7f6      	b.n	8006044 <__kernel_rem_pio2+0x2f8>
 8006056:	bf00      	nop
 8006058:	080069c0 	.word	0x080069c0
 800605c:	40200000 	.word	0x40200000
 8006060:	3ff00000 	.word	0x3ff00000
 8006064:	3e700000 	.word	0x3e700000
 8006068:	41700000 	.word	0x41700000
 800606c:	3fe00000 	.word	0x3fe00000
 8006070:	08006978 	.word	0x08006978
 8006074:	1e7a      	subs	r2, r7, #1
 8006076:	ab0c      	add	r3, sp, #48	; 0x30
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006080:	a90c      	add	r1, sp, #48	; 0x30
 8006082:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006086:	e73e      	b.n	8005f06 <__kernel_rem_pio2+0x1ba>
 8006088:	1e7a      	subs	r2, r7, #1
 800608a:	ab0c      	add	r3, sp, #48	; 0x30
 800608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006090:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006094:	e7f4      	b.n	8006080 <__kernel_rem_pio2+0x334>
 8006096:	a90c      	add	r1, sp, #48	; 0x30
 8006098:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800609c:	3b01      	subs	r3, #1
 800609e:	430a      	orrs	r2, r1
 80060a0:	e78b      	b.n	8005fba <__kernel_rem_pio2+0x26e>
 80060a2:	3401      	adds	r4, #1
 80060a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d0fa      	beq.n	80060a2 <__kernel_rem_pio2+0x356>
 80060ac:	ab98      	add	r3, sp, #608	; 0x260
 80060ae:	449b      	add	fp, r3
 80060b0:	9b07      	ldr	r3, [sp, #28]
 80060b2:	1c7e      	adds	r6, r7, #1
 80060b4:	19dd      	adds	r5, r3, r7
 80060b6:	ab98      	add	r3, sp, #608	; 0x260
 80060b8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80060bc:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 80060c0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80060c4:	443c      	add	r4, r7
 80060c6:	42b4      	cmp	r4, r6
 80060c8:	da04      	bge.n	80060d4 <__kernel_rem_pio2+0x388>
 80060ca:	4627      	mov	r7, r4
 80060cc:	e6b1      	b.n	8005e32 <__kernel_rem_pio2+0xe6>
 80060ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060d0:	2401      	movs	r4, #1
 80060d2:	e7e7      	b.n	80060a4 <__kernel_rem_pio2+0x358>
 80060d4:	f105 0308 	add.w	r3, r5, #8
 80060d8:	9309      	str	r3, [sp, #36]	; 0x24
 80060da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060dc:	2700      	movs	r7, #0
 80060de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80060e2:	f7fa f987 	bl	80003f4 <__aeabi_i2d>
 80060e6:	f04f 0800 	mov.w	r8, #0
 80060ea:	f04f 0900 	mov.w	r9, #0
 80060ee:	9b08      	ldr	r3, [sp, #32]
 80060f0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80060f4:	3b08      	subs	r3, #8
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	f105 0310 	add.w	r3, r5, #16
 80060fc:	9305      	str	r3, [sp, #20]
 80060fe:	9b06      	ldr	r3, [sp, #24]
 8006100:	429f      	cmp	r7, r3
 8006102:	dd04      	ble.n	800610e <__kernel_rem_pio2+0x3c2>
 8006104:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8006108:	3601      	adds	r6, #1
 800610a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800610c:	e7db      	b.n	80060c6 <__kernel_rem_pio2+0x37a>
 800610e:	9905      	ldr	r1, [sp, #20]
 8006110:	9d00      	ldr	r5, [sp, #0]
 8006112:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006116:	9105      	str	r1, [sp, #20]
 8006118:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800611c:	9500      	str	r5, [sp, #0]
 800611e:	f7fa f9d3 	bl	80004c8 <__aeabi_dmul>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4640      	mov	r0, r8
 8006128:	4649      	mov	r1, r9
 800612a:	f7fa f817 	bl	800015c <__adddf3>
 800612e:	3701      	adds	r7, #1
 8006130:	4680      	mov	r8, r0
 8006132:	4689      	mov	r9, r1
 8006134:	e7e3      	b.n	80060fe <__kernel_rem_pio2+0x3b2>
 8006136:	3c01      	subs	r4, #1
 8006138:	e745      	b.n	8005fc6 <__kernel_rem_pio2+0x27a>
 800613a:	f1ca 0200 	rsb	r2, sl, #0
 800613e:	4640      	mov	r0, r8
 8006140:	4649      	mov	r1, r9
 8006142:	f000 fa8d 	bl	8006660 <scalbn>
 8006146:	2200      	movs	r2, #0
 8006148:	4ba3      	ldr	r3, [pc, #652]	; (80063d8 <__kernel_rem_pio2+0x68c>)
 800614a:	4604      	mov	r4, r0
 800614c:	460d      	mov	r5, r1
 800614e:	f7fa fc41 	bl	80009d4 <__aeabi_dcmpge>
 8006152:	b1f8      	cbz	r0, 8006194 <__kernel_rem_pio2+0x448>
 8006154:	2200      	movs	r2, #0
 8006156:	4ba1      	ldr	r3, [pc, #644]	; (80063dc <__kernel_rem_pio2+0x690>)
 8006158:	4620      	mov	r0, r4
 800615a:	4629      	mov	r1, r5
 800615c:	f7fa f9b4 	bl	80004c8 <__aeabi_dmul>
 8006160:	f7fa fc4c 	bl	80009fc <__aeabi_d2iz>
 8006164:	4606      	mov	r6, r0
 8006166:	f7fa f945 	bl	80003f4 <__aeabi_i2d>
 800616a:	2200      	movs	r2, #0
 800616c:	4b9a      	ldr	r3, [pc, #616]	; (80063d8 <__kernel_rem_pio2+0x68c>)
 800616e:	f7fa f9ab 	bl	80004c8 <__aeabi_dmul>
 8006172:	460b      	mov	r3, r1
 8006174:	4602      	mov	r2, r0
 8006176:	4629      	mov	r1, r5
 8006178:	4620      	mov	r0, r4
 800617a:	f7f9 ffed 	bl	8000158 <__aeabi_dsub>
 800617e:	f7fa fc3d 	bl	80009fc <__aeabi_d2iz>
 8006182:	1c7c      	adds	r4, r7, #1
 8006184:	ab0c      	add	r3, sp, #48	; 0x30
 8006186:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800618a:	f10a 0a18 	add.w	sl, sl, #24
 800618e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8006192:	e720      	b.n	8005fd6 <__kernel_rem_pio2+0x28a>
 8006194:	4620      	mov	r0, r4
 8006196:	4629      	mov	r1, r5
 8006198:	f7fa fc30 	bl	80009fc <__aeabi_d2iz>
 800619c:	ab0c      	add	r3, sp, #48	; 0x30
 800619e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80061a2:	463c      	mov	r4, r7
 80061a4:	e717      	b.n	8005fd6 <__kernel_rem_pio2+0x28a>
 80061a6:	ab0c      	add	r3, sp, #48	; 0x30
 80061a8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061ac:	f7fa f922 	bl	80003f4 <__aeabi_i2d>
 80061b0:	4632      	mov	r2, r6
 80061b2:	463b      	mov	r3, r7
 80061b4:	f7fa f988 	bl	80004c8 <__aeabi_dmul>
 80061b8:	4652      	mov	r2, sl
 80061ba:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80061be:	465b      	mov	r3, fp
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7fa f980 	bl	80004c8 <__aeabi_dmul>
 80061c8:	3d01      	subs	r5, #1
 80061ca:	4606      	mov	r6, r0
 80061cc:	460f      	mov	r7, r1
 80061ce:	e715      	b.n	8005ffc <__kernel_rem_pio2+0x2b0>
 80061d0:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80061d4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80061d8:	f7fa f976 	bl	80004c8 <__aeabi_dmul>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4650      	mov	r0, sl
 80061e2:	4659      	mov	r1, fp
 80061e4:	f7f9 ffba 	bl	800015c <__adddf3>
 80061e8:	4682      	mov	sl, r0
 80061ea:	468b      	mov	fp, r1
 80061ec:	3701      	adds	r7, #1
 80061ee:	9b02      	ldr	r3, [sp, #8]
 80061f0:	429f      	cmp	r7, r3
 80061f2:	dc01      	bgt.n	80061f8 <__kernel_rem_pio2+0x4ac>
 80061f4:	42bd      	cmp	r5, r7
 80061f6:	daeb      	bge.n	80061d0 <__kernel_rem_pio2+0x484>
 80061f8:	ab48      	add	r3, sp, #288	; 0x120
 80061fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80061fe:	e9c3 ab00 	strd	sl, fp, [r3]
 8006202:	3501      	adds	r5, #1
 8006204:	e702      	b.n	800600c <__kernel_rem_pio2+0x2c0>
 8006206:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006208:	2b03      	cmp	r3, #3
 800620a:	d86c      	bhi.n	80062e6 <__kernel_rem_pio2+0x59a>
 800620c:	e8df f003 	tbb	[pc, r3]
 8006210:	022f2f59 	.word	0x022f2f59
 8006214:	9a06      	ldr	r2, [sp, #24]
 8006216:	ab48      	add	r3, sp, #288	; 0x120
 8006218:	189d      	adds	r5, r3, r2
 800621a:	46aa      	mov	sl, r5
 800621c:	46a3      	mov	fp, r4
 800621e:	f1bb 0f00 	cmp.w	fp, #0
 8006222:	f300 8087 	bgt.w	8006334 <__kernel_rem_pio2+0x5e8>
 8006226:	46a2      	mov	sl, r4
 8006228:	f1ba 0f01 	cmp.w	sl, #1
 800622c:	f300 809f 	bgt.w	800636e <__kernel_rem_pio2+0x622>
 8006230:	2700      	movs	r7, #0
 8006232:	463e      	mov	r6, r7
 8006234:	9d06      	ldr	r5, [sp, #24]
 8006236:	ab48      	add	r3, sp, #288	; 0x120
 8006238:	3508      	adds	r5, #8
 800623a:	441d      	add	r5, r3
 800623c:	2c01      	cmp	r4, #1
 800623e:	f300 80b3 	bgt.w	80063a8 <__kernel_rem_pio2+0x65c>
 8006242:	9b00      	ldr	r3, [sp, #0]
 8006244:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8006246:	9849      	ldr	r0, [sp, #292]	; 0x124
 8006248:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800624a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800624c:	2b00      	cmp	r3, #0
 800624e:	f040 80b5 	bne.w	80063bc <__kernel_rem_pio2+0x670>
 8006252:	4603      	mov	r3, r0
 8006254:	462a      	mov	r2, r5
 8006256:	9804      	ldr	r0, [sp, #16]
 8006258:	e9c0 2300 	strd	r2, r3, [r0]
 800625c:	4622      	mov	r2, r4
 800625e:	460b      	mov	r3, r1
 8006260:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006264:	463a      	mov	r2, r7
 8006266:	4633      	mov	r3, r6
 8006268:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800626c:	e03b      	b.n	80062e6 <__kernel_rem_pio2+0x59a>
 800626e:	f04f 0c00 	mov.w	ip, #0
 8006272:	4626      	mov	r6, r4
 8006274:	4667      	mov	r7, ip
 8006276:	9d06      	ldr	r5, [sp, #24]
 8006278:	ab48      	add	r3, sp, #288	; 0x120
 800627a:	3508      	adds	r5, #8
 800627c:	441d      	add	r5, r3
 800627e:	2e00      	cmp	r6, #0
 8006280:	da42      	bge.n	8006308 <__kernel_rem_pio2+0x5bc>
 8006282:	9b00      	ldr	r3, [sp, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d049      	beq.n	800631c <__kernel_rem_pio2+0x5d0>
 8006288:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800628c:	4662      	mov	r2, ip
 800628e:	460b      	mov	r3, r1
 8006290:	9904      	ldr	r1, [sp, #16]
 8006292:	2601      	movs	r6, #1
 8006294:	e9c1 2300 	strd	r2, r3, [r1]
 8006298:	a948      	add	r1, sp, #288	; 0x120
 800629a:	463b      	mov	r3, r7
 800629c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062a0:	f7f9 ff5a 	bl	8000158 <__aeabi_dsub>
 80062a4:	4684      	mov	ip, r0
 80062a6:	460f      	mov	r7, r1
 80062a8:	ad48      	add	r5, sp, #288	; 0x120
 80062aa:	42b4      	cmp	r4, r6
 80062ac:	da38      	bge.n	8006320 <__kernel_rem_pio2+0x5d4>
 80062ae:	9b00      	ldr	r3, [sp, #0]
 80062b0:	b10b      	cbz	r3, 80062b6 <__kernel_rem_pio2+0x56a>
 80062b2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80062b6:	4662      	mov	r2, ip
 80062b8:	463b      	mov	r3, r7
 80062ba:	9904      	ldr	r1, [sp, #16]
 80062bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80062c0:	e011      	b.n	80062e6 <__kernel_rem_pio2+0x59a>
 80062c2:	2700      	movs	r7, #0
 80062c4:	463d      	mov	r5, r7
 80062c6:	9b06      	ldr	r3, [sp, #24]
 80062c8:	aa98      	add	r2, sp, #608	; 0x260
 80062ca:	4413      	add	r3, r2
 80062cc:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 80062d0:	2c00      	cmp	r4, #0
 80062d2:	da0f      	bge.n	80062f4 <__kernel_rem_pio2+0x5a8>
 80062d4:	9b00      	ldr	r3, [sp, #0]
 80062d6:	b10b      	cbz	r3, 80062dc <__kernel_rem_pio2+0x590>
 80062d8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80062dc:	463a      	mov	r2, r7
 80062de:	462b      	mov	r3, r5
 80062e0:	9904      	ldr	r1, [sp, #16]
 80062e2:	e9c1 2300 	strd	r2, r3, [r1]
 80062e6:	9b05      	ldr	r3, [sp, #20]
 80062e8:	f003 0007 	and.w	r0, r3, #7
 80062ec:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80062f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f4:	4638      	mov	r0, r7
 80062f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80062fa:	4629      	mov	r1, r5
 80062fc:	f7f9 ff2e 	bl	800015c <__adddf3>
 8006300:	3c01      	subs	r4, #1
 8006302:	4607      	mov	r7, r0
 8006304:	460d      	mov	r5, r1
 8006306:	e7e3      	b.n	80062d0 <__kernel_rem_pio2+0x584>
 8006308:	4660      	mov	r0, ip
 800630a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800630e:	4639      	mov	r1, r7
 8006310:	f7f9 ff24 	bl	800015c <__adddf3>
 8006314:	3e01      	subs	r6, #1
 8006316:	4684      	mov	ip, r0
 8006318:	460f      	mov	r7, r1
 800631a:	e7b0      	b.n	800627e <__kernel_rem_pio2+0x532>
 800631c:	4639      	mov	r1, r7
 800631e:	e7b5      	b.n	800628c <__kernel_rem_pio2+0x540>
 8006320:	4660      	mov	r0, ip
 8006322:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8006326:	4639      	mov	r1, r7
 8006328:	f7f9 ff18 	bl	800015c <__adddf3>
 800632c:	3601      	adds	r6, #1
 800632e:	4684      	mov	ip, r0
 8006330:	460f      	mov	r7, r1
 8006332:	e7ba      	b.n	80062aa <__kernel_rem_pio2+0x55e>
 8006334:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8006338:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800633c:	4640      	mov	r0, r8
 800633e:	4649      	mov	r1, r9
 8006340:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006344:	f7f9 ff0a 	bl	800015c <__adddf3>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4606      	mov	r6, r0
 800634e:	460f      	mov	r7, r1
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7f9 ff00 	bl	8000158 <__aeabi_dsub>
 8006358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800635c:	f7f9 fefe 	bl	800015c <__adddf3>
 8006360:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006364:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006368:	e9ca 6700 	strd	r6, r7, [sl]
 800636c:	e757      	b.n	800621e <__kernel_rem_pio2+0x4d2>
 800636e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8006372:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006376:	4630      	mov	r0, r6
 8006378:	4639      	mov	r1, r7
 800637a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800637e:	f7f9 feed 	bl	800015c <__adddf3>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4680      	mov	r8, r0
 8006388:	4689      	mov	r9, r1
 800638a:	4630      	mov	r0, r6
 800638c:	4639      	mov	r1, r7
 800638e:	f7f9 fee3 	bl	8000158 <__aeabi_dsub>
 8006392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006396:	f7f9 fee1 	bl	800015c <__adddf3>
 800639a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800639e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80063a2:	e9c5 8900 	strd	r8, r9, [r5]
 80063a6:	e73f      	b.n	8006228 <__kernel_rem_pio2+0x4dc>
 80063a8:	4638      	mov	r0, r7
 80063aa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80063ae:	4631      	mov	r1, r6
 80063b0:	f7f9 fed4 	bl	800015c <__adddf3>
 80063b4:	3c01      	subs	r4, #1
 80063b6:	4607      	mov	r7, r0
 80063b8:	460e      	mov	r6, r1
 80063ba:	e73f      	b.n	800623c <__kernel_rem_pio2+0x4f0>
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80063c2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80063c6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80063ca:	601d      	str	r5, [r3, #0]
 80063cc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80063d0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80063d4:	615e      	str	r6, [r3, #20]
 80063d6:	e786      	b.n	80062e6 <__kernel_rem_pio2+0x59a>
 80063d8:	41700000 	.word	0x41700000
 80063dc:	3e700000 	.word	0x3e700000

080063e0 <__kernel_sin>:
 80063e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	e9cd 2300 	strd	r2, r3, [sp]
 80063ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80063f2:	4682      	mov	sl, r0
 80063f4:	460c      	mov	r4, r1
 80063f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80063f8:	da03      	bge.n	8006402 <__kernel_sin+0x22>
 80063fa:	f7fa faff 	bl	80009fc <__aeabi_d2iz>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d050      	beq.n	80064a4 <__kernel_sin+0xc4>
 8006402:	4652      	mov	r2, sl
 8006404:	4623      	mov	r3, r4
 8006406:	4650      	mov	r0, sl
 8006408:	4621      	mov	r1, r4
 800640a:	f7fa f85d 	bl	80004c8 <__aeabi_dmul>
 800640e:	4606      	mov	r6, r0
 8006410:	460f      	mov	r7, r1
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4650      	mov	r0, sl
 8006418:	4621      	mov	r1, r4
 800641a:	f7fa f855 	bl	80004c8 <__aeabi_dmul>
 800641e:	a33e      	add	r3, pc, #248	; (adr r3, 8006518 <__kernel_sin+0x138>)
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	4680      	mov	r8, r0
 8006426:	4689      	mov	r9, r1
 8006428:	4630      	mov	r0, r6
 800642a:	4639      	mov	r1, r7
 800642c:	f7fa f84c 	bl	80004c8 <__aeabi_dmul>
 8006430:	a33b      	add	r3, pc, #236	; (adr r3, 8006520 <__kernel_sin+0x140>)
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f7f9 fe8f 	bl	8000158 <__aeabi_dsub>
 800643a:	4632      	mov	r2, r6
 800643c:	463b      	mov	r3, r7
 800643e:	f7fa f843 	bl	80004c8 <__aeabi_dmul>
 8006442:	a339      	add	r3, pc, #228	; (adr r3, 8006528 <__kernel_sin+0x148>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f7f9 fe88 	bl	800015c <__adddf3>
 800644c:	4632      	mov	r2, r6
 800644e:	463b      	mov	r3, r7
 8006450:	f7fa f83a 	bl	80004c8 <__aeabi_dmul>
 8006454:	a336      	add	r3, pc, #216	; (adr r3, 8006530 <__kernel_sin+0x150>)
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7f9 fe7d 	bl	8000158 <__aeabi_dsub>
 800645e:	4632      	mov	r2, r6
 8006460:	463b      	mov	r3, r7
 8006462:	f7fa f831 	bl	80004c8 <__aeabi_dmul>
 8006466:	a334      	add	r3, pc, #208	; (adr r3, 8006538 <__kernel_sin+0x158>)
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f7f9 fe76 	bl	800015c <__adddf3>
 8006470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006474:	b9dd      	cbnz	r5, 80064ae <__kernel_sin+0xce>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4630      	mov	r0, r6
 800647c:	4639      	mov	r1, r7
 800647e:	f7fa f823 	bl	80004c8 <__aeabi_dmul>
 8006482:	a32f      	add	r3, pc, #188	; (adr r3, 8006540 <__kernel_sin+0x160>)
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	f7f9 fe66 	bl	8000158 <__aeabi_dsub>
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	f7fa f81a 	bl	80004c8 <__aeabi_dmul>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4650      	mov	r0, sl
 800649a:	4621      	mov	r1, r4
 800649c:	f7f9 fe5e 	bl	800015c <__adddf3>
 80064a0:	4682      	mov	sl, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	4650      	mov	r0, sl
 80064a6:	4621      	mov	r1, r4
 80064a8:	b006      	add	sp, #24
 80064aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ae:	2200      	movs	r2, #0
 80064b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <__kernel_sin+0x168>)
 80064b6:	f7fa f807 	bl	80004c8 <__aeabi_dmul>
 80064ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7f9 ffff 	bl	80004c8 <__aeabi_dmul>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d2:	f7f9 fe41 	bl	8000158 <__aeabi_dsub>
 80064d6:	4632      	mov	r2, r6
 80064d8:	463b      	mov	r3, r7
 80064da:	f7f9 fff5 	bl	80004c8 <__aeabi_dmul>
 80064de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064e2:	f7f9 fe39 	bl	8000158 <__aeabi_dsub>
 80064e6:	a316      	add	r3, pc, #88	; (adr r3, 8006540 <__kernel_sin+0x160>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	4606      	mov	r6, r0
 80064ee:	460f      	mov	r7, r1
 80064f0:	4640      	mov	r0, r8
 80064f2:	4649      	mov	r1, r9
 80064f4:	f7f9 ffe8 	bl	80004c8 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7f9 fe2c 	bl	800015c <__adddf3>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4650      	mov	r0, sl
 800650a:	4621      	mov	r1, r4
 800650c:	f7f9 fe24 	bl	8000158 <__aeabi_dsub>
 8006510:	e7c6      	b.n	80064a0 <__kernel_sin+0xc0>
 8006512:	bf00      	nop
 8006514:	f3af 8000 	nop.w
 8006518:	5acfd57c 	.word	0x5acfd57c
 800651c:	3de5d93a 	.word	0x3de5d93a
 8006520:	8a2b9ceb 	.word	0x8a2b9ceb
 8006524:	3e5ae5e6 	.word	0x3e5ae5e6
 8006528:	57b1fe7d 	.word	0x57b1fe7d
 800652c:	3ec71de3 	.word	0x3ec71de3
 8006530:	19c161d5 	.word	0x19c161d5
 8006534:	3f2a01a0 	.word	0x3f2a01a0
 8006538:	1110f8a6 	.word	0x1110f8a6
 800653c:	3f811111 	.word	0x3f811111
 8006540:	55555549 	.word	0x55555549
 8006544:	3fc55555 	.word	0x3fc55555
 8006548:	3fe00000 	.word	0x3fe00000

0800654c <fabs>:
 800654c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006550:	4619      	mov	r1, r3
 8006552:	4770      	bx	lr
 8006554:	0000      	movs	r0, r0
	...

08006558 <floor>:
 8006558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800655c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006560:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006564:	2e13      	cmp	r6, #19
 8006566:	4607      	mov	r7, r0
 8006568:	460b      	mov	r3, r1
 800656a:	460c      	mov	r4, r1
 800656c:	4605      	mov	r5, r0
 800656e:	dc35      	bgt.n	80065dc <floor+0x84>
 8006570:	2e00      	cmp	r6, #0
 8006572:	da16      	bge.n	80065a2 <floor+0x4a>
 8006574:	a336      	add	r3, pc, #216	; (adr r3, 8006650 <floor+0xf8>)
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f7f9 fdef 	bl	800015c <__adddf3>
 800657e:	2200      	movs	r2, #0
 8006580:	2300      	movs	r3, #0
 8006582:	f7fa fa31 	bl	80009e8 <__aeabi_dcmpgt>
 8006586:	b148      	cbz	r0, 800659c <floor+0x44>
 8006588:	2c00      	cmp	r4, #0
 800658a:	da5b      	bge.n	8006644 <floor+0xec>
 800658c:	2500      	movs	r5, #0
 800658e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006592:	4a31      	ldr	r2, [pc, #196]	; (8006658 <floor+0x100>)
 8006594:	433b      	orrs	r3, r7
 8006596:	42ab      	cmp	r3, r5
 8006598:	bf18      	it	ne
 800659a:	4614      	movne	r4, r2
 800659c:	4623      	mov	r3, r4
 800659e:	462f      	mov	r7, r5
 80065a0:	e026      	b.n	80065f0 <floor+0x98>
 80065a2:	4a2e      	ldr	r2, [pc, #184]	; (800665c <floor+0x104>)
 80065a4:	fa42 f806 	asr.w	r8, r2, r6
 80065a8:	ea01 0208 	and.w	r2, r1, r8
 80065ac:	4302      	orrs	r2, r0
 80065ae:	d01f      	beq.n	80065f0 <floor+0x98>
 80065b0:	a327      	add	r3, pc, #156	; (adr r3, 8006650 <floor+0xf8>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7f9 fdd1 	bl	800015c <__adddf3>
 80065ba:	2200      	movs	r2, #0
 80065bc:	2300      	movs	r3, #0
 80065be:	f7fa fa13 	bl	80009e8 <__aeabi_dcmpgt>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d0ea      	beq.n	800659c <floor+0x44>
 80065c6:	2c00      	cmp	r4, #0
 80065c8:	bfbe      	ittt	lt
 80065ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80065ce:	fa43 f606 	asrlt.w	r6, r3, r6
 80065d2:	19a4      	addlt	r4, r4, r6
 80065d4:	ea24 0408 	bic.w	r4, r4, r8
 80065d8:	2500      	movs	r5, #0
 80065da:	e7df      	b.n	800659c <floor+0x44>
 80065dc:	2e33      	cmp	r6, #51	; 0x33
 80065de:	dd0b      	ble.n	80065f8 <floor+0xa0>
 80065e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80065e4:	d104      	bne.n	80065f0 <floor+0x98>
 80065e6:	4602      	mov	r2, r0
 80065e8:	f7f9 fdb8 	bl	800015c <__adddf3>
 80065ec:	4607      	mov	r7, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4638      	mov	r0, r7
 80065f2:	4619      	mov	r1, r3
 80065f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f8:	f04f 32ff 	mov.w	r2, #4294967295
 80065fc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006600:	fa22 f808 	lsr.w	r8, r2, r8
 8006604:	ea18 0f00 	tst.w	r8, r0
 8006608:	d0f2      	beq.n	80065f0 <floor+0x98>
 800660a:	a311      	add	r3, pc, #68	; (adr r3, 8006650 <floor+0xf8>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f7f9 fda4 	bl	800015c <__adddf3>
 8006614:	2200      	movs	r2, #0
 8006616:	2300      	movs	r3, #0
 8006618:	f7fa f9e6 	bl	80009e8 <__aeabi_dcmpgt>
 800661c:	2800      	cmp	r0, #0
 800661e:	d0bd      	beq.n	800659c <floor+0x44>
 8006620:	2c00      	cmp	r4, #0
 8006622:	da02      	bge.n	800662a <floor+0xd2>
 8006624:	2e14      	cmp	r6, #20
 8006626:	d103      	bne.n	8006630 <floor+0xd8>
 8006628:	3401      	adds	r4, #1
 800662a:	ea25 0508 	bic.w	r5, r5, r8
 800662e:	e7b5      	b.n	800659c <floor+0x44>
 8006630:	2301      	movs	r3, #1
 8006632:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006636:	fa03 f606 	lsl.w	r6, r3, r6
 800663a:	4435      	add	r5, r6
 800663c:	42bd      	cmp	r5, r7
 800663e:	bf38      	it	cc
 8006640:	18e4      	addcc	r4, r4, r3
 8006642:	e7f2      	b.n	800662a <floor+0xd2>
 8006644:	2500      	movs	r5, #0
 8006646:	462c      	mov	r4, r5
 8006648:	e7a8      	b.n	800659c <floor+0x44>
 800664a:	bf00      	nop
 800664c:	f3af 8000 	nop.w
 8006650:	8800759c 	.word	0x8800759c
 8006654:	7e37e43c 	.word	0x7e37e43c
 8006658:	bff00000 	.word	0xbff00000
 800665c:	000fffff 	.word	0x000fffff

08006660 <scalbn>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	4616      	mov	r6, r2
 8006664:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006668:	4604      	mov	r4, r0
 800666a:	460d      	mov	r5, r1
 800666c:	460b      	mov	r3, r1
 800666e:	b982      	cbnz	r2, 8006692 <scalbn+0x32>
 8006670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006674:	4303      	orrs	r3, r0
 8006676:	d034      	beq.n	80066e2 <scalbn+0x82>
 8006678:	4b2d      	ldr	r3, [pc, #180]	; (8006730 <scalbn+0xd0>)
 800667a:	2200      	movs	r2, #0
 800667c:	f7f9 ff24 	bl	80004c8 <__aeabi_dmul>
 8006680:	4b2c      	ldr	r3, [pc, #176]	; (8006734 <scalbn+0xd4>)
 8006682:	4604      	mov	r4, r0
 8006684:	429e      	cmp	r6, r3
 8006686:	460d      	mov	r5, r1
 8006688:	da0d      	bge.n	80066a6 <scalbn+0x46>
 800668a:	a325      	add	r3, pc, #148	; (adr r3, 8006720 <scalbn+0xc0>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	e01c      	b.n	80066cc <scalbn+0x6c>
 8006692:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006696:	42ba      	cmp	r2, r7
 8006698:	d109      	bne.n	80066ae <scalbn+0x4e>
 800669a:	4602      	mov	r2, r0
 800669c:	f7f9 fd5e 	bl	800015c <__adddf3>
 80066a0:	4604      	mov	r4, r0
 80066a2:	460d      	mov	r5, r1
 80066a4:	e01d      	b.n	80066e2 <scalbn+0x82>
 80066a6:	460b      	mov	r3, r1
 80066a8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066ac:	3a36      	subs	r2, #54	; 0x36
 80066ae:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066b2:	4432      	add	r2, r6
 80066b4:	428a      	cmp	r2, r1
 80066b6:	dd0c      	ble.n	80066d2 <scalbn+0x72>
 80066b8:	4622      	mov	r2, r4
 80066ba:	462b      	mov	r3, r5
 80066bc:	a11a      	add	r1, pc, #104	; (adr r1, 8006728 <scalbn+0xc8>)
 80066be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c2:	f000 f83b 	bl	800673c <copysign>
 80066c6:	a318      	add	r3, pc, #96	; (adr r3, 8006728 <scalbn+0xc8>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 fefc 	bl	80004c8 <__aeabi_dmul>
 80066d0:	e7e6      	b.n	80066a0 <scalbn+0x40>
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	dd08      	ble.n	80066e8 <scalbn+0x88>
 80066d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066de:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066e2:	4620      	mov	r0, r4
 80066e4:	4629      	mov	r1, r5
 80066e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066ec:	da0b      	bge.n	8006706 <scalbn+0xa6>
 80066ee:	f24c 3350 	movw	r3, #50000	; 0xc350
 80066f2:	429e      	cmp	r6, r3
 80066f4:	4622      	mov	r2, r4
 80066f6:	462b      	mov	r3, r5
 80066f8:	dce0      	bgt.n	80066bc <scalbn+0x5c>
 80066fa:	a109      	add	r1, pc, #36	; (adr r1, 8006720 <scalbn+0xc0>)
 80066fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006700:	f000 f81c 	bl	800673c <copysign>
 8006704:	e7c1      	b.n	800668a <scalbn+0x2a>
 8006706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800670a:	3236      	adds	r2, #54	; 0x36
 800670c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006710:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006714:	4620      	mov	r0, r4
 8006716:	4629      	mov	r1, r5
 8006718:	2200      	movs	r2, #0
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <scalbn+0xd8>)
 800671c:	e7d6      	b.n	80066cc <scalbn+0x6c>
 800671e:	bf00      	nop
 8006720:	c2f8f359 	.word	0xc2f8f359
 8006724:	01a56e1f 	.word	0x01a56e1f
 8006728:	8800759c 	.word	0x8800759c
 800672c:	7e37e43c 	.word	0x7e37e43c
 8006730:	43500000 	.word	0x43500000
 8006734:	ffff3cb0 	.word	0xffff3cb0
 8006738:	3c900000 	.word	0x3c900000

0800673c <copysign>:
 800673c:	b530      	push	{r4, r5, lr}
 800673e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006746:	ea42 0503 	orr.w	r5, r2, r3
 800674a:	4629      	mov	r1, r5
 800674c:	bd30      	pop	{r4, r5, pc}
	...

08006750 <_init>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

0800675c <_fini>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr
