
encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007660  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c98  08007770  08007770  00017770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009408  08009408  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08009408  08009408  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009408  08009408  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009408  08009408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  2000008c  0800949c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  0800949c  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f841  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026b3  00000000  00000000  0002f8f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de8  00000000  00000000  00031fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c90  00000000  00000000  00032d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ca0  00000000  00000000  00033a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d47d  00000000  00000000  0004d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c2df  00000000  00000000  0005ab45  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6e24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004398  00000000  00000000  000e6ea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007758 	.word	0x08007758

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08007758 	.word	0x08007758

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2iz>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30f      	bcc.n	8000fd2 <__aeabi_f2iz+0x2a>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d90d      	bls.n	8000fd8 <__aeabi_f2iz+0x30>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	bf18      	it	ne
 8000fce:	4240      	negne	r0, r0
 8000fd0:	4770      	bx	lr
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4770      	bx	lr
 8000fd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_f2iz+0x3a>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d105      	bne.n	8000fee <__aeabi_f2iz+0x46>
 8000fe2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe6:	bf08      	it	eq
 8000fe8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <Float2Byte>:
//target:Ŀ�굥��������
//buf:��д������
//beg:ָ��������ڼ���Ԫ�ؿ�ʼд��
//�����޷��� 
void Float2Byte(float *target,uint8_t *buf,uint8_t beg)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71fb      	strb	r3, [r7, #7]
    uint8_t *point;
    point = (uint8_t*)target;	  //�õ�float�ĵ�ַ
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	617b      	str	r3, [r7, #20]
    buf[beg]   = point[0];
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	701a      	strb	r2, [r3, #0]
    buf[beg+1] = point[1];
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	3301      	adds	r3, #1
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	4413      	add	r3, r2
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	7852      	ldrb	r2, [r2, #1]
 800101e:	701a      	strb	r2, [r3, #0]
    buf[beg+2] = point[2];
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	3302      	adds	r3, #2
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	4413      	add	r3, r2
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	7892      	ldrb	r2, [r2, #2]
 800102c:	701a      	strb	r2, [r3, #0]
    buf[beg+3] = point[3];
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	3303      	adds	r3, #3
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	78d2      	ldrb	r2, [r2, #3]
 800103a:	701a      	strb	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
	...

08001048 <DataScope_Get_Channel_Data>:
//����˵������������ͨ���ĵ����ȸ�������д�뷢�ͻ�����
//Data��ͨ������
//Channel��ѡ��ͨ����1-10��
//�����޷��� 
void DataScope_Get_Channel_Data(float Data,uint8_t Channel)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
	if ( (Channel > 10) || (Channel == 0) ) return;  //ͨ����������10�����0��ֱ����������ִ�к���
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	2b0a      	cmp	r3, #10
 8001058:	d865      	bhi.n	8001126 <DataScope_Get_Channel_Data+0xde>
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d062      	beq.n	8001126 <DataScope_Get_Channel_Data+0xde>
  else
  {
     switch (Channel){
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	3b01      	subs	r3, #1
 8001064:	2b09      	cmp	r3, #9
 8001066:	d85f      	bhi.n	8001128 <DataScope_Get_Channel_Data+0xe0>
 8001068:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <DataScope_Get_Channel_Data+0x28>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	08001099 	.word	0x08001099
 8001074:	080010a7 	.word	0x080010a7
 8001078:	080010b5 	.word	0x080010b5
 800107c:	080010c3 	.word	0x080010c3
 8001080:	080010d1 	.word	0x080010d1
 8001084:	080010df 	.word	0x080010df
 8001088:	080010ed 	.word	0x080010ed
 800108c:	080010fb 	.word	0x080010fb
 8001090:	08001109 	.word	0x08001109
 8001094:	08001117 	.word	0x08001117
		case 1:  Float2Byte(&Data,DataScope_OutPut_Buffer,1); break;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2201      	movs	r2, #1
 800109c:	4924      	ldr	r1, [pc, #144]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffa8 	bl	8000ff4 <Float2Byte>
 80010a4:	e040      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 2:  Float2Byte(&Data,DataScope_OutPut_Buffer,5); break;
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2205      	movs	r2, #5
 80010aa:	4921      	ldr	r1, [pc, #132]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffa1 	bl	8000ff4 <Float2Byte>
 80010b2:	e039      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 3:  Float2Byte(&Data,DataScope_OutPut_Buffer,9); break;
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2209      	movs	r2, #9
 80010b8:	491d      	ldr	r1, [pc, #116]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff9a 	bl	8000ff4 <Float2Byte>
 80010c0:	e032      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 4:  Float2Byte(&Data,DataScope_OutPut_Buffer,13); break;
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	220d      	movs	r2, #13
 80010c6:	491a      	ldr	r1, [pc, #104]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff93 	bl	8000ff4 <Float2Byte>
 80010ce:	e02b      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 5:  Float2Byte(&Data,DataScope_OutPut_Buffer,17); break;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2211      	movs	r2, #17
 80010d4:	4916      	ldr	r1, [pc, #88]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff8c 	bl	8000ff4 <Float2Byte>
 80010dc:	e024      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 6:  Float2Byte(&Data,DataScope_OutPut_Buffer,21); break;
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2215      	movs	r2, #21
 80010e2:	4913      	ldr	r1, [pc, #76]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff85 	bl	8000ff4 <Float2Byte>
 80010ea:	e01d      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 7:  Float2Byte(&Data,DataScope_OutPut_Buffer,25); break;
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2219      	movs	r2, #25
 80010f0:	490f      	ldr	r1, [pc, #60]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff7e 	bl	8000ff4 <Float2Byte>
 80010f8:	e016      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 8:  Float2Byte(&Data,DataScope_OutPut_Buffer,29); break;
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	221d      	movs	r2, #29
 80010fe:	490c      	ldr	r1, [pc, #48]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff77 	bl	8000ff4 <Float2Byte>
 8001106:	e00f      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 9:  Float2Byte(&Data,DataScope_OutPut_Buffer,33); break;
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2221      	movs	r2, #33	; 0x21
 800110c:	4908      	ldr	r1, [pc, #32]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff70 	bl	8000ff4 <Float2Byte>
 8001114:	e008      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
		case 10: Float2Byte(&Data,DataScope_OutPut_Buffer,37); break;
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2225      	movs	r2, #37	; 0x25
 800111a:	4905      	ldr	r1, [pc, #20]	; (8001130 <DataScope_Get_Channel_Data+0xe8>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff69 	bl	8000ff4 <Float2Byte>
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <DataScope_Get_Channel_Data+0xe0>
	if ( (Channel > 10) || (Channel == 0) ) return;  //ͨ����������10�����0��ֱ����������ִ�к���
 8001126:	bf00      	nop
     }
  }	 
}
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000a8 	.word	0x200000a8

08001134 <DataScope_Data_Generate>:
//����˵�������� DataScopeV1.0 ����ȷʶ���֡��ʽ
//Channel_Number����Ҫ���͵�ͨ������
//���ط��ͻ��������ݸ���
//����0��ʾ֡��ʽ����ʧ�� 
uint8_t DataScope_Data_Generate(uint8_t Channel_Number)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	if ( (Channel_Number > 10) || (Channel_Number == 0) ) { return 0; }  //ͨ����������10�����0��ֱ����������ִ�к���
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b0a      	cmp	r3, #10
 8001142:	d802      	bhi.n	800114a <DataScope_Data_Generate+0x16>
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <DataScope_Data_Generate+0x1a>
 800114a:	2300      	movs	r3, #0
 800114c:	e054      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
  else
  {	
	 DataScope_OutPut_Buffer[0] = '$';  //֡ͷ
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <DataScope_Data_Generate+0xd0>)
 8001150:	2224      	movs	r2, #36	; 0x24
 8001152:	701a      	strb	r2, [r3, #0]
		
	 switch(Channel_Number)   
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	3b01      	subs	r3, #1
 8001158:	2b09      	cmp	r3, #9
 800115a:	d84c      	bhi.n	80011f6 <DataScope_Data_Generate+0xc2>
 800115c:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <DataScope_Data_Generate+0x30>)
 800115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001162:	bf00      	nop
 8001164:	0800118d 	.word	0x0800118d
 8001168:	08001197 	.word	0x08001197
 800116c:	080011a1 	.word	0x080011a1
 8001170:	080011ab 	.word	0x080011ab
 8001174:	080011b5 	.word	0x080011b5
 8001178:	080011bf 	.word	0x080011bf
 800117c:	080011c9 	.word	0x080011c9
 8001180:	080011d3 	.word	0x080011d3
 8001184:	080011df 	.word	0x080011df
 8001188:	080011eb 	.word	0x080011eb
   { 
		 case 1:   DataScope_OutPut_Buffer[5]  =  5; return  6;  
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <DataScope_Data_Generate+0xd0>)
 800118e:	2205      	movs	r2, #5
 8001190:	715a      	strb	r2, [r3, #5]
 8001192:	2306      	movs	r3, #6
 8001194:	e030      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 2:   DataScope_OutPut_Buffer[9]  =  9; return 10;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <DataScope_Data_Generate+0xd0>)
 8001198:	2209      	movs	r2, #9
 800119a:	725a      	strb	r2, [r3, #9]
 800119c:	230a      	movs	r3, #10
 800119e:	e02b      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 3:   DataScope_OutPut_Buffer[13] = 13; return 14; 
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011a2:	220d      	movs	r2, #13
 80011a4:	735a      	strb	r2, [r3, #13]
 80011a6:	230e      	movs	r3, #14
 80011a8:	e026      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 4:   DataScope_OutPut_Buffer[17] = 17; return 18;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011ac:	2211      	movs	r2, #17
 80011ae:	745a      	strb	r2, [r3, #17]
 80011b0:	2312      	movs	r3, #18
 80011b2:	e021      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 5:   DataScope_OutPut_Buffer[21] = 21; return 22;  
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011b6:	2215      	movs	r2, #21
 80011b8:	755a      	strb	r2, [r3, #21]
 80011ba:	2316      	movs	r3, #22
 80011bc:	e01c      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 6:   DataScope_OutPut_Buffer[25] = 25; return 26;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011c0:	2219      	movs	r2, #25
 80011c2:	765a      	strb	r2, [r3, #25]
 80011c4:	231a      	movs	r3, #26
 80011c6:	e017      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 7:   DataScope_OutPut_Buffer[29] = 29; return 30; 
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011ca:	221d      	movs	r2, #29
 80011cc:	775a      	strb	r2, [r3, #29]
 80011ce:	231e      	movs	r3, #30
 80011d0:	e012      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 8:   DataScope_OutPut_Buffer[33] = 33; return 34; 
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011d4:	2221      	movs	r2, #33	; 0x21
 80011d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80011da:	2322      	movs	r3, #34	; 0x22
 80011dc:	e00c      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 9:   DataScope_OutPut_Buffer[37] = 37; return 38;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011e0:	2225      	movs	r2, #37	; 0x25
 80011e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80011e6:	2326      	movs	r3, #38	; 0x26
 80011e8:	e006      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
		 case 10:  DataScope_OutPut_Buffer[41] = 41; return 42;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <DataScope_Data_Generate+0xd0>)
 80011ec:	2229      	movs	r2, #41	; 0x29
 80011ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80011f2:	232a      	movs	r3, #42	; 0x2a
 80011f4:	e000      	b.n	80011f8 <DataScope_Data_Generate+0xc4>
   }	 
  }
	return 0;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200000a8 	.word	0x200000a8

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x38>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <MX_DMA_Init+0x38>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x38>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200e      	movs	r0, #14
 800122c:	f001 fbcf 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001230:	200e      	movs	r0, #14
 8001232:	f001 fbe8 	bl	8002a06 <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_GPIO_Init+0xb4>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <MX_GPIO_Init+0xb4>)
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_GPIO_Init+0xb4>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_GPIO_Init+0xb4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <MX_GPIO_Init+0xb4>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_GPIO_Init+0xb4>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_GPIO_Init+0xb4>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <MX_GPIO_Init+0xb4>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_GPIO_Init+0xb4>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2103      	movs	r1, #3
 80012a4:	4815      	ldr	r0, [pc, #84]	; (80012fc <MX_GPIO_Init+0xb8>)
 80012a6:	f001 ff87 	bl	80031b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_GPIO_Init+0xbc>)
 80012b2:	f001 ff81 	bl	80031b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b6:	2303      	movs	r3, #3
 80012b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	4619      	mov	r1, r3
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_GPIO_Init+0xb8>)
 80012ce:	f001 fe19 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 80012d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_GPIO_Init+0xbc>)
 80012ec:	f001 fe0a 	bl	8002f04 <HAL_GPIO_Init>

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010800 	.word	0x40010800
 8001300:	40010c00 	.word	0x40010c00

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130a:	f001 fa05 	bl	8002718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130e:	f000 f83d 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001312:	f7ff ff97 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 8001316:	f7ff ff77 	bl	8001208 <MX_DMA_Init>
  MX_TIM1_Init();
 800131a:	f000 fa6d 	bl	80017f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800131e:	f000 fb17 	bl	8001950 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001322:	f000 fb61 	bl	80019e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001326:	f000 fc65 	bl	8001bf4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800132a:	f000 fc8d 	bl	8001c48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <main+0x70>)
 8001330:	f001 f92c 	bl	800258c <RetargetInit>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001334:	2100      	movs	r1, #0
 8001336:	4810      	ldr	r0, [pc, #64]	; (8001378 <main+0x74>)
 8001338:	f002 fc92 	bl	8003c60 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <main+0x78>)
 800133e:	f002 fbe5 	bl	8003b0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001342:	213c      	movs	r1, #60	; 0x3c
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <main+0x7c>)
 8001346:	f002 fdcf 	bl	8003ee8 <HAL_TIM_Encoder_Start>

  HAL_UART_Receive_IT(&huart2, RxBuffer, 4);
 800134a:	2204      	movs	r2, #4
 800134c:	490d      	ldr	r1, [pc, #52]	; (8001384 <main+0x80>)
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <main+0x70>)
 8001350:	f003 fddd 	bl	8004f0e <HAL_UART_Receive_IT>

  OLED_Init();
 8001354:	f001 f89c 	bl	8002490 <OLED_Init>
  OLED_Clear();
 8001358:	f000 ff1e 	bl	8002198 <OLED_Clear>
  OLED_ShowString(0, 0, dat,8, 1);
 800135c:	2301      	movs	r3, #1
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2308      	movs	r3, #8
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <main+0x84>)
 8001364:	2100      	movs	r1, #0
 8001366:	2000      	movs	r0, #0
 8001368:	f001 f860 	bl	800242c <OLED_ShowString>
  OLED_Refresh();
 800136c:	f000 fece 	bl	800210c <OLED_Refresh>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001370:	e7fe      	b.n	8001370 <main+0x6c>
 8001372:	bf00      	nop
 8001374:	2000025c 	.word	0x2000025c
 8001378:	20000148 	.word	0x20000148
 800137c:	20000190 	.word	0x20000190
 8001380:	20000100 	.word	0x20000100
 8001384:	200000f8 	.word	0x200000f8
 8001388:	2000000c 	.word	0x2000000c

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	; 0x40
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	2228      	movs	r2, #40	; 0x28
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fa44 	bl	8005828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c0:	2302      	movs	r3, #2
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 ff07 	bl	80031e8 <HAL_RCC_OscConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013e0:	f000 f944 	bl	800166c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e4:	230f      	movs	r3, #15
 80013e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e8:	2302      	movs	r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2102      	movs	r1, #2
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 f972 	bl	80036e8 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800140a:	f000 f92f 	bl	800166c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800140e:	f002 fa55 	bl	80038bc <HAL_RCC_EnableCSS>
}
 8001412:	bf00      	nop
 8001414:	3740      	adds	r7, #64	; 0x40
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	0000      	movs	r0, r0
 800141c:	0000      	movs	r0, r0
	...

08001420 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b087      	sub	sp, #28
 8001424:	af02      	add	r7, sp, #8
 8001426:	6078      	str	r0, [r7, #4]
	int moto;
	if(htim==(&htim2)){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a69      	ldr	r2, [pc, #420]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	f040 80bd 	bne.w	80015ac <HAL_TIM_PeriodElapsedCallback+0x18c>
		cnt = cnt + 0.0314;
 8001432:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe ffee 	bl	8000418 <__aeabi_f2d>
 800143c:	a35e      	add	r3, pc, #376	; (adr r3, 80015b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7fe fe8b 	bl	800015c <__adddf3>
 8001446:	4603      	mov	r3, r0
 8001448:	460c      	mov	r4, r1
 800144a:	4618      	mov	r0, r3
 800144c:	4621      	mov	r1, r4
 800144e:	f7ff fafd 	bl	8000a4c <__aeabi_d2f>
 8001452:	4602      	mov	r2, r0
 8001454:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001456:	601a      	str	r2, [r3, #0]
		if(cnt>6.28)cnt = 0;
 8001458:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe ffdb 	bl	8000418 <__aeabi_f2d>
 8001462:	a357      	add	r3, pc, #348	; (adr r3, 80015c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff fabe 	bl	80009e8 <__aeabi_dcmpgt>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_TIM_PeriodElapsedCallback+0x5a>
 8001472:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
		Target_velocity = DC + 500*sin(cnt);
 800147a:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ffca 	bl	8000418 <__aeabi_f2d>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	4618      	mov	r0, r3
 800148a:	4621      	mov	r1, r4
 800148c:	f005 f978 	bl	8006780 <sin>
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001496:	f7ff f817 	bl	80004c8 <__aeabi_dmul>
 800149a:	4603      	mov	r3, r0
 800149c:	460c      	mov	r4, r1
 800149e:	4618      	mov	r0, r3
 80014a0:	4621      	mov	r1, r4
 80014a2:	a349      	add	r3, pc, #292	; (adr r3, 80015c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7fe fe58 	bl	800015c <__adddf3>
 80014ac:	4603      	mov	r3, r0
 80014ae:	460c      	mov	r4, r1
 80014b0:	4618      	mov	r0, r3
 80014b2:	4621      	mov	r1, r4
 80014b4:	f7ff faa2 	bl	80009fc <__aeabi_d2iz>
 80014b8:	4602      	mov	r2, r0
 80014ba:	4b48      	ldr	r3, [pc, #288]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014bc:	601a      	str	r2, [r3, #0]
		DirectionA = (int)(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3));
 80014be:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80014d6:	601a      	str	r2, [r3, #0]
		CaptureNumberA = (short)(__HAL_TIM_GetCounter(&htim3));
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	b21b      	sxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80014e4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3,0);
 80014e6:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24

		moto=Incremental_PI(CaptureNumberA,Target_velocity,Kp,Ki);
 80014ee:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f000 fcf9 	bl	8001ef4 <Incremental_PI>
 8001502:	60f8      	str	r0, [r7, #12]
		Set_Pwm(moto);
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 fcb5 	bl	8001e74 <Set_Pwm>

		DataScope_Get_Channel_Data((float)(CaptureNumberA/100),1);
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a39      	ldr	r2, [pc, #228]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001510:	fb82 1203 	smull	r1, r2, r2, r3
 8001514:	1152      	asrs	r2, r2, #5
 8001516:	17db      	asrs	r3, r3, #31
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fba0 	bl	8000c60 <__aeabi_i2f>
 8001520:	4603      	mov	r3, r0
 8001522:	2101      	movs	r1, #1
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fd8f 	bl	8001048 <DataScope_Get_Channel_Data>
		DataScope_Get_Channel_Data((float)(Target_velocity/100),2);
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001530:	fb82 1203 	smull	r1, r2, r2, r3
 8001534:	1152      	asrs	r2, r2, #5
 8001536:	17db      	asrs	r3, r3, #31
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fb90 	bl	8000c60 <__aeabi_i2f>
 8001540:	4603      	mov	r3, r0
 8001542:	2102      	movs	r1, #2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fd7f 	bl	8001048 <DataScope_Get_Channel_Data>
		Send_Count = DataScope_Data_Generate(4);
 800154a:	2004      	movs	r0, #4
 800154c:	f7ff fdf2 	bl	8001134 <DataScope_Data_Generate>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001556:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1, DataScope_OutPut_Buffer, Send_Count);
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4927      	ldr	r1, [pc, #156]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001560:	4827      	ldr	r0, [pc, #156]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001562:	f003 fd29 	bl	8004fb8 <HAL_UART_Transmit_DMA>
		printf("%d %d kp:%d ki:%d\r\n",CaptureNumberA/100,Target_velocity/100,(int)Kp,(int)Ki);
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800156c:	fb82 1203 	smull	r1, r2, r2, r3
 8001570:	1152      	asrs	r2, r2, #5
 8001572:	17db      	asrs	r3, r3, #31
 8001574:	1ad4      	subs	r4, r2, r3
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	1152      	asrs	r2, r2, #5
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad5      	subs	r5, r2, r3
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd0c 	bl	8000fa8 <__aeabi_f2iz>
 8001590:	4606      	mov	r6, r0
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fd06 	bl	8000fa8 <__aeabi_f2iz>
 800159c:	4603      	mov	r3, r0
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4633      	mov	r3, r6
 80015a2:	462a      	mov	r2, r5
 80015a4:	4621      	mov	r1, r4
 80015a6:	4817      	ldr	r0, [pc, #92]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80015a8:	f004 f946 	bl	8005838 <iprintf>
		}*/
	}



}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b4:	f3af 8000 	nop.w
 80015b8:	2a305532 	.word	0x2a305532
 80015bc:	3fa013a9 	.word	0x3fa013a9
 80015c0:	51eb851f 	.word	0x51eb851f
 80015c4:	40191eb8 	.word	0x40191eb8
 80015c8:	00000000 	.word	0x00000000
 80015cc:	40977000 	.word	0x40977000
 80015d0:	20000190 	.word	0x20000190
 80015d4:	200000d4 	.word	0x200000d4
 80015d8:	407f4000 	.word	0x407f4000
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000100 	.word	0x20000100
 80015e4:	200000f0 	.word	0x200000f0
 80015e8:	200000fc 	.word	0x200000fc
 80015ec:	20000004 	.word	0x20000004
 80015f0:	20000008 	.word	0x20000008
 80015f4:	51eb851f 	.word	0x51eb851f
 80015f8:	200000f4 	.word	0x200000f4
 80015fc:	200000a8 	.word	0x200000a8
 8001600:	2000021c 	.word	0x2000021c
 8001604:	08007770 	.word	0x08007770

08001608 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	if(huart==(&huart2)){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_UART_RxCpltCallback+0x54>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d11c      	bne.n	8001652 <HAL_UART_RxCpltCallback+0x4a>

		if((RxBuffer[0]==0xfe)&&(RxBuffer[3]==0xff)){
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_RxCpltCallback+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2bfe      	cmp	r3, #254	; 0xfe
 800161e:	d113      	bne.n	8001648 <HAL_UART_RxCpltCallback+0x40>
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_UART_RxCpltCallback+0x58>)
 8001622:	78db      	ldrb	r3, [r3, #3]
 8001624:	2bff      	cmp	r3, #255	; 0xff
 8001626:	d10f      	bne.n	8001648 <HAL_UART_RxCpltCallback+0x40>
			Kp = RxBuffer[1];
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_UART_RxCpltCallback+0x58>)
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fb13 	bl	8000c58 <__aeabi_ui2f>
 8001632:	4602      	mov	r2, r0
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_UART_RxCpltCallback+0x5c>)
 8001636:	601a      	str	r2, [r3, #0]
			Ki = RxBuffer[2];
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_UART_RxCpltCallback+0x58>)
 800163a:	789b      	ldrb	r3, [r3, #2]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fb0b 	bl	8000c58 <__aeabi_ui2f>
 8001642:	4602      	mov	r2, r0
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_UART_RxCpltCallback+0x60>)
 8001646:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, RxBuffer, 4);
 8001648:	2204      	movs	r2, #4
 800164a:	4905      	ldr	r1, [pc, #20]	; (8001660 <HAL_UART_RxCpltCallback+0x58>)
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <HAL_UART_RxCpltCallback+0x54>)
 800164e:	f003 fc5e 	bl	8004f0e <HAL_UART_Receive_IT>
	}
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000025c 	.word	0x2000025c
 8001660:	200000f8 	.word	0x200000f8
 8001664:	20000004 	.word	0x20000004
 8001668:	20000008 	.word	0x20000008

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_MspInit+0x5c>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <HAL_MspInit+0x5c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6193      	str	r3, [r2, #24]
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_MspInit+0x5c>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x5c>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_MspInit+0x5c>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x5c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_MspInit+0x60>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_MspInit+0x60>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80016e0:	f002 f98c 	bl	80039fc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <HardFault_Handler+0x4>

080016ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <MemManage_Handler+0x4>

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <BusFault_Handler+0x4>

080016fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <UsageFault_Handler+0x4>

08001700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f001 f83c 	bl	80027a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <DMA1_Channel4_IRQHandler+0x10>)
 8001736:	f001 fab1 	bl	8002c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200001d8 	.word	0x200001d8

08001744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <TIM2_IRQHandler+0x10>)
 800174a:	f002 fc5a 	bl	8004002 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000190 	.word	0x20000190

08001758 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <TIM3_IRQHandler+0x10>)
 800175e:	f002 fc50 	bl	8004002 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000100 	.word	0x20000100

0800176c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <USART2_IRQHandler+0x10>)
 8001772:	f003 fc8d 	bl	8005090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000025c 	.word	0x2000025c

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f004 f810 	bl	80057d4 <__errno>
 80017b4:	4602      	mov	r2, r0
 80017b6:	230c      	movs	r3, #12
 80017b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20005000 	.word	0x20005000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	200000d8 	.word	0x200000d8
 80017e8:	20000728 	.word	0x20000728

080017ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b096      	sub	sp, #88	; 0x58
 80017fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2220      	movs	r2, #32
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f003 fff9 	bl	8005828 <memset>

  htim1.Instance = TIM1;
 8001836:	4b44      	ldr	r3, [pc, #272]	; (8001948 <MX_TIM1_Init+0x150>)
 8001838:	4a44      	ldr	r2, [pc, #272]	; (800194c <MX_TIM1_Init+0x154>)
 800183a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <MX_TIM1_Init+0x150>)
 800183e:	2200      	movs	r2, #0
 8001840:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <MX_TIM1_Init+0x150>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001848:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <MX_TIM1_Init+0x150>)
 800184a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800184e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <MX_TIM1_Init+0x150>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001856:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <MX_TIM1_Init+0x150>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <MX_TIM1_Init+0x150>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001862:	4839      	ldr	r0, [pc, #228]	; (8001948 <MX_TIM1_Init+0x150>)
 8001864:	f002 f902 	bl	8003a6c <HAL_TIM_Base_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800186e:	f7ff fefd 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001876:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001878:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800187c:	4619      	mov	r1, r3
 800187e:	4832      	ldr	r0, [pc, #200]	; (8001948 <MX_TIM1_Init+0x150>)
 8001880:	f002 fd86 	bl	8004390 <HAL_TIM_ConfigClockSource>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800188a:	f7ff feef 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800188e:	482e      	ldr	r0, [pc, #184]	; (8001948 <MX_TIM1_Init+0x150>)
 8001890:	f002 f98e 	bl	8003bb0 <HAL_TIM_PWM_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800189a:	f7ff fee7 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018aa:	4619      	mov	r1, r3
 80018ac:	4826      	ldr	r0, [pc, #152]	; (8001948 <MX_TIM1_Init+0x150>)
 80018ae:	f003 f8ef 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018b8:	f7ff fed8 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018bc:	2360      	movs	r3, #96	; 0x60
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	2200      	movs	r2, #0
 80018de:	4619      	mov	r1, r3
 80018e0:	4819      	ldr	r0, [pc, #100]	; (8001948 <MX_TIM1_Init+0x150>)
 80018e2:	f002 fc97 	bl	8004214 <HAL_TIM_PWM_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018ec:	f7ff febe 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	2204      	movs	r2, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4813      	ldr	r0, [pc, #76]	; (8001948 <MX_TIM1_Init+0x150>)
 80018fa:	f002 fc8b 	bl	8004214 <HAL_TIM_PWM_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001904:	f7ff feb2 	bl	800166c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800191c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001920:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <MX_TIM1_Init+0x150>)
 800192c:	f003 f90e 	bl	8004b4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001936:	f7ff fe99 	bl	800166c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <MX_TIM1_Init+0x150>)
 800193c:	f000 f926 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 8001940:	bf00      	nop
 8001942:	3758      	adds	r7, #88	; 0x58
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000148 	.word	0x20000148
 800194c:	40012c00 	.word	0x40012c00

08001950 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	463b      	mov	r3, r7
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <MX_TIM2_Init+0x94>)
 800196e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <MX_TIM2_Init+0x94>)
 8001976:	2247      	movs	r2, #71	; 0x47
 8001978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_TIM2_Init+0x94>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <MX_TIM2_Init+0x94>)
 8001982:	f242 720f 	movw	r2, #9999	; 0x270f
 8001986:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <MX_TIM2_Init+0x94>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <MX_TIM2_Init+0x94>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001994:	4813      	ldr	r0, [pc, #76]	; (80019e4 <MX_TIM2_Init+0x94>)
 8001996:	f002 f869 	bl	8003a6c <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019a0:	f7ff fe64 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	4619      	mov	r1, r3
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <MX_TIM2_Init+0x94>)
 80019b2:	f002 fced 	bl	8004390 <HAL_TIM_ConfigClockSource>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019bc:	f7ff fe56 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c8:	463b      	mov	r3, r7
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_TIM2_Init+0x94>)
 80019ce:	f003 f85f 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019d8:	f7ff fe48 	bl	800166c <Error_Handler>
  }

}
 80019dc:	bf00      	nop
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000190 	.word	0x20000190

080019e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 ff16 	bl	8005828 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <MX_TIM3_Init+0xa0>)
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <MX_TIM3_Init+0xa4>)
 8001a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <MX_TIM3_Init+0xa0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_TIM3_Init+0xa0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <MX_TIM3_Init+0xa0>)
 8001a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_TIM3_Init+0xa0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_TIM3_Init+0xa0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a42:	2301      	movs	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4619      	mov	r1, r3
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_TIM3_Init+0xa0>)
 8001a56:	f002 f9a5 	bl	8003da4 <HAL_TIM_Encoder_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a60:	f7ff fe04 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_TIM3_Init+0xa0>)
 8001a72:	f003 f80d 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a7c:	f7ff fdf6 	bl	800166c <Error_Handler>
  }

}
 8001a80:	bf00      	nop
 8001a82:	3730      	adds	r7, #48	; 0x30
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000100 	.word	0x20000100
 8001a8c:	40000400 	.word	0x40000400

08001a90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <HAL_TIM_Base_MspInit+0x68>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10c      	bne.n	8001abc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_TIM_Base_MspInit+0x6c>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <HAL_TIM_Base_MspInit+0x6c>)
 8001aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aac:	6193      	str	r3, [r2, #24]
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_TIM_Base_MspInit+0x6c>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001aba:	e018      	b.n	8001aee <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac4:	d113      	bne.n	8001aee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_TIM_Base_MspInit+0x6c>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_TIM_Base_MspInit+0x6c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_TIM_Base_MspInit+0x6c>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	201c      	movs	r0, #28
 8001ae4:	f000 ff73 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae8:	201c      	movs	r0, #28
 8001aea:	f000 ff8c 	bl	8002a06 <HAL_NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40012c00 	.word	0x40012c00
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d12b      	bne.n	8001b78 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	61d3      	str	r3, [r2, #28]
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b50:	23c0      	movs	r3, #192	; 0xc0
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <HAL_TIM_Encoder_MspInit+0x88>)
 8001b64:	f001 f9ce 	bl	8002f04 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	201d      	movs	r0, #29
 8001b6e:	f000 ff2e 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b72:	201d      	movs	r0, #29
 8001b74:	f000 ff47 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010800 	.word	0x40010800

08001b8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_TIM_MspPostInit+0x5c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d118      	bne.n	8001bde <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_TIM_MspPostInit+0x60>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_TIM_MspPostInit+0x60>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_TIM_MspPostInit+0x60>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_TIM_MspPostInit+0x64>)
 8001bda:	f001 f993 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010800 	.word	0x40010800

08001bf4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <MX_USART1_UART_Init+0x50>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	f002 fff1 	bl	8004c12 <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c36:	f7ff fd19 	bl	800166c <Error_Handler>
  }

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000021c 	.word	0x2000021c
 8001c44:	40013800 	.word	0x40013800

08001c48 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <MX_USART2_UART_Init+0x50>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_USART2_UART_Init+0x4c>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_USART2_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_USART2_UART_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_USART2_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_USART2_UART_Init+0x4c>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_USART2_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_USART2_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_USART2_UART_Init+0x4c>)
 8001c80:	f002 ffc7 	bl	8004c12 <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c8a:	f7ff fcef 	bl	800166c <Error_Handler>
  }

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000025c 	.word	0x2000025c
 8001c98:	40004400 	.word	0x40004400

08001c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a54      	ldr	r2, [pc, #336]	; (8001e08 <HAL_UART_MspInit+0x16c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d164      	bne.n	8001d86 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cec:	2340      	movs	r3, #64	; 0x40
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4844      	ldr	r0, [pc, #272]	; (8001e10 <HAL_UART_MspInit+0x174>)
 8001d00:	f001 f900 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	483e      	ldr	r0, [pc, #248]	; (8001e10 <HAL_UART_MspInit+0x174>)
 8001d18:	f001 f8f4 	bl	8002f04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_UART_MspInit+0x178>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d32:	4a38      	ldr	r2, [pc, #224]	; (8001e14 <HAL_UART_MspInit+0x178>)
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d3a:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_UART_MspInit+0x180>)
 8001d3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d3e:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d40:	2210      	movs	r2, #16
 8001d42:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d50:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d56:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d5c:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d68:	482b      	ldr	r0, [pc, #172]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d6a:	f000 fe67 	bl	8002a3c <HAL_DMA_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8001d74:	f7ff fc7a 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d7e:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <HAL_UART_MspInit+0x17c>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d84:	e03c      	b.n	8001e00 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a25      	ldr	r2, [pc, #148]	; (8001e20 <HAL_UART_MspInit+0x184>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d137      	bne.n	8001e00 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9a:	61d3      	str	r3, [r2, #28]
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_UART_MspInit+0x170>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4814      	ldr	r0, [pc, #80]	; (8001e24 <HAL_UART_MspInit+0x188>)
 8001dd4:	f001 f896 	bl	8002f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	480e      	ldr	r0, [pc, #56]	; (8001e24 <HAL_UART_MspInit+0x188>)
 8001dec:	f001 f88a 	bl	8002f04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2101      	movs	r1, #1
 8001df4:	2026      	movs	r0, #38	; 0x26
 8001df6:	f000 fdea 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dfa:	2026      	movs	r0, #38	; 0x26
 8001dfc:	f000 fe03 	bl	8002a06 <HAL_NVIC_EnableIRQ>
}
 8001e00:	bf00      	nop
 8001e02:	3730      	adds	r7, #48	; 0x30
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	40010000 	.word	0x40010000
 8001e18:	200001d8 	.word	0x200001d8
 8001e1c:	40020044 	.word	0x40020044
 8001e20:	40004400 	.word	0x40004400
 8001e24:	40010800 	.word	0x40010800

08001e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e2a:	e003      	b.n	8001e34 <LoopCopyDataInit>

08001e2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e32:	3104      	adds	r1, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e34:	480a      	ldr	r0, [pc, #40]	; (8001e60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e3c:	d3f6      	bcc.n	8001e2c <CopyDataInit>
  ldr r2, =_sbss
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e40:	e002      	b.n	8001e48 <LoopFillZerobss>

08001e42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e44:	f842 3b04 	str.w	r3, [r2], #4

08001e48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e4c:	d3f9      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4e:	f7ff fccd 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f003 fcc5 	bl	80057e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e56:	f7ff fa55 	bl	8001304 <main>
  bx lr
 8001e5a:	4770      	bx	lr
  ldr r3, =_sidata
 8001e5c:	08009410 	.word	0x08009410
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e64:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8001e68:	2000008c 	.word	0x2000008c
  ldr r3, = _ebss
 8001e6c:	20000728 	.word	0x20000728

08001e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC1_2_IRQHandler>
	...

08001e74 <Set_Pwm>:




void Set_Pwm(int moto)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	if(moto>Amplitude) moto = Amplitude;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 8001e82:	4293      	cmp	r3, r2
 8001e84:	dd02      	ble.n	8001e8c <Set_Pwm+0x18>
 8001e86:	f641 33bc 	movw	r3, #7100	; 0x1bbc
 8001e8a:	607b      	str	r3, [r7, #4]
	if(moto<-Amplitude) moto = -Amplitude;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a16      	ldr	r2, [pc, #88]	; (8001ee8 <Set_Pwm+0x74>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	da01      	bge.n	8001e98 <Set_Pwm+0x24>
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <Set_Pwm+0x74>)
 8001e96:	607b      	str	r3, [r7, #4]
	if(moto>0){
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	dd0c      	ble.n	8001eb8 <Set_Pwm+0x44>
		HAL_GPIO_WritePin(GPIOB, AIN1_Pin, RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea4:	4811      	ldr	r0, [pc, #68]	; (8001eec <Set_Pwm+0x78>)
 8001ea6:	f001 f987 	bl	80031b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, AIN2_Pin, SET);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb0:	480e      	ldr	r0, [pc, #56]	; (8001eec <Set_Pwm+0x78>)
 8001eb2:	f001 f981 	bl	80031b8 <HAL_GPIO_WritePin>
 8001eb6:	e00b      	b.n	8001ed0 <Set_Pwm+0x5c>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, AIN1_Pin, SET);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ebe:	480b      	ldr	r0, [pc, #44]	; (8001eec <Set_Pwm+0x78>)
 8001ec0:	f001 f97a 	bl	80031b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, AIN2_Pin, RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eca:	4808      	ldr	r0, [pc, #32]	; (8001eec <Set_Pwm+0x78>)
 8001ecc:	f001 f974 	bl	80031b8 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(moto));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ed6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <Set_Pwm+0x7c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	ffffe444 	.word	0xffffe444
 8001eec:	40010c00 	.word	0x40010c00
 8001ef0:	20000148 	.word	0x20000148

08001ef4 <Incremental_PI>:

int Incremental_PI (int Encoder,int Target,float Kp,float Ki)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]

	static int Bias,Pwm,Last_bias;
	Bias=Encoder-Target;
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <Incremental_PI+0x8c>)
 8001f0a:	6013      	str	r3, [r2, #0]
	Pwm+=Kp*(Bias-Last_bias)+Ki*Bias;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <Incremental_PI+0x90>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fea5 	bl	8000c60 <__aeabi_i2f>
 8001f16:	4604      	mov	r4, r0
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <Incremental_PI+0x8c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <Incremental_PI+0x94>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fe9c 	bl	8000c60 <__aeabi_i2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe feeb 	bl	8000d08 <__aeabi_fmul>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461d      	mov	r5, r3
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <Incremental_PI+0x8c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fe90 	bl	8000c60 <__aeabi_i2f>
 8001f40:	4603      	mov	r3, r0
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fedf 	bl	8000d08 <__aeabi_fmul>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4628      	mov	r0, r5
 8001f50:	f7fe fdd2 	bl	8000af8 <__addsf3>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4619      	mov	r1, r3
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7fe fdcd 	bl	8000af8 <__addsf3>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f821 	bl	8000fa8 <__aeabi_f2iz>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <Incremental_PI+0x90>)
 8001f6a:	601a      	str	r2, [r3, #0]
	Last_bias=Bias;
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <Incremental_PI+0x8c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <Incremental_PI+0x94>)
 8001f72:	6013      	str	r3, [r2, #0]
	return Pwm;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <Incremental_PI+0x90>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f80:	200000dc 	.word	0x200000dc
 8001f84:	200000e0 	.word	0x200000e0
 8001f88:	200000e4 	.word	0x200000e4

08001f8c <IIC_delay>:
		}
}

//延时
void IIC_delay(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
	uint8_t t=3;
 8001f92:	2303      	movs	r3, #3
 8001f94:	71fb      	strb	r3, [r7, #7]
	while(t--);
 8001f96:	bf00      	nop
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	1e5a      	subs	r2, r3, #1
 8001f9c:	71fa      	strb	r2, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1fa      	bne.n	8001f98 <IIC_delay+0xc>
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <I2C_Start>:

//起始信号
void I2C_Start(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	OLED_SDA_Set();
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <I2C_Start+0x3c>)
 8001fb6:	f001 f8ff 	bl	80031b8 <HAL_GPIO_WritePin>
	OLED_SCL_Set();
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <I2C_Start+0x3c>)
 8001fc0:	f001 f8fa 	bl	80031b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8001fc4:	f7ff ffe2 	bl	8001f8c <IIC_delay>
	OLED_SDA_Clr();
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <I2C_Start+0x3c>)
 8001fce:	f001 f8f3 	bl	80031b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8001fd2:	f7ff ffdb 	bl	8001f8c <IIC_delay>
	OLED_SCL_Clr();
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <I2C_Start+0x3c>)
 8001fdc:	f001 f8ec 	bl	80031b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8001fe0:	f7ff ffd4 	bl	8001f8c <IIC_delay>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40010800 	.word	0x40010800

08001fec <I2C_Stop>:

//结束信号
void I2C_Stop(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	OLED_SDA_Clr();
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	4808      	ldr	r0, [pc, #32]	; (8002018 <I2C_Stop+0x2c>)
 8001ff6:	f001 f8df 	bl	80031b8 <HAL_GPIO_WritePin>
	OLED_SCL_Set();
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <I2C_Stop+0x2c>)
 8002000:	f001 f8da 	bl	80031b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8002004:	f7ff ffc2 	bl	8001f8c <IIC_delay>
	OLED_SDA_Set();
 8002008:	2201      	movs	r2, #1
 800200a:	2102      	movs	r1, #2
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <I2C_Stop+0x2c>)
 800200e:	f001 f8d3 	bl	80031b8 <HAL_GPIO_WritePin>
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40010800 	.word	0x40010800

0800201c <I2C_WaitAck>:

//等待信号响应
void I2C_WaitAck(void) //测数据信号的电平
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	OLED_SDA_Set();
 8002020:	2201      	movs	r2, #1
 8002022:	2102      	movs	r1, #2
 8002024:	480a      	ldr	r0, [pc, #40]	; (8002050 <I2C_WaitAck+0x34>)
 8002026:	f001 f8c7 	bl	80031b8 <HAL_GPIO_WritePin>
	IIC_delay();
 800202a:	f7ff ffaf 	bl	8001f8c <IIC_delay>
	OLED_SCL_Set();
 800202e:	2201      	movs	r2, #1
 8002030:	2101      	movs	r1, #1
 8002032:	4807      	ldr	r0, [pc, #28]	; (8002050 <I2C_WaitAck+0x34>)
 8002034:	f001 f8c0 	bl	80031b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8002038:	f7ff ffa8 	bl	8001f8c <IIC_delay>
	OLED_SCL_Clr();
 800203c:	2200      	movs	r2, #0
 800203e:	2101      	movs	r1, #1
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <I2C_WaitAck+0x34>)
 8002042:	f001 f8b9 	bl	80031b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8002046:	f7ff ffa1 	bl	8001f8c <IIC_delay>
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40010800 	.word	0x40010800

08002054 <Send_Byte>:

//写入一个字节
void Send_Byte(uint8_t dat)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i=0;i<8;i++)
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e022      	b.n	80020aa <Send_Byte+0x56>
	{
		if(dat&0x80)//将dat的8位从最高位依次写入
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da05      	bge.n	8002078 <Send_Byte+0x24>
		{
			OLED_SDA_Set();
 800206c:	2201      	movs	r2, #1
 800206e:	2102      	movs	r1, #2
 8002070:	4811      	ldr	r0, [pc, #68]	; (80020b8 <Send_Byte+0x64>)
 8002072:	f001 f8a1 	bl	80031b8 <HAL_GPIO_WritePin>
 8002076:	e004      	b.n	8002082 <Send_Byte+0x2e>
    }
		else
		{
			OLED_SDA_Clr();
 8002078:	2200      	movs	r2, #0
 800207a:	2102      	movs	r1, #2
 800207c:	480e      	ldr	r0, [pc, #56]	; (80020b8 <Send_Byte+0x64>)
 800207e:	f001 f89b 	bl	80031b8 <HAL_GPIO_WritePin>
    }
		IIC_delay();
 8002082:	f7ff ff83 	bl	8001f8c <IIC_delay>
		OLED_SCL_Set();
 8002086:	2201      	movs	r2, #1
 8002088:	2101      	movs	r1, #1
 800208a:	480b      	ldr	r0, [pc, #44]	; (80020b8 <Send_Byte+0x64>)
 800208c:	f001 f894 	bl	80031b8 <HAL_GPIO_WritePin>
		IIC_delay();
 8002090:	f7ff ff7c 	bl	8001f8c <IIC_delay>
		OLED_SCL_Clr();//将时钟信号设置为低电平
 8002094:	2200      	movs	r2, #0
 8002096:	2101      	movs	r1, #1
 8002098:	4807      	ldr	r0, [pc, #28]	; (80020b8 <Send_Byte+0x64>)
 800209a:	f001 f88d 	bl	80031b8 <HAL_GPIO_WritePin>
		dat<<=1;
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	3301      	adds	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b07      	cmp	r3, #7
 80020ae:	d9d9      	bls.n	8002064 <Send_Byte+0x10>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40010800 	.word	0x40010800

080020bc <OLED_WR_Byte>:

//发送一个字节
//mode:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(uint8_t dat,uint8_t mode)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	460a      	mov	r2, r1
 80020c6:	71fb      	strb	r3, [r7, #7]
 80020c8:	4613      	mov	r3, r2
 80020ca:	71bb      	strb	r3, [r7, #6]
	I2C_Start();
 80020cc:	f7ff ff6e 	bl	8001fac <I2C_Start>
	Send_Byte(0x78);
 80020d0:	2078      	movs	r0, #120	; 0x78
 80020d2:	f7ff ffbf 	bl	8002054 <Send_Byte>
	I2C_WaitAck();
 80020d6:	f7ff ffa1 	bl	800201c <I2C_WaitAck>
	if(mode){Send_Byte(0x40);}
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <OLED_WR_Byte+0x2c>
 80020e0:	2040      	movs	r0, #64	; 0x40
 80020e2:	f7ff ffb7 	bl	8002054 <Send_Byte>
 80020e6:	e002      	b.n	80020ee <OLED_WR_Byte+0x32>
  else{Send_Byte(0x00);}
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff ffb3 	bl	8002054 <Send_Byte>
	I2C_WaitAck();
 80020ee:	f7ff ff95 	bl	800201c <I2C_WaitAck>
	Send_Byte(dat);
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ffad 	bl	8002054 <Send_Byte>
	I2C_WaitAck();
 80020fa:	f7ff ff8f 	bl	800201c <I2C_WaitAck>
	I2C_Stop();
 80020fe:	f7ff ff75 	bl	8001fec <I2C_Stop>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <OLED_Refresh>:
	OLED_WR_Byte(0xAE,OLED_CMD);//关闭屏幕
}

//更新显存到OLED
void OLED_Refresh(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8002112:	2300      	movs	r3, #0
 8002114:	71fb      	strb	r3, [r7, #7]
 8002116:	e035      	b.n	8002184 <OLED_Refresh+0x78>
	{
		OLED_WR_Byte(0xb0+i,OLED_CMD); //设置行起始地址
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	3b50      	subs	r3, #80	; 0x50
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ffcb 	bl	80020bc <OLED_WR_Byte>
		OLED_WR_Byte(0x00,OLED_CMD);   //设置低列起始地址
 8002126:	2100      	movs	r1, #0
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ffc7 	bl	80020bc <OLED_WR_Byte>
		OLED_WR_Byte(0x10,OLED_CMD);   //设置高列起始地址
 800212e:	2100      	movs	r1, #0
 8002130:	2010      	movs	r0, #16
 8002132:	f7ff ffc3 	bl	80020bc <OLED_WR_Byte>
		I2C_Start();
 8002136:	f7ff ff39 	bl	8001fac <I2C_Start>
		Send_Byte(0x78);
 800213a:	2078      	movs	r0, #120	; 0x78
 800213c:	f7ff ff8a 	bl	8002054 <Send_Byte>
		I2C_WaitAck();
 8002140:	f7ff ff6c 	bl	800201c <I2C_WaitAck>
		Send_Byte(0x40);
 8002144:	2040      	movs	r0, #64	; 0x40
 8002146:	f7ff ff85 	bl	8002054 <Send_Byte>
		I2C_WaitAck();
 800214a:	f7ff ff67 	bl	800201c <I2C_WaitAck>
		for(n=0;n<128;n++)
 800214e:	2300      	movs	r3, #0
 8002150:	71bb      	strb	r3, [r7, #6]
 8002152:	e00e      	b.n	8002172 <OLED_Refresh+0x66>
		{
			Send_Byte(OLED_GRAM[n][i]);
 8002154:	79ba      	ldrb	r2, [r7, #6]
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <OLED_Refresh+0x88>)
 800215a:	00d2      	lsls	r2, r2, #3
 800215c:	440a      	add	r2, r1
 800215e:	4413      	add	r3, r2
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff76 	bl	8002054 <Send_Byte>
			I2C_WaitAck();
 8002168:	f7ff ff58 	bl	800201c <I2C_WaitAck>
		for(n=0;n<128;n++)
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	3301      	adds	r3, #1
 8002170:	71bb      	strb	r3, [r7, #6]
 8002172:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002176:	2b00      	cmp	r3, #0
 8002178:	daec      	bge.n	8002154 <OLED_Refresh+0x48>
		}
		I2C_Stop();
 800217a:	f7ff ff37 	bl	8001fec <I2C_Stop>
	for(i=0;i<8;i++)
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	3301      	adds	r3, #1
 8002182:	71fb      	strb	r3, [r7, #7]
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	2b07      	cmp	r3, #7
 8002188:	d9c6      	bls.n	8002118 <OLED_Refresh+0xc>
  }
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2000029c 	.word	0x2000029c

08002198 <OLED_Clear>:
//清屏函数
void OLED_Clear(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	e014      	b.n	80021ce <OLED_Clear+0x36>
	{
	   for(n=0;n<128;n++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	71bb      	strb	r3, [r7, #6]
 80021a8:	e00a      	b.n	80021c0 <OLED_Clear+0x28>
			{
			 OLED_GRAM[n][i]=0;//清除所有数据
 80021aa:	79ba      	ldrb	r2, [r7, #6]
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	490c      	ldr	r1, [pc, #48]	; (80021e0 <OLED_Clear+0x48>)
 80021b0:	00d2      	lsls	r2, r2, #3
 80021b2:	440a      	add	r2, r1
 80021b4:	4413      	add	r3, r2
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
	   for(n=0;n<128;n++)
 80021ba:	79bb      	ldrb	r3, [r7, #6]
 80021bc:	3301      	adds	r3, #1
 80021be:	71bb      	strb	r3, [r7, #6]
 80021c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	daf0      	bge.n	80021aa <OLED_Clear+0x12>
	for(i=0;i<8;i++)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	3301      	adds	r3, #1
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b07      	cmp	r3, #7
 80021d2:	d9e7      	bls.n	80021a4 <OLED_Clear+0xc>
			}
  }
	OLED_Refresh();//更新显示
 80021d4:	f7ff ff9a 	bl	800210c <OLED_Refresh>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000029c 	.word	0x2000029c

080021e4 <OLED_DrawPoint>:
//画点
//x:0~127
//y:0~63
//t:1 填充 0,清空
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	460b      	mov	r3, r1
 80021f0:	71bb      	strb	r3, [r7, #6]
 80021f2:	4613      	mov	r3, r2
 80021f4:	717b      	strb	r3, [r7, #5]
	uint8_t i,m,n;
	i=y/8;
 80021f6:	79bb      	ldrb	r3, [r7, #6]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	73fb      	strb	r3, [r7, #15]
	m=y%8;
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	73bb      	strb	r3, [r7, #14]
	n=1<<m;
 8002204:	7bbb      	ldrb	r3, [r7, #14]
 8002206:	2201      	movs	r2, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	737b      	strb	r3, [r7, #13]
	if(t){OLED_GRAM[x][i]|=n;}
 800220e:	797b      	ldrb	r3, [r7, #5]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d012      	beq.n	800223a <OLED_DrawPoint+0x56>
 8002214:	79fa      	ldrb	r2, [r7, #7]
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	4924      	ldr	r1, [pc, #144]	; (80022ac <OLED_DrawPoint+0xc8>)
 800221a:	00d2      	lsls	r2, r2, #3
 800221c:	440a      	add	r2, r1
 800221e:	4413      	add	r3, r2
 8002220:	7818      	ldrb	r0, [r3, #0]
 8002222:	79fa      	ldrb	r2, [r7, #7]
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	7b79      	ldrb	r1, [r7, #13]
 8002228:	4301      	orrs	r1, r0
 800222a:	b2c8      	uxtb	r0, r1
 800222c:	491f      	ldr	r1, [pc, #124]	; (80022ac <OLED_DrawPoint+0xc8>)
 800222e:	00d2      	lsls	r2, r2, #3
 8002230:	440a      	add	r2, r1
 8002232:	4413      	add	r3, r2
 8002234:	4602      	mov	r2, r0
 8002236:	701a      	strb	r2, [r3, #0]
	{
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
		OLED_GRAM[x][i]|=n;
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
	}
}
 8002238:	e033      	b.n	80022a2 <OLED_DrawPoint+0xbe>
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	491b      	ldr	r1, [pc, #108]	; (80022ac <OLED_DrawPoint+0xc8>)
 8002240:	00d2      	lsls	r2, r2, #3
 8002242:	440a      	add	r2, r1
 8002244:	4413      	add	r3, r2
 8002246:	7819      	ldrb	r1, [r3, #0]
 8002248:	79fa      	ldrb	r2, [r7, #7]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	43c9      	mvns	r1, r1
 800224e:	b2c8      	uxtb	r0, r1
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <OLED_DrawPoint+0xc8>)
 8002252:	00d2      	lsls	r2, r2, #3
 8002254:	440a      	add	r2, r1
 8002256:	4413      	add	r3, r2
 8002258:	4602      	mov	r2, r0
 800225a:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]|=n;
 800225c:	79fa      	ldrb	r2, [r7, #7]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	4912      	ldr	r1, [pc, #72]	; (80022ac <OLED_DrawPoint+0xc8>)
 8002262:	00d2      	lsls	r2, r2, #3
 8002264:	440a      	add	r2, r1
 8002266:	4413      	add	r3, r2
 8002268:	7818      	ldrb	r0, [r3, #0]
 800226a:	79fa      	ldrb	r2, [r7, #7]
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	7b79      	ldrb	r1, [r7, #13]
 8002270:	4301      	orrs	r1, r0
 8002272:	b2c8      	uxtb	r0, r1
 8002274:	490d      	ldr	r1, [pc, #52]	; (80022ac <OLED_DrawPoint+0xc8>)
 8002276:	00d2      	lsls	r2, r2, #3
 8002278:	440a      	add	r2, r1
 800227a:	4413      	add	r3, r2
 800227c:	4602      	mov	r2, r0
 800227e:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	4909      	ldr	r1, [pc, #36]	; (80022ac <OLED_DrawPoint+0xc8>)
 8002286:	00d2      	lsls	r2, r2, #3
 8002288:	440a      	add	r2, r1
 800228a:	4413      	add	r3, r2
 800228c:	7819      	ldrb	r1, [r3, #0]
 800228e:	79fa      	ldrb	r2, [r7, #7]
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	43c9      	mvns	r1, r1
 8002294:	b2c8      	uxtb	r0, r1
 8002296:	4905      	ldr	r1, [pc, #20]	; (80022ac <OLED_DrawPoint+0xc8>)
 8002298:	00d2      	lsls	r2, r2, #3
 800229a:	440a      	add	r2, r1
 800229c:	4413      	add	r3, r2
 800229e:	4602      	mov	r2, r0
 80022a0:	701a      	strb	r2, [r3, #0]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	2000029c 	.word	0x2000029c

080022b0 <OLED_ShowChar>:
//x:0~127
//y:0~63
//size1:选择字体 6x8/6x12/8x16/12x24
//mode:0,反色显示;1,正常显示
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size1,uint8_t mode)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	4603      	mov	r3, r0
 80022c4:	71bb      	strb	r3, [r7, #6]
 80022c6:	460b      	mov	r3, r1
 80022c8:	717b      	strb	r3, [r7, #5]
 80022ca:	4613      	mov	r3, r2
 80022cc:	713b      	strb	r3, [r7, #4]
	uint8_t i,m,temp,size2,chr1;
	uint8_t x0=x,y0=y;
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	72bb      	strb	r3, [r7, #10]
 80022d2:	79bb      	ldrb	r3, [r7, #6]
 80022d4:	72fb      	strb	r3, [r7, #11]
	if(size1==8)size2=6;
 80022d6:	793b      	ldrb	r3, [r7, #4]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d102      	bne.n	80022e2 <OLED_ShowChar+0x32>
 80022dc:	2306      	movs	r3, #6
 80022de:	733b      	strb	r3, [r7, #12]
 80022e0:	e014      	b.n	800230c <OLED_ShowChar+0x5c>
	else size2=(size1/8+((size1%8)?1:0))*(size1/2);  //得到字体一个字符对应点阵集所占的字节数
 80022e2:	793b      	ldrb	r3, [r7, #4]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	793b      	ldrb	r3, [r7, #4]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	2300      	moveq	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	793a      	ldrb	r2, [r7, #4]
 8002302:	0852      	lsrs	r2, r2, #1
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	733b      	strb	r3, [r7, #12]
	chr1=chr-' ';  //计算偏移后的值
 800230c:	797b      	ldrb	r3, [r7, #5]
 800230e:	3b20      	subs	r3, #32
 8002310:	727b      	strb	r3, [r7, #9]
	for(i=0;i<size2;i++)
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	e078      	b.n	800240a <OLED_ShowChar+0x15a>
	{
		if(size1==8)
 8002318:	793b      	ldrb	r3, [r7, #4]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d10b      	bne.n	8002336 <OLED_ShowChar+0x86>
			  {temp=asc2_0806[chr1][i];} //调用0806字体
 800231e:	7a7a      	ldrb	r2, [r7, #9]
 8002320:	7bf9      	ldrb	r1, [r7, #15]
 8002322:	483e      	ldr	r0, [pc, #248]	; (800241c <OLED_ShowChar+0x16c>)
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4403      	add	r3, r0
 800232e:	440b      	add	r3, r1
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	737b      	strb	r3, [r7, #13]
 8002334:	e028      	b.n	8002388 <OLED_ShowChar+0xd8>
		else if(size1==12)
 8002336:	793b      	ldrb	r3, [r7, #4]
 8002338:	2b0c      	cmp	r3, #12
 800233a:	d10b      	bne.n	8002354 <OLED_ShowChar+0xa4>
        {temp=asc2_1206[chr1][i];} //调用1206字体
 800233c:	7a7a      	ldrb	r2, [r7, #9]
 800233e:	7bf9      	ldrb	r1, [r7, #15]
 8002340:	4837      	ldr	r0, [pc, #220]	; (8002420 <OLED_ShowChar+0x170>)
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4403      	add	r3, r0
 800234c:	440b      	add	r3, r1
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	737b      	strb	r3, [r7, #13]
 8002352:	e019      	b.n	8002388 <OLED_ShowChar+0xd8>
		else if(size1==16)
 8002354:	793b      	ldrb	r3, [r7, #4]
 8002356:	2b10      	cmp	r3, #16
 8002358:	d108      	bne.n	800236c <OLED_ShowChar+0xbc>
        {temp=asc2_1608[chr1][i];} //调用1608字体
 800235a:	7a7a      	ldrb	r2, [r7, #9]
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	4931      	ldr	r1, [pc, #196]	; (8002424 <OLED_ShowChar+0x174>)
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	440a      	add	r2, r1
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	737b      	strb	r3, [r7, #13]
 800236a:	e00d      	b.n	8002388 <OLED_ShowChar+0xd8>
		else if(size1==24)
 800236c:	793b      	ldrb	r3, [r7, #4]
 800236e:	2b18      	cmp	r3, #24
 8002370:	d150      	bne.n	8002414 <OLED_ShowChar+0x164>
        {temp=asc2_2412[chr1][i];} //调用2412字体
 8002372:	7a7a      	ldrb	r2, [r7, #9]
 8002374:	7bf9      	ldrb	r1, [r7, #15]
 8002376:	482c      	ldr	r0, [pc, #176]	; (8002428 <OLED_ShowChar+0x178>)
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4403      	add	r3, r0
 8002382:	440b      	add	r3, r1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	737b      	strb	r3, [r7, #13]
		else return;
		for(m=0;m<8;m++)
 8002388:	2300      	movs	r3, #0
 800238a:	73bb      	strb	r3, [r7, #14]
 800238c:	e022      	b.n	80023d4 <OLED_ShowChar+0x124>
		{
			if(temp&0x01)OLED_DrawPoint(x,y,mode);
 800238e:	7b7b      	ldrb	r3, [r7, #13]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <OLED_ShowChar+0xf8>
 8002398:	f897 2020 	ldrb.w	r2, [r7, #32]
 800239c:	79b9      	ldrb	r1, [r7, #6]
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff1f 	bl	80021e4 <OLED_DrawPoint>
 80023a6:	e00c      	b.n	80023c2 <OLED_ShowChar+0x112>
			else OLED_DrawPoint(x,y,!mode);
 80023a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	79b9      	ldrb	r1, [r7, #6]
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff11 	bl	80021e4 <OLED_DrawPoint>
			temp>>=1;
 80023c2:	7b7b      	ldrb	r3, [r7, #13]
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	737b      	strb	r3, [r7, #13]
			y++;
 80023c8:	79bb      	ldrb	r3, [r7, #6]
 80023ca:	3301      	adds	r3, #1
 80023cc:	71bb      	strb	r3, [r7, #6]
		for(m=0;m<8;m++)
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	3301      	adds	r3, #1
 80023d2:	73bb      	strb	r3, [r7, #14]
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	2b07      	cmp	r3, #7
 80023d8:	d9d9      	bls.n	800238e <OLED_ShowChar+0xde>
		}
		x++;
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	3301      	adds	r3, #1
 80023de:	71fb      	strb	r3, [r7, #7]
		if((size1!=8)&&((x-x0)==size1/2))
 80023e0:	793b      	ldrb	r3, [r7, #4]
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d00c      	beq.n	8002400 <OLED_ShowChar+0x150>
 80023e6:	79fa      	ldrb	r2, [r7, #7]
 80023e8:	7abb      	ldrb	r3, [r7, #10]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	793a      	ldrb	r2, [r7, #4]
 80023ee:	0852      	lsrs	r2, r2, #1
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d104      	bne.n	8002400 <OLED_ShowChar+0x150>
		{x=x0;y0=y0+8;}
 80023f6:	7abb      	ldrb	r3, [r7, #10]
 80023f8:	71fb      	strb	r3, [r7, #7]
 80023fa:	7afb      	ldrb	r3, [r7, #11]
 80023fc:	3308      	adds	r3, #8
 80023fe:	72fb      	strb	r3, [r7, #11]
		y=y0;
 8002400:	7afb      	ldrb	r3, [r7, #11]
 8002402:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<size2;i++)
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	3301      	adds	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	7b3b      	ldrb	r3, [r7, #12]
 800240e:	429a      	cmp	r2, r3
 8002410:	d382      	bcc.n	8002318 <OLED_ShowChar+0x68>
 8002412:	e000      	b.n	8002416 <OLED_ShowChar+0x166>
		else return;
 8002414:	bf00      	nop
  }
}
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	080077b0 	.word	0x080077b0
 8002420:	080079d8 	.word	0x080079d8
 8002424:	08007e4c 	.word	0x08007e4c
 8002428:	0800843c 	.word	0x0800843c

0800242c <OLED_ShowString>:
//x,y:起点坐标
//size1:字体大小
//*chr:字符串起始地址
//mode:0,反色显示;1,正常显示
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t size1,uint8_t mode)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b085      	sub	sp, #20
 8002430:	af02      	add	r7, sp, #8
 8002432:	603a      	str	r2, [r7, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	460b      	mov	r3, r1
 800243c:	71bb      	strb	r3, [r7, #6]
 800243e:	4613      	mov	r3, r2
 8002440:	717b      	strb	r3, [r7, #5]
	while((*chr>=' ')&&(*chr<='~'))//判断是不是非法字符!
 8002442:	e019      	b.n	8002478 <OLED_ShowString+0x4c>
	{
		OLED_ShowChar(x,y,*chr,size1,mode);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	797c      	ldrb	r4, [r7, #5]
 800244a:	79b9      	ldrb	r1, [r7, #6]
 800244c:	79f8      	ldrb	r0, [r7, #7]
 800244e:	7e3b      	ldrb	r3, [r7, #24]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	4623      	mov	r3, r4
 8002454:	f7ff ff2c 	bl	80022b0 <OLED_ShowChar>
		if(size1==8)x+=6;
 8002458:	797b      	ldrb	r3, [r7, #5]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d103      	bne.n	8002466 <OLED_ShowString+0x3a>
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	3306      	adds	r3, #6
 8002462:	71fb      	strb	r3, [r7, #7]
 8002464:	e005      	b.n	8002472 <OLED_ShowString+0x46>
		else x+=size1/2;
 8002466:	797b      	ldrb	r3, [r7, #5]
 8002468:	085b      	lsrs	r3, r3, #1
 800246a:	b2da      	uxtb	r2, r3
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4413      	add	r3, r2
 8002470:	71fb      	strb	r3, [r7, #7]
		chr++;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	603b      	str	r3, [r7, #0]
	while((*chr>=' ')&&(*chr<='~'))//判断是不是非法字符!
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b1f      	cmp	r3, #31
 800247e:	d903      	bls.n	8002488 <OLED_ShowString+0x5c>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b7e      	cmp	r3, #126	; 0x7e
 8002486:	d9dd      	bls.n	8002444 <OLED_ShowString+0x18>
  }
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}

08002490 <OLED_Init>:
     }
	 }
}
//OLED的初始化
void OLED_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0


	OLED_RES_Clr();
 8002494:	2200      	movs	r2, #0
 8002496:	2104      	movs	r1, #4
 8002498:	483b      	ldr	r0, [pc, #236]	; (8002588 <OLED_Init+0xf8>)
 800249a:	f000 fe8d 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800249e:	20c8      	movs	r0, #200	; 0xc8
 80024a0:	f000 f99c 	bl	80027dc <HAL_Delay>
	OLED_RES_Set();
 80024a4:	2201      	movs	r2, #1
 80024a6:	2104      	movs	r1, #4
 80024a8:	4837      	ldr	r0, [pc, #220]	; (8002588 <OLED_Init+0xf8>)
 80024aa:	f000 fe85 	bl	80031b8 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 80024ae:	2100      	movs	r1, #0
 80024b0:	20ae      	movs	r0, #174	; 0xae
 80024b2:	f7ff fe03 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 80024b6:	2100      	movs	r1, #0
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff fdff 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 80024be:	2100      	movs	r1, #0
 80024c0:	2010      	movs	r0, #16
 80024c2:	f7ff fdfb 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80024c6:	2100      	movs	r1, #0
 80024c8:	2040      	movs	r0, #64	; 0x40
 80024ca:	f7ff fdf7 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 80024ce:	2100      	movs	r1, #0
 80024d0:	2081      	movs	r0, #129	; 0x81
 80024d2:	f7ff fdf3 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness
 80024d6:	2100      	movs	r1, #0
 80024d8:	20cf      	movs	r0, #207	; 0xcf
 80024da:	f7ff fdef 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 80024de:	2100      	movs	r1, #0
 80024e0:	20a1      	movs	r0, #161	; 0xa1
 80024e2:	f7ff fdeb 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 80024e6:	2100      	movs	r1, #0
 80024e8:	20c8      	movs	r0, #200	; 0xc8
 80024ea:	f7ff fde7 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 80024ee:	2100      	movs	r1, #0
 80024f0:	20a6      	movs	r0, #166	; 0xa6
 80024f2:	f7ff fde3 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 80024f6:	2100      	movs	r1, #0
 80024f8:	20a8      	movs	r0, #168	; 0xa8
 80024fa:	f7ff fddf 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 80024fe:	2100      	movs	r1, #0
 8002500:	203f      	movs	r0, #63	; 0x3f
 8002502:	f7ff fddb 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8002506:	2100      	movs	r1, #0
 8002508:	20d3      	movs	r0, #211	; 0xd3
 800250a:	f7ff fdd7 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 800250e:	2100      	movs	r1, #0
 8002510:	2000      	movs	r0, #0
 8002512:	f7ff fdd3 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8002516:	2100      	movs	r1, #0
 8002518:	20d5      	movs	r0, #213	; 0xd5
 800251a:	f7ff fdcf 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 800251e:	2100      	movs	r1, #0
 8002520:	2080      	movs	r0, #128	; 0x80
 8002522:	f7ff fdcb 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 8002526:	2100      	movs	r1, #0
 8002528:	20d9      	movs	r0, #217	; 0xd9
 800252a:	f7ff fdc7 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800252e:	2100      	movs	r1, #0
 8002530:	20f1      	movs	r0, #241	; 0xf1
 8002532:	f7ff fdc3 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 8002536:	2100      	movs	r1, #0
 8002538:	20da      	movs	r0, #218	; 0xda
 800253a:	f7ff fdbf 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 800253e:	2100      	movs	r1, #0
 8002540:	2012      	movs	r0, #18
 8002542:	f7ff fdbb 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 8002546:	2100      	movs	r1, #0
 8002548:	20db      	movs	r0, #219	; 0xdb
 800254a:	f7ff fdb7 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//Set VCOM Deselect Level
 800254e:	2100      	movs	r1, #0
 8002550:	2030      	movs	r0, #48	; 0x30
 8002552:	f7ff fdb3 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8002556:	2100      	movs	r1, #0
 8002558:	2020      	movs	r0, #32
 800255a:	f7ff fdaf 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 800255e:	2100      	movs	r1, #0
 8002560:	2002      	movs	r0, #2
 8002562:	f7ff fdab 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8002566:	2100      	movs	r1, #0
 8002568:	208d      	movs	r0, #141	; 0x8d
 800256a:	f7ff fda7 	bl	80020bc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 800256e:	2100      	movs	r1, #0
 8002570:	2014      	movs	r0, #20
 8002572:	f7ff fda3 	bl	80020bc <OLED_WR_Byte>
	OLED_Clear();
 8002576:	f7ff fe0f 	bl	8002198 <OLED_Clear>
	OLED_WR_Byte(0xAF,OLED_CMD);
 800257a:	2100      	movs	r1, #0
 800257c:	20af      	movs	r0, #175	; 0xaf
 800257e:	f7ff fd9d 	bl	80020bc <OLED_WR_Byte>
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40010800 	.word	0x40010800

0800258c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <RetargetInit+0x28>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <RetargetInit+0x2c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6898      	ldr	r0, [r3, #8]
 80025a0:	2300      	movs	r3, #0
 80025a2:	2202      	movs	r2, #2
 80025a4:	2100      	movs	r1, #0
 80025a6:	f003 f95f 	bl	8005868 <setvbuf>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000071c 	.word	0x2000071c
 80025b8:	20000028 	.word	0x20000028

080025bc <_isatty>:

int _isatty(int fd) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db04      	blt.n	80025d4 <_isatty+0x18>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	dc01      	bgt.n	80025d4 <_isatty+0x18>
    return 1;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e005      	b.n	80025e0 <_isatty+0x24>

  errno = EBADF;
 80025d4:	f003 f8fe 	bl	80057d4 <__errno>
 80025d8:	4602      	mov	r2, r0
 80025da:	2309      	movs	r3, #9
 80025dc:	6013      	str	r3, [r2, #0]
  return 0;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_write>:

int _write(int fd, char* ptr, int len) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d002      	beq.n	8002600 <_write+0x18>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d111      	bne.n	8002624 <_write+0x3c>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len,1000);
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <_write+0x54>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	b29a      	uxth	r2, r3
 8002608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	f002 fb4d 	bl	8004cac <HAL_UART_Transmit>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]
    //hstatus = HAL_UART_Transmit_DMA(gHuart, (uint8_t *) ptr, len);
    if (hstatus == HAL_OK)
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <_write+0x38>
      return len;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	e008      	b.n	8002632 <_write+0x4a>
    else
      return EIO;
 8002620:	2305      	movs	r3, #5
 8002622:	e006      	b.n	8002632 <_write+0x4a>
  }
  errno = EBADF;
 8002624:	f003 f8d6 	bl	80057d4 <__errno>
 8002628:	4602      	mov	r2, r0
 800262a:	2309      	movs	r3, #9
 800262c:	6013      	str	r3, [r2, #0]
  return -1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000071c 	.word	0x2000071c

08002640 <_close>:

int _close(int fd) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db04      	blt.n	8002658 <_close+0x18>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	dc01      	bgt.n	8002658 <_close+0x18>
    return 0;
 8002654:	2300      	movs	r3, #0
 8002656:	e006      	b.n	8002666 <_close+0x26>

  errno = EBADF;
 8002658:	f003 f8bc 	bl	80057d4 <__errno>
 800265c:	4602      	mov	r2, r0
 800265e:	2309      	movs	r3, #9
 8002660:	6013      	str	r3, [r2, #0]
  return -1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800266e:	b580      	push	{r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800267a:	f003 f8ab 	bl	80057d4 <__errno>
 800267e:	4602      	mov	r2, r0
 8002680:	2309      	movs	r3, #9
 8002682:	6013      	str	r3, [r2, #0]
  return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_read>:

int _read(int fd, char* ptr, int len) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d110      	bne.n	80026c4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1,1000);
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <_read+0x4c>)
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026aa:	2201      	movs	r2, #1
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	f002 fb8f 	bl	8004dd0 <HAL_UART_Receive>
 80026b2:	4603      	mov	r3, r0
 80026b4:	75fb      	strb	r3, [r7, #23]
    //hstatus = HAL_UART_Receive_DMA(gHuart, (uint8_t *) ptr, 1);
    if (hstatus == HAL_OK)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <_read+0x30>
      return 1;
 80026bc:	2301      	movs	r3, #1
 80026be:	e008      	b.n	80026d2 <_read+0x42>
    else
      return EIO;
 80026c0:	2305      	movs	r3, #5
 80026c2:	e006      	b.n	80026d2 <_read+0x42>
  }
  errno = EBADF;
 80026c4:	f003 f886 	bl	80057d4 <__errno>
 80026c8:	4602      	mov	r2, r0
 80026ca:	2309      	movs	r3, #9
 80026cc:	6013      	str	r3, [r2, #0]
  return -1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000071c 	.word	0x2000071c

080026e0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db08      	blt.n	8002702 <_fstat+0x22>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	dc05      	bgt.n	8002702 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fc:	605a      	str	r2, [r3, #4]
    return 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	e005      	b.n	800270e <_fstat+0x2e>
  }

  errno = EBADF;
 8002702:	f003 f867 	bl	80057d4 <__errno>
 8002706:	4602      	mov	r2, r0
 8002708:	2309      	movs	r3, #9
 800270a:	6013      	str	r3, [r2, #0]
  return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_Init+0x28>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_Init+0x28>)
 8002722:	f043 0310 	orr.w	r3, r3, #16
 8002726:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002728:	2003      	movs	r0, #3
 800272a:	f000 f945 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272e:	2000      	movs	r0, #0
 8002730:	f000 f808 	bl	8002744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002734:	f7fe ffa0 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022000 	.word	0x40022000

08002744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_InitTick+0x54>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_InitTick+0x58>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275a:	fbb3 f3f1 	udiv	r3, r3, r1
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f95d 	bl	8002a22 <HAL_SYSTICK_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00e      	b.n	8002790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0f      	cmp	r3, #15
 8002776:	d80a      	bhi.n	800278e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002778:	2200      	movs	r2, #0
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f000 f925 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002784:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <HAL_InitTick+0x5c>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	2000001c 	.word	0x2000001c
 800279c:	20000024 	.word	0x20000024
 80027a0:	20000020 	.word	0x20000020

080027a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_IncTick+0x1c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_IncTick+0x20>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	4a03      	ldr	r2, [pc, #12]	; (80027c4 <HAL_IncTick+0x20>)
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	20000024 	.word	0x20000024
 80027c4:	20000720 	.word	0x20000720

080027c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return uwTick;
 80027cc:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <HAL_GetTick+0x10>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	20000720 	.word	0x20000720

080027dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff fff0 	bl	80027c8 <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d005      	beq.n	8002802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_Delay+0x40>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002802:	bf00      	nop
 8002804:	f7ff ffe0 	bl	80027c8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	429a      	cmp	r2, r3
 8002812:	d8f7      	bhi.n	8002804 <HAL_Delay+0x28>
  {
  }
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000024 	.word	0x20000024

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4906      	ldr	r1, [pc, #24]	; (80028b8 <__NVIC_EnableIRQ+0x34>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff90 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff2d 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff42 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff90 	bl	8002910 <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5f 	bl	80028bc <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff35 	bl	8002884 <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e043      	b.n	8002ada <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_DMA_Init+0xa8>)
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_Init+0xac>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	009a      	lsls	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_DMA_Init+0xb0>)
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	bffdfff8 	.word	0xbffdfff8
 8002ae8:	cccccccd 	.word	0xcccccccd
 8002aec:	40020000 	.word	0x40020000

08002af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_DMA_Start_IT+0x20>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e04a      	b.n	8002ba6 <HAL_DMA_Start_IT+0xb6>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d13a      	bne.n	8002b98 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2202      	movs	r2, #2
 8002b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f9ae 	bl	8002ea8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 020e 	orr.w	r2, r2, #14
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e00f      	b.n	8002b86 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0204 	bic.w	r2, r2, #4
 8002b74:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 020a 	orr.w	r2, r2, #10
 8002b84:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0201 	orr.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e005      	b.n	8002ba4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d005      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e051      	b.n	8002c76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 020e 	bic.w	r2, r2, #14
 8002be0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_DMA_Abort_IT+0xd0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d029      	beq.n	8002c50 <HAL_DMA_Abort_IT+0xa0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <HAL_DMA_Abort_IT+0xd4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <HAL_DMA_Abort_IT+0x9c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <HAL_DMA_Abort_IT+0xd8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01a      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x96>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <HAL_DMA_Abort_IT+0xdc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d012      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x90>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <HAL_DMA_Abort_IT+0xe0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00a      	beq.n	8002c3a <HAL_DMA_Abort_IT+0x8a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <HAL_DMA_Abort_IT+0xe4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d102      	bne.n	8002c34 <HAL_DMA_Abort_IT+0x84>
 8002c2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c32:	e00e      	b.n	8002c52 <HAL_DMA_Abort_IT+0xa2>
 8002c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c38:	e00b      	b.n	8002c52 <HAL_DMA_Abort_IT+0xa2>
 8002c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3e:	e008      	b.n	8002c52 <HAL_DMA_Abort_IT+0xa2>
 8002c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c44:	e005      	b.n	8002c52 <HAL_DMA_Abort_IT+0xa2>
 8002c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4a:	e002      	b.n	8002c52 <HAL_DMA_Abort_IT+0xa2>
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	e000      	b.n	8002c52 <HAL_DMA_Abort_IT+0xa2>
 8002c50:	2301      	movs	r3, #1
 8002c52:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <HAL_DMA_Abort_IT+0xe8>)
 8002c54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
    } 
  }
  return status;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40020008 	.word	0x40020008
 8002c84:	4002001c 	.word	0x4002001c
 8002c88:	40020030 	.word	0x40020030
 8002c8c:	40020044 	.word	0x40020044
 8002c90:	40020058 	.word	0x40020058
 8002c94:	4002006c 	.word	0x4002006c
 8002c98:	40020000 	.word	0x40020000

08002c9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2204      	movs	r2, #4
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d04f      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xc8>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d04a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d107      	bne.n	8002cec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0204 	bic.w	r2, r2, #4
 8002cea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a66      	ldr	r2, [pc, #408]	; (8002e8c <HAL_DMA_IRQHandler+0x1f0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d029      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xae>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a65      	ldr	r2, [pc, #404]	; (8002e90 <HAL_DMA_IRQHandler+0x1f4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xaa>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a63      	ldr	r2, [pc, #396]	; (8002e94 <HAL_DMA_IRQHandler+0x1f8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0xa4>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a62      	ldr	r2, [pc, #392]	; (8002e98 <HAL_DMA_IRQHandler+0x1fc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d012      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x9e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a60      	ldr	r2, [pc, #384]	; (8002e9c <HAL_DMA_IRQHandler+0x200>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00a      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x98>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a5f      	ldr	r2, [pc, #380]	; (8002ea0 <HAL_DMA_IRQHandler+0x204>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d102      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x92>
 8002d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d2c:	e00e      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d32:	e00b      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d38:	e008      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d3e:	e005      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	e002      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d46:	2340      	movs	r3, #64	; 0x40
 8002d48:	e000      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	4a55      	ldr	r2, [pc, #340]	; (8002ea4 <HAL_DMA_IRQHandler+0x208>)
 8002d4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8094 	beq.w	8002e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d62:	e08e      	b.n	8002e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2202      	movs	r2, #2
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d056      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x186>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d051      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 020a 	bic.w	r2, r2, #10
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <HAL_DMA_IRQHandler+0x1f0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d029      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x166>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a37      	ldr	r2, [pc, #220]	; (8002e90 <HAL_DMA_IRQHandler+0x1f4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d022      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x162>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	; (8002e94 <HAL_DMA_IRQHandler+0x1f8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01a      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x15c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a34      	ldr	r2, [pc, #208]	; (8002e98 <HAL_DMA_IRQHandler+0x1fc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d012      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x156>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <HAL_DMA_IRQHandler+0x200>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00a      	beq.n	8002dec <HAL_DMA_IRQHandler+0x150>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a31      	ldr	r2, [pc, #196]	; (8002ea0 <HAL_DMA_IRQHandler+0x204>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d102      	bne.n	8002de6 <HAL_DMA_IRQHandler+0x14a>
 8002de0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002de4:	e00e      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dea:	e00b      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df0:	e008      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df6:	e005      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dfc:	e002      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e000      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002e02:	2302      	movs	r3, #2
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <HAL_DMA_IRQHandler+0x208>)
 8002e06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d034      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e20:	e02f      	b.n	8002e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2208      	movs	r2, #8
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d028      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x1e8>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d023      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 020e 	bic.w	r2, r2, #14
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
    }
  }
  return;
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
}
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40020008 	.word	0x40020008
 8002e90:	4002001c 	.word	0x4002001c
 8002e94:	40020030 	.word	0x40020030
 8002e98:	40020044 	.word	0x40020044
 8002e9c:	40020058 	.word	0x40020058
 8002ea0:	4002006c 	.word	0x4002006c
 8002ea4:	40020000 	.word	0x40020000

08002ea8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d108      	bne.n	8002ee8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ee6:	e007      	b.n	8002ef8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	60da      	str	r2, [r3, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b08b      	sub	sp, #44	; 0x2c
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f16:	e127      	b.n	8003168 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f18:	2201      	movs	r2, #1
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 8116 	bne.w	8003162 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b12      	cmp	r3, #18
 8002f3c:	d034      	beq.n	8002fa8 <HAL_GPIO_Init+0xa4>
 8002f3e:	2b12      	cmp	r3, #18
 8002f40:	d80d      	bhi.n	8002f5e <HAL_GPIO_Init+0x5a>
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d02b      	beq.n	8002f9e <HAL_GPIO_Init+0x9a>
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d804      	bhi.n	8002f54 <HAL_GPIO_Init+0x50>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d031      	beq.n	8002fb2 <HAL_GPIO_Init+0xae>
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d01c      	beq.n	8002f8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f52:	e048      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d043      	beq.n	8002fe0 <HAL_GPIO_Init+0xdc>
 8002f58:	2b11      	cmp	r3, #17
 8002f5a:	d01b      	beq.n	8002f94 <HAL_GPIO_Init+0x90>
          break;
 8002f5c:	e043      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f5e:	4a89      	ldr	r2, [pc, #548]	; (8003184 <HAL_GPIO_Init+0x280>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d026      	beq.n	8002fb2 <HAL_GPIO_Init+0xae>
 8002f64:	4a87      	ldr	r2, [pc, #540]	; (8003184 <HAL_GPIO_Init+0x280>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d806      	bhi.n	8002f78 <HAL_GPIO_Init+0x74>
 8002f6a:	4a87      	ldr	r2, [pc, #540]	; (8003188 <HAL_GPIO_Init+0x284>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d020      	beq.n	8002fb2 <HAL_GPIO_Init+0xae>
 8002f70:	4a86      	ldr	r2, [pc, #536]	; (800318c <HAL_GPIO_Init+0x288>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01d      	beq.n	8002fb2 <HAL_GPIO_Init+0xae>
          break;
 8002f76:	e036      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f78:	4a85      	ldr	r2, [pc, #532]	; (8003190 <HAL_GPIO_Init+0x28c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d019      	beq.n	8002fb2 <HAL_GPIO_Init+0xae>
 8002f7e:	4a85      	ldr	r2, [pc, #532]	; (8003194 <HAL_GPIO_Init+0x290>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d016      	beq.n	8002fb2 <HAL_GPIO_Init+0xae>
 8002f84:	4a84      	ldr	r2, [pc, #528]	; (8003198 <HAL_GPIO_Init+0x294>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_GPIO_Init+0xae>
          break;
 8002f8a:	e02c      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	623b      	str	r3, [r7, #32]
          break;
 8002f92:	e028      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	623b      	str	r3, [r7, #32]
          break;
 8002f9c:	e023      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	623b      	str	r3, [r7, #32]
          break;
 8002fa6:	e01e      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	330c      	adds	r3, #12
 8002fae:	623b      	str	r3, [r7, #32]
          break;
 8002fb0:	e019      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fba:	2304      	movs	r3, #4
 8002fbc:	623b      	str	r3, [r7, #32]
          break;
 8002fbe:	e012      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc8:	2308      	movs	r3, #8
 8002fca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	611a      	str	r2, [r3, #16]
          break;
 8002fd2:	e008      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	615a      	str	r2, [r3, #20]
          break;
 8002fde:	e002      	b.n	8002fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	623b      	str	r3, [r7, #32]
          break;
 8002fe4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2bff      	cmp	r3, #255	; 0xff
 8002fea:	d801      	bhi.n	8002ff0 <HAL_GPIO_Init+0xec>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	e001      	b.n	8002ff4 <HAL_GPIO_Init+0xf0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2bff      	cmp	r3, #255	; 0xff
 8002ffa:	d802      	bhi.n	8003002 <HAL_GPIO_Init+0xfe>
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	e002      	b.n	8003008 <HAL_GPIO_Init+0x104>
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	3b08      	subs	r3, #8
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	210f      	movs	r1, #15
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	401a      	ands	r2, r3
 800301a:	6a39      	ldr	r1, [r7, #32]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	431a      	orrs	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8096 	beq.w	8003162 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003036:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_GPIO_Init+0x298>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	4a58      	ldr	r2, [pc, #352]	; (800319c <HAL_GPIO_Init+0x298>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6193      	str	r3, [r2, #24]
 8003042:	4b56      	ldr	r3, [pc, #344]	; (800319c <HAL_GPIO_Init+0x298>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800304e:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <HAL_GPIO_Init+0x29c>)
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	220f      	movs	r2, #15
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4013      	ands	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a4b      	ldr	r2, [pc, #300]	; (80031a4 <HAL_GPIO_Init+0x2a0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_GPIO_Init+0x19e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <HAL_GPIO_Init+0x2a4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00d      	beq.n	800309e <HAL_GPIO_Init+0x19a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a49      	ldr	r2, [pc, #292]	; (80031ac <HAL_GPIO_Init+0x2a8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <HAL_GPIO_Init+0x196>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a48      	ldr	r2, [pc, #288]	; (80031b0 <HAL_GPIO_Init+0x2ac>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_GPIO_Init+0x192>
 8003092:	2303      	movs	r3, #3
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x1a0>
 8003096:	2304      	movs	r3, #4
 8003098:	e004      	b.n	80030a4 <HAL_GPIO_Init+0x1a0>
 800309a:	2302      	movs	r3, #2
 800309c:	e002      	b.n	80030a4 <HAL_GPIO_Init+0x1a0>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_GPIO_Init+0x1a0>
 80030a2:	2300      	movs	r3, #0
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	f002 0203 	and.w	r2, r2, #3
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	4093      	lsls	r3, r2
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030b4:	493a      	ldr	r1, [pc, #232]	; (80031a0 <HAL_GPIO_Init+0x29c>)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030ce:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4938      	ldr	r1, [pc, #224]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
 80030da:	e006      	b.n	80030ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030dc:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	4933      	ldr	r1, [pc, #204]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030f6:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	492e      	ldr	r1, [pc, #184]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
 8003102:	e006      	b.n	8003112 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003104:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	43db      	mvns	r3, r3
 800310c:	4929      	ldr	r1, [pc, #164]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 800310e:	4013      	ands	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800311e:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	4924      	ldr	r1, [pc, #144]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
 800312a:	e006      	b.n	800313a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800312c:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	43db      	mvns	r3, r3
 8003134:	491f      	ldr	r1, [pc, #124]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 8003136:	4013      	ands	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003146:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	491a      	ldr	r1, [pc, #104]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	60cb      	str	r3, [r1, #12]
 8003152:	e006      	b.n	8003162 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	43db      	mvns	r3, r3
 800315c:	4915      	ldr	r1, [pc, #84]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 800315e:	4013      	ands	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	3301      	adds	r3, #1
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	f47f aed0 	bne.w	8002f18 <HAL_GPIO_Init+0x14>
  }
}
 8003178:	bf00      	nop
 800317a:	372c      	adds	r7, #44	; 0x2c
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	10210000 	.word	0x10210000
 8003188:	10110000 	.word	0x10110000
 800318c:	10120000 	.word	0x10120000
 8003190:	10310000 	.word	0x10310000
 8003194:	10320000 	.word	0x10320000
 8003198:	10220000 	.word	0x10220000
 800319c:	40021000 	.word	0x40021000
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40010800 	.word	0x40010800
 80031a8:	40010c00 	.word	0x40010c00
 80031ac:	40011000 	.word	0x40011000
 80031b0:	40011400 	.word	0x40011400
 80031b4:	40010400 	.word	0x40010400

080031b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
 80031c4:	4613      	mov	r3, r2
 80031c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031c8:	787b      	ldrb	r3, [r7, #1]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031d4:	e003      	b.n	80031de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	041a      	lsls	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	611a      	str	r2, [r3, #16]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e26c      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8087 	beq.w	8003316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003208:	4b92      	ldr	r3, [pc, #584]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b04      	cmp	r3, #4
 8003212:	d00c      	beq.n	800322e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003214:	4b8f      	ldr	r3, [pc, #572]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d112      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
 8003220:	4b8c      	ldr	r3, [pc, #560]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b89      	ldr	r3, [pc, #548]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06c      	beq.n	8003314 <HAL_RCC_OscConfig+0x12c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d168      	bne.n	8003314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e246      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x76>
 8003250:	4b80      	ldr	r3, [pc, #512]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7f      	ldr	r2, [pc, #508]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e02e      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x98>
 8003266:	4b7b      	ldr	r3, [pc, #492]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7a      	ldr	r2, [pc, #488]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b78      	ldr	r3, [pc, #480]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a77      	ldr	r2, [pc, #476]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0xbc>
 800328a:	4b72      	ldr	r3, [pc, #456]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a71      	ldr	r2, [pc, #452]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 80032a4:	4b6b      	ldr	r3, [pc, #428]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6a      	ldr	r2, [pc, #424]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b68      	ldr	r3, [pc, #416]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a67      	ldr	r2, [pc, #412]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7ff fa80 	bl	80027c8 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7ff fa7c 	bl	80027c8 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e1fa      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0xe4>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7ff fa6c 	bl	80027c8 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff fa68 	bl	80027c8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1e6      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x10c>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d063      	beq.n	80033ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003322:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800332e:	4b49      	ldr	r3, [pc, #292]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d11c      	bne.n	8003374 <HAL_RCC_OscConfig+0x18c>
 800333a:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x176>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1ba      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4939      	ldr	r1, [pc, #228]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	e03a      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b36      	ldr	r3, [pc, #216]	; (8003458 <HAL_RCC_OscConfig+0x270>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7ff fa21 	bl	80027c8 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7ff fa1d 	bl	80027c8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e19b      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4927      	ldr	r1, [pc, #156]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b26      	ldr	r3, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x270>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7ff fa00 	bl	80027c8 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033cc:	f7ff f9fc 	bl	80027c8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e17a      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d03a      	beq.n	800346c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b17      	ldr	r3, [pc, #92]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003404:	f7ff f9e0 	bl	80027c8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340c:	f7ff f9dc 	bl	80027c8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e15a      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800342a:	2001      	movs	r0, #1
 800342c:	f000 fafa 	bl	8003a24 <RCC_Delay>
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7ff f9c6 	bl	80027c8 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343e:	e00f      	b.n	8003460 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7ff f9c2 	bl	80027c8 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d908      	bls.n	8003460 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e140      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	42420000 	.word	0x42420000
 800345c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b9e      	ldr	r3, [pc, #632]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e9      	bne.n	8003440 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a6 	beq.w	80035c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b97      	ldr	r3, [pc, #604]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	4b94      	ldr	r3, [pc, #592]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	4a93      	ldr	r2, [pc, #588]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003494:	61d3      	str	r3, [r2, #28]
 8003496:	4b91      	ldr	r3, [pc, #580]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b8e      	ldr	r3, [pc, #568]	; (80036e0 <HAL_RCC_OscConfig+0x4f8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d118      	bne.n	80034e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b2:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCC_OscConfig+0x4f8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a8a      	ldr	r2, [pc, #552]	; (80036e0 <HAL_RCC_OscConfig+0x4f8>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034be:	f7ff f983 	bl	80027c8 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7ff f97f 	bl	80027c8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	; 0x64
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0fd      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <HAL_RCC_OscConfig+0x4f8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x312>
 80034ec:	4b7b      	ldr	r3, [pc, #492]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a7a      	ldr	r2, [pc, #488]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6213      	str	r3, [r2, #32]
 80034f8:	e02d      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x334>
 8003502:	4b76      	ldr	r3, [pc, #472]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a75      	ldr	r2, [pc, #468]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	4b73      	ldr	r3, [pc, #460]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a72      	ldr	r2, [pc, #456]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	e01c      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b05      	cmp	r3, #5
 8003522:	d10c      	bne.n	800353e <HAL_RCC_OscConfig+0x356>
 8003524:	4b6d      	ldr	r3, [pc, #436]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a6c      	ldr	r2, [pc, #432]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a69      	ldr	r2, [pc, #420]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	e00b      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 800353e:	4b67      	ldr	r3, [pc, #412]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a66      	ldr	r2, [pc, #408]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6213      	str	r3, [r2, #32]
 800354a:	4b64      	ldr	r3, [pc, #400]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a63      	ldr	r2, [pc, #396]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d015      	beq.n	800358a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355e:	f7ff f933 	bl	80027c8 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7ff f92f 	bl	80027c8 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0ab      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357c:	4b57      	ldr	r3, [pc, #348]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ee      	beq.n	8003566 <HAL_RCC_OscConfig+0x37e>
 8003588:	e014      	b.n	80035b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7ff f91d 	bl	80027c8 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7ff f919 	bl	80027c8 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e095      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ee      	bne.n	8003592 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d105      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ba:	4b48      	ldr	r3, [pc, #288]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4a47      	ldr	r2, [pc, #284]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8081 	beq.w	80036d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d0:	4b42      	ldr	r3, [pc, #264]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d061      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d146      	bne.n	8003672 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e4:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_OscConfig+0x4fc>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7ff f8ed 	bl	80027c8 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7ff f8e9 	bl	80027c8 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e067      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003604:	4b35      	ldr	r3, [pc, #212]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d108      	bne.n	800362c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	492d      	ldr	r1, [pc, #180]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800362c:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a19      	ldr	r1, [r3, #32]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	430b      	orrs	r3, r1
 800363e:	4927      	ldr	r1, [pc, #156]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_RCC_OscConfig+0x4fc>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7ff f8bd 	bl	80027c8 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7ff f8b9 	bl	80027c8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e037      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003664:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x46a>
 8003670:	e02f      	b.n	80036d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <HAL_RCC_OscConfig+0x4fc>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7ff f8a6 	bl	80027c8 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7ff f8a2 	bl	80027c8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e020      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x498>
 800369e:	e018      	b.n	80036d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e013      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40007000 	.word	0x40007000
 80036e4:	42420060 	.word	0x42420060

080036e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0d0      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d910      	bls.n	800372c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b67      	ldr	r3, [pc, #412]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 0207 	bic.w	r2, r3, #7
 8003712:	4965      	ldr	r1, [pc, #404]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b63      	ldr	r3, [pc, #396]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0b8      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d020      	beq.n	800377a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003744:	4b59      	ldr	r3, [pc, #356]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800374e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800375c:	4b53      	ldr	r3, [pc, #332]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a52      	ldr	r2, [pc, #328]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003766:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b50      	ldr	r3, [pc, #320]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	494d      	ldr	r1, [pc, #308]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d040      	beq.n	8003808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	4b47      	ldr	r3, [pc, #284]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d115      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e07f      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	4b41      	ldr	r3, [pc, #260]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e073      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e06b      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4936      	ldr	r1, [pc, #216]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d8:	f7fe fff6 	bl	80027c8 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fe fff2 	bl	80027c8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e053      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 020c 	and.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d1eb      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003808:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d210      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 0207 	bic.w	r2, r3, #7
 800381e:	4922      	ldr	r1, [pc, #136]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e032      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4916      	ldr	r1, [pc, #88]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	490e      	ldr	r1, [pc, #56]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003876:	f000 f82d 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 800387a:	4601      	mov	r1, r0
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	fa21 f303 	lsr.w	r3, r1, r3
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe ff54 	bl	8002744 <HAL_InitTick>

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40022000 	.word	0x40022000
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08007798 	.word	0x08007798
 80038b4:	2000001c 	.word	0x2000001c
 80038b8:	20000020 	.word	0x20000020

080038bc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCC_EnableCSS+0x14>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	4242004c 	.word	0x4242004c

080038d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d4:	b490      	push	{r4, r7}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038da:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038dc:	1d3c      	adds	r4, r7, #4
 80038de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038e4:	4b28      	ldr	r3, [pc, #160]	; (8003988 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038fe:	4b23      	ldr	r3, [pc, #140]	; (800398c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b04      	cmp	r3, #4
 800390c:	d002      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x40>
 800390e:	2b08      	cmp	r3, #8
 8003910:	d003      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x46>
 8003912:	e02d      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003916:	623b      	str	r3, [r7, #32]
      break;
 8003918:	e02d      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	0c9b      	lsrs	r3, r3, #18
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003926:	4413      	add	r3, r2
 8003928:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800392c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <HAL_RCC_GetSysClockFreq+0xb8>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	0c5b      	lsrs	r3, r3, #17
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003946:	4413      	add	r3, r2
 8003948:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800394c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4a0f      	ldr	r2, [pc, #60]	; (8003990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003952:	fb02 f203 	mul.w	r2, r2, r3
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
 800395e:	e004      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003964:	fb02 f303 	mul.w	r3, r2, r3
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	623b      	str	r3, [r7, #32]
      break;
 800396e:	e002      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003972:	623b      	str	r3, [r7, #32]
      break;
 8003974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003976:	6a3b      	ldr	r3, [r7, #32]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3728      	adds	r7, #40	; 0x28
 800397c:	46bd      	mov	sp, r7
 800397e:	bc90      	pop	{r4, r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	08007784 	.word	0x08007784
 8003988:	08007794 	.word	0x08007794
 800398c:	40021000 	.word	0x40021000
 8003990:	007a1200 	.word	0x007a1200
 8003994:	003d0900 	.word	0x003d0900

08003998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b02      	ldr	r3, [pc, #8]	; (80039a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	2000001c 	.word	0x2000001c

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b0:	f7ff fff2 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b4:	4601      	mov	r1, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4a03      	ldr	r2, [pc, #12]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	080077a8 	.word	0x080077a8

080039d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d8:	f7ff ffde 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039dc:	4601      	mov	r1, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	0adb      	lsrs	r3, r3, #11
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4a03      	ldr	r2, [pc, #12]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	080077a8 	.word	0x080077a8

080039fc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d104      	bne.n	8003a16 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003a0c:	f000 f828 	bl	8003a60 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003a12:	2280      	movs	r2, #128	; 0x80
 8003a14:	701a      	strb	r2, [r3, #0]
  }
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	4002100a 	.word	0x4002100a

08003a24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <RCC_Delay+0x34>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <RCC_Delay+0x38>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0a5b      	lsrs	r3, r3, #9
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a40:	bf00      	nop
  }
  while (Delay --);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	60fa      	str	r2, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f9      	bne.n	8003a40 <RCC_Delay+0x1c>
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	2000001c 	.word	0x2000001c
 8003a5c:	10624dd3 	.word	0x10624dd3

08003a60 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e041      	b.n	8003b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fffc 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f000 fd4c 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d001      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e03a      	b.n	8003b9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_TIM_Base_Start_IT+0x98>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x58>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x58>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x58>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <HAL_TIM_Base_Start_IT+0xa0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d111      	bne.n	8003b88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d010      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b86:	e007      	b.n	8003b98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800

08003bb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e041      	b.n	8003c46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f839 	bl	8003c4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f000 fcaa 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_TIM_PWM_Start+0x24>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e022      	b.n	8003cca <HAL_TIM_PWM_Start+0x6a>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d109      	bne.n	8003c9e <HAL_TIM_PWM_Start+0x3e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	bf14      	ite	ne
 8003c96:	2301      	movne	r3, #1
 8003c98:	2300      	moveq	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	e015      	b.n	8003cca <HAL_TIM_PWM_Start+0x6a>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d109      	bne.n	8003cb8 <HAL_TIM_PWM_Start+0x58>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e008      	b.n	8003cca <HAL_TIM_PWM_Start+0x6a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e05e      	b.n	8003d90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0x82>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce0:	e013      	b.n	8003d0a <HAL_TIM_PWM_Start+0xaa>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0x92>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf0:	e00b      	b.n	8003d0a <HAL_TIM_PWM_Start+0xaa>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIM_PWM_Start+0xa2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d00:	e003      	b.n	8003d0a <HAL_TIM_PWM_Start+0xaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fe98 	bl	8004a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <HAL_TIM_PWM_Start+0x138>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d107      	bne.n	8003d32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_TIM_PWM_Start+0x138>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_TIM_PWM_Start+0xfa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d009      	beq.n	8003d5a <HAL_TIM_PWM_Start+0xfa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <HAL_TIM_PWM_Start+0x13c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_TIM_PWM_Start+0xfa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_TIM_PWM_Start+0x140>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d111      	bne.n	8003d7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b06      	cmp	r3, #6
 8003d6a:	d010      	beq.n	8003d8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7c:	e007      	b.n	8003d8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0201 	orr.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800

08003da4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e093      	b.n	8003ee0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fd fe97 	bl	8001b00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de8:	f023 0307 	bic.w	r3, r3, #7
 8003dec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 fba5 	bl	8004548 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	4313      	orrs	r3, r2
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e44:	f023 030c 	bic.w	r3, r3, #12
 8003e48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	4313      	orrs	r3, r2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	011a      	lsls	r2, r3, #4
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	031b      	lsls	r3, r3, #12
 8003e74:	4313      	orrs	r3, r2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d110      	bne.n	8003f3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f1e:	7b7b      	ldrb	r3, [r7, #13]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d001      	beq.n	8003f28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e068      	b.n	8003ffa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f38:	e031      	b.n	8003f9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d110      	bne.n	8003f62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f40:	7bbb      	ldrb	r3, [r7, #14]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d102      	bne.n	8003f4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f46:	7b3b      	ldrb	r3, [r7, #12]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d001      	beq.n	8003f50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e054      	b.n	8003ffa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f60:	e01d      	b.n	8003f9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d108      	bne.n	8003f7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f6e:	7b7b      	ldrb	r3, [r7, #13]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d102      	bne.n	8003f7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f74:	7b3b      	ldrb	r3, [r7, #12]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d001      	beq.n	8003f7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e03d      	b.n	8003ffa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_TIM_Encoder_Start+0xc2>
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d008      	beq.n	8003fba <HAL_TIM_Encoder_Start+0xd2>
 8003fa8:	e00f      	b.n	8003fca <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fd48 	bl	8004a48 <TIM_CCxChannelCmd>
      break;
 8003fb8:	e016      	b.n	8003fe8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fd40 	bl	8004a48 <TIM_CCxChannelCmd>
      break;
 8003fc8:	e00e      	b.n	8003fe8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fd38 	bl	8004a48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2104      	movs	r1, #4
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fd31 	bl	8004a48 <TIM_CCxChannelCmd>
      break;
 8003fe6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b02      	cmp	r3, #2
 8004016:	d122      	bne.n	800405e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d11b      	bne.n	800405e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f06f 0202 	mvn.w	r2, #2
 800402e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fa63 	bl	8004510 <HAL_TIM_IC_CaptureCallback>
 800404a:	e005      	b.n	8004058 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fa56 	bl	80044fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa65 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b04      	cmp	r3, #4
 800406a:	d122      	bne.n	80040b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d11b      	bne.n	80040b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0204 	mvn.w	r2, #4
 8004082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fa39 	bl	8004510 <HAL_TIM_IC_CaptureCallback>
 800409e:	e005      	b.n	80040ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fa2c 	bl	80044fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa3b 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d122      	bne.n	8004106 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d11b      	bne.n	8004106 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0208 	mvn.w	r2, #8
 80040d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2204      	movs	r2, #4
 80040dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fa0f 	bl	8004510 <HAL_TIM_IC_CaptureCallback>
 80040f2:	e005      	b.n	8004100 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fa02 	bl	80044fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa11 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b10      	cmp	r3, #16
 8004112:	d122      	bne.n	800415a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d11b      	bne.n	800415a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0210 	mvn.w	r2, #16
 800412a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2208      	movs	r2, #8
 8004130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f9e5 	bl	8004510 <HAL_TIM_IC_CaptureCallback>
 8004146:	e005      	b.n	8004154 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f9d8 	bl	80044fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9e7 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10e      	bne.n	8004186 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0201 	mvn.w	r2, #1
 800417e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fd f94d 	bl	8001420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004190:	2b80      	cmp	r3, #128	; 0x80
 8004192:	d10e      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d107      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fd27 	bl	8004c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d10e      	bne.n	80041de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d107      	bne.n	80041de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f9ab 	bl	8004534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d10e      	bne.n	800420a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d107      	bne.n	800420a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f06f 0220 	mvn.w	r2, #32
 8004202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fcf2 	bl	8004bee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800422a:	2302      	movs	r3, #2
 800422c:	e0ac      	b.n	8004388 <HAL_TIM_PWM_ConfigChannel+0x174>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b0c      	cmp	r3, #12
 800423a:	f200 809f 	bhi.w	800437c <HAL_TIM_PWM_ConfigChannel+0x168>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004279 	.word	0x08004279
 8004248:	0800437d 	.word	0x0800437d
 800424c:	0800437d 	.word	0x0800437d
 8004250:	0800437d 	.word	0x0800437d
 8004254:	080042b9 	.word	0x080042b9
 8004258:	0800437d 	.word	0x0800437d
 800425c:	0800437d 	.word	0x0800437d
 8004260:	0800437d 	.word	0x0800437d
 8004264:	080042fb 	.word	0x080042fb
 8004268:	0800437d 	.word	0x0800437d
 800426c:	0800437d 	.word	0x0800437d
 8004270:	0800437d 	.word	0x0800437d
 8004274:	0800433b 	.word	0x0800433b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f9c4 	bl	800460c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0208 	orr.w	r2, r2, #8
 8004292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0204 	bic.w	r2, r2, #4
 80042a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6999      	ldr	r1, [r3, #24]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	619a      	str	r2, [r3, #24]
      break;
 80042b6:	e062      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fa0a 	bl	80046d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6999      	ldr	r1, [r3, #24]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	021a      	lsls	r2, r3, #8
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	619a      	str	r2, [r3, #24]
      break;
 80042f8:	e041      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fa53 	bl	80047ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0208 	orr.w	r2, r2, #8
 8004314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0204 	bic.w	r2, r2, #4
 8004324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69d9      	ldr	r1, [r3, #28]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	61da      	str	r2, [r3, #28]
      break;
 8004338:	e021      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fa9d 	bl	8004880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69d9      	ldr	r1, [r3, #28]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	021a      	lsls	r2, r3, #8
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	61da      	str	r2, [r3, #28]
      break;
 800437a:	e000      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800437c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIM_ConfigClockSource+0x18>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e0a6      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x166>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d067      	beq.n	80044b0 <HAL_TIM_ConfigClockSource+0x120>
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d80b      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x6c>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d073      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0x140>
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d802      	bhi.n	80043f2 <HAL_TIM_ConfigClockSource+0x62>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d06f      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043f0:	e078      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d06c      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0x140>
 80043f6:	2b30      	cmp	r3, #48	; 0x30
 80043f8:	d06a      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043fa:	e073      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043fc:	2b70      	cmp	r3, #112	; 0x70
 80043fe:	d00d      	beq.n	800441c <HAL_TIM_ConfigClockSource+0x8c>
 8004400:	2b70      	cmp	r3, #112	; 0x70
 8004402:	d804      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x7e>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d033      	beq.n	8004470 <HAL_TIM_ConfigClockSource+0xe0>
 8004408:	2b60      	cmp	r3, #96	; 0x60
 800440a:	d041      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800440c:	e06a      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004412:	d066      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x152>
 8004414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004418:	d017      	beq.n	800444a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800441a:	e063      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6899      	ldr	r1, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f000 faed 	bl	8004a0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800443e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	609a      	str	r2, [r3, #8]
      break;
 8004448:	e04c      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6899      	ldr	r1, [r3, #8]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f000 fad6 	bl	8004a0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800446c:	609a      	str	r2, [r3, #8]
      break;
 800446e:	e039      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	461a      	mov	r2, r3
 800447e:	f000 fa4d 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2150      	movs	r1, #80	; 0x50
 8004488:	4618      	mov	r0, r3
 800448a:	f000 faa4 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 800448e:	e029      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	461a      	mov	r2, r3
 800449e:	f000 fa6b 	bl	8004978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2160      	movs	r1, #96	; 0x60
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fa94 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80044ae:	e019      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	461a      	mov	r2, r3
 80044be:	f000 fa2d 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2140      	movs	r1, #64	; 0x40
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fa84 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80044ce:	e009      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 fa7b 	bl	80049d6 <TIM_ITRx_SetConfig>
        break;
 80044e0:	e000      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80044e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
	...

08004548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <TIM_Base_SetConfig+0xb8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_Base_SetConfig+0x30>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0x30>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a26      	ldr	r2, [pc, #152]	; (8004604 <TIM_Base_SetConfig+0xbc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0x30>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a25      	ldr	r2, [pc, #148]	; (8004608 <TIM_Base_SetConfig+0xc0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d108      	bne.n	800458a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <TIM_Base_SetConfig+0xb8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00b      	beq.n	80045aa <TIM_Base_SetConfig+0x62>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004598:	d007      	beq.n	80045aa <TIM_Base_SetConfig+0x62>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <TIM_Base_SetConfig+0xbc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_Base_SetConfig+0x62>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <TIM_Base_SetConfig+0xc0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a07      	ldr	r2, [pc, #28]	; (8004600 <TIM_Base_SetConfig+0xb8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d103      	bne.n	80045f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	615a      	str	r2, [r3, #20]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800

0800460c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 0302 	bic.w	r3, r3, #2
 8004654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <TIM_OC1_SetConfig+0xc8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d10c      	bne.n	8004682 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0308 	bic.w	r3, r3, #8
 800466e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 0304 	bic.w	r3, r3, #4
 8004680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <TIM_OC1_SetConfig+0xc8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d111      	bne.n	80046ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	621a      	str	r2, [r3, #32]
}
 80046c8:	bf00      	nop
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00

080046d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0210 	bic.w	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0320 	bic.w	r3, r3, #32
 8004722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <TIM_OC2_SetConfig+0xd0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10d      	bne.n	8004754 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <TIM_OC2_SetConfig+0xd0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d113      	bne.n	8004784 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800476a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	40012c00 	.word	0x40012c00

080047ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1d      	ldr	r2, [pc, #116]	; (800487c <TIM_OC3_SetConfig+0xd0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d10d      	bne.n	8004826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a14      	ldr	r2, [pc, #80]	; (800487c <TIM_OC3_SetConfig+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d113      	bne.n	8004856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00

08004880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0f      	ldr	r2, [pc, #60]	; (8004918 <TIM_OC4_SetConfig+0x98>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d109      	bne.n	80048f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	019b      	lsls	r3, r3, #6
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00

0800491c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 0210 	bic.w	r2, r3, #16
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	031b      	lsls	r3, r3, #12
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	621a      	str	r2, [r3, #32]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f043 0307 	orr.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	609a      	str	r2, [r3, #8]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1a      	ldr	r2, [r3, #32]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	431a      	orrs	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e046      	b.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d009      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10c      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800

08004b4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e03d      	b.n	8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr

08004c12 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e03f      	b.n	8004ca4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fd f82f 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2224      	movs	r2, #36	; 0x24
 8004c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fd2e 	bl	80056b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d17c      	bne.n	8004dc6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_UART_Transmit+0x2c>
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e075      	b.n	8004dc8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Transmit+0x3e>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e06e      	b.n	8004dc8 <HAL_UART_Transmit+0x11c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2221      	movs	r2, #33	; 0x21
 8004cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d00:	f7fd fd62 	bl	80027c8 <HAL_GetTick>
 8004d04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	d108      	bne.n	8004d2e <HAL_UART_Transmit+0x82>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	e003      	b.n	8004d36 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d3e:	e02a      	b.n	8004d96 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2200      	movs	r2, #0
 8004d48:	2180      	movs	r1, #128	; 0x80
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fb3c 	bl	80053c8 <UART_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e036      	b.n	8004dc8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d6e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	3302      	adds	r3, #2
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	e007      	b.n	8004d88 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1cf      	bne.n	8004d40 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2200      	movs	r2, #0
 8004da8:	2140      	movs	r1, #64	; 0x40
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fb0c 	bl	80053c8 <UART_WaitOnFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e006      	b.n	8004dc8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e000      	b.n	8004dc8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004dc6:	2302      	movs	r3, #2
  }
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	f040 8089 	bne.w	8004f04 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_UART_Receive+0x2e>
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e081      	b.n	8004f06 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Receive+0x40>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e07a      	b.n	8004f06 <HAL_UART_Receive+0x136>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2222      	movs	r2, #34	; 0x22
 8004e22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e26:	f7fd fccf 	bl	80027c8 <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e40:	d108      	bne.n	8004e54 <HAL_UART_Receive+0x84>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	e003      	b.n	8004e5c <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e64:	e043      	b.n	8004eee <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2120      	movs	r1, #32
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 faa9 	bl	80053c8 <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e042      	b.n	8004f06 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e01f      	b.n	8004ee0 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea8:	d007      	beq.n	8004eba <HAL_UART_Receive+0xea>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_UART_Receive+0xf8>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	e008      	b.n	8004eda <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3301      	adds	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1b6      	bne.n	8004e66 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d140      	bne.n	8004faa <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_UART_Receive_IT+0x26>
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e039      	b.n	8004fac <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Receive_IT+0x38>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e032      	b.n	8004fac <HAL_UART_Receive_IT+0x9e>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2222      	movs	r2, #34	; 0x22
 8004f6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f84:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0220 	orr.w	r2, r2, #32
 8004fa4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e000      	b.n	8004fac <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004faa:	2302      	movs	r3, #2
  }
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
	...

08004fb8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d153      	bne.n	800507a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_UART_Transmit_DMA+0x26>
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e04c      	b.n	800507c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_UART_Transmit_DMA+0x38>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e045      	b.n	800507c <HAL_UART_Transmit_DMA+0xc4>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2221      	movs	r2, #33	; 0x21
 8005014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_UART_Transmit_DMA+0xcc>)
 800501e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	4a18      	ldr	r2, [pc, #96]	; (8005088 <HAL_UART_Transmit_DMA+0xd0>)
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	4a17      	ldr	r2, [pc, #92]	; (800508c <HAL_UART_Transmit_DMA+0xd4>)
 800502e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	2200      	movs	r2, #0
 8005036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005038:	f107 0308 	add.w	r3, r7, #8
 800503c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6819      	ldr	r1, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3304      	adds	r3, #4
 800504c:	461a      	mov	r2, r3
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	f7fd fd4e 	bl	8002af0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800505c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005074:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	080052c7 	.word	0x080052c7
 8005088:	08005319 	.word	0x08005319
 800508c:	08005335 	.word	0x08005335

08005090 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_UART_IRQHandler+0x52>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa6b 	bl	80055b6 <UART_Receive_IT>
      return;
 80050e0:	e0d1      	b.n	8005286 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80b0 	beq.w	800524a <HAL_UART_IRQHandler+0x1ba>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d105      	bne.n	8005100 <HAL_UART_IRQHandler+0x70>
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80a5 	beq.w	800524a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_UART_IRQHandler+0x90>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	f043 0201 	orr.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_UART_IRQHandler+0xb0>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	f043 0202 	orr.w	r2, r3, #2
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_UART_IRQHandler+0xd0>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	f043 0204 	orr.w	r2, r3, #4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00f      	beq.n	800518a <HAL_UART_IRQHandler+0xfa>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <HAL_UART_IRQHandler+0xee>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	f043 0208 	orr.w	r2, r3, #8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d078      	beq.n	8005284 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_UART_IRQHandler+0x11c>
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa05 	bl	80055b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bf14      	ite	ne
 80051ba:	2301      	movne	r3, #1
 80051bc:	2300      	moveq	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d102      	bne.n	80051d4 <HAL_UART_IRQHandler+0x144>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d031      	beq.n	8005238 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f956 	bl	8005486 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d023      	beq.n	8005230 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d013      	beq.n	8005228 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005204:	4a21      	ldr	r2, [pc, #132]	; (800528c <HAL_UART_IRQHandler+0x1fc>)
 8005206:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	4618      	mov	r0, r3
 800520e:	f7fd fccf 	bl	8002bb0 <HAL_DMA_Abort_IT>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d016      	beq.n	8005246 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005222:	4610      	mov	r0, r2
 8005224:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005226:	e00e      	b.n	8005246 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f843 	bl	80052b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522e:	e00a      	b.n	8005246 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f83f 	bl	80052b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005236:	e006      	b.n	8005246 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f83b 	bl	80052b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005244:	e01e      	b.n	8005284 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005246:	bf00      	nop
    return;
 8005248:	e01c      	b.n	8005284 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_UART_IRQHandler+0x1d6>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f942 	bl	80054e8 <UART_Transmit_IT>
    return;
 8005264:	e00f      	b.n	8005286 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_UART_IRQHandler+0x1f6>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f983 	bl	8005586 <UART_EndTransmit_IT>
    return;
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005284:	bf00      	nop
  }
}
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	080054c1 	.word	0x080054c1

08005290 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr

080052b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr

080052c6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d113      	bne.n	800530a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052f6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005306:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005308:	e002      	b.n	8005310 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7ff ffc0 	bl	8005290 <HAL_UART_TxCpltCallback>
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff ffbb 	bl	80052a2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf14      	ite	ne
 8005354:	2301      	movne	r3, #1
 8005356:	2300      	moveq	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b21      	cmp	r3, #33	; 0x21
 8005366:	d108      	bne.n	800537a <UART_DMAError+0x46>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005374:	68b8      	ldr	r0, [r7, #8]
 8005376:	f000 f871 	bl	800545c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b22      	cmp	r3, #34	; 0x22
 800539a:	d108      	bne.n	80053ae <UART_DMAError+0x7a>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2200      	movs	r2, #0
 80053a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80053a8:	68b8      	ldr	r0, [r7, #8]
 80053aa:	f000 f86c 	bl	8005486 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b2:	f043 0210 	orr.w	r2, r3, #16
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ba:	68b8      	ldr	r0, [r7, #8]
 80053bc:	f7ff ff7a 	bl	80052b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d8:	e02c      	b.n	8005434 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d028      	beq.n	8005434 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d007      	beq.n	80053f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80053e8:	f7fd f9ee 	bl	80027c8 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d21d      	bcs.n	8005434 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005406:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e00f      	b.n	8005454 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4013      	ands	r3, r2
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	429a      	cmp	r2, r3
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	429a      	cmp	r2, r3
 8005450:	d0c3      	beq.n	80053da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005472:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800549c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f7ff feea 	bl	80052b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b21      	cmp	r3, #33	; 0x21
 80054fa:	d13e      	bne.n	800557a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005504:	d114      	bne.n	8005530 <UART_Transmit_IT+0x48>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d110      	bne.n	8005530 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005522:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	1c9a      	adds	r2, r3, #2
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]
 800552e:	e008      	b.n	8005542 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	1c59      	adds	r1, r3, #1
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6211      	str	r1, [r2, #32]
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29b      	uxth	r3, r3
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4619      	mov	r1, r3
 8005550:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10f      	bne.n	8005576 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005564:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005574:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	e000      	b.n	800557c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800557a:	2302      	movs	r3, #2
  }
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr

08005586 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fe72 	bl	8005290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b22      	cmp	r3, #34	; 0x22
 80055c8:	d170      	bne.n	80056ac <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d117      	bne.n	8005604 <UART_Receive_IT+0x4e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d113      	bne.n	8005604 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	1c9a      	adds	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	629a      	str	r2, [r3, #40]	; 0x28
 8005602:	e026      	b.n	8005652 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005616:	d007      	beq.n	8005628 <UART_Receive_IT+0x72>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <UART_Receive_IT+0x80>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	b2da      	uxtb	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e008      	b.n	8005648 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29b      	uxth	r3, r3
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4619      	mov	r1, r3
 8005660:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005662:	2b00      	cmp	r3, #0
 8005664:	d120      	bne.n	80056a8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0220 	bic.w	r2, r2, #32
 8005674:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695a      	ldr	r2, [r3, #20]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fb ffb2 	bl	8001608 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e002      	b.n	80056ae <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056f2:	f023 030c 	bic.w	r3, r3, #12
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	430b      	orrs	r3, r1
 80056fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2c      	ldr	r2, [pc, #176]	; (80057cc <UART_SetConfig+0x114>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d103      	bne.n	8005728 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005720:	f7fe f958 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	e002      	b.n	800572e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005728:	f7fe f940 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 800572c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009a      	lsls	r2, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	fbb2 f3f3 	udiv	r3, r2, r3
 8005744:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <UART_SetConfig+0x118>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	0119      	lsls	r1, r3, #4
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009a      	lsls	r2, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	fbb2 f2f3 	udiv	r2, r2, r3
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <UART_SetConfig+0x118>)
 8005766:	fba3 0302 	umull	r0, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	2064      	movs	r0, #100	; 0x64
 800576e:	fb00 f303 	mul.w	r3, r0, r3
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	3332      	adds	r3, #50	; 0x32
 8005778:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <UART_SetConfig+0x118>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005784:	4419      	add	r1, r3
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009a      	lsls	r2, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	fbb2 f2f3 	udiv	r2, r2, r3
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <UART_SetConfig+0x118>)
 800579e:	fba3 0302 	umull	r0, r3, r3, r2
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	2064      	movs	r0, #100	; 0x64
 80057a6:	fb00 f303 	mul.w	r3, r0, r3
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	3332      	adds	r3, #50	; 0x32
 80057b0:	4a07      	ldr	r2, [pc, #28]	; (80057d0 <UART_SetConfig+0x118>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	440a      	add	r2, r1
 80057c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40013800 	.word	0x40013800
 80057d0:	51eb851f 	.word	0x51eb851f

080057d4 <__errno>:
 80057d4:	4b01      	ldr	r3, [pc, #4]	; (80057dc <__errno+0x8>)
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000028 	.word	0x20000028

080057e0 <__libc_init_array>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	2500      	movs	r5, #0
 80057e4:	4e0c      	ldr	r6, [pc, #48]	; (8005818 <__libc_init_array+0x38>)
 80057e6:	4c0d      	ldr	r4, [pc, #52]	; (800581c <__libc_init_array+0x3c>)
 80057e8:	1ba4      	subs	r4, r4, r6
 80057ea:	10a4      	asrs	r4, r4, #2
 80057ec:	42a5      	cmp	r5, r4
 80057ee:	d109      	bne.n	8005804 <__libc_init_array+0x24>
 80057f0:	f001 ffb2 	bl	8007758 <_init>
 80057f4:	2500      	movs	r5, #0
 80057f6:	4e0a      	ldr	r6, [pc, #40]	; (8005820 <__libc_init_array+0x40>)
 80057f8:	4c0a      	ldr	r4, [pc, #40]	; (8005824 <__libc_init_array+0x44>)
 80057fa:	1ba4      	subs	r4, r4, r6
 80057fc:	10a4      	asrs	r4, r4, #2
 80057fe:	42a5      	cmp	r5, r4
 8005800:	d105      	bne.n	800580e <__libc_init_array+0x2e>
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005808:	4798      	blx	r3
 800580a:	3501      	adds	r5, #1
 800580c:	e7ee      	b.n	80057ec <__libc_init_array+0xc>
 800580e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005812:	4798      	blx	r3
 8005814:	3501      	adds	r5, #1
 8005816:	e7f2      	b.n	80057fe <__libc_init_array+0x1e>
 8005818:	08009408 	.word	0x08009408
 800581c:	08009408 	.word	0x08009408
 8005820:	08009408 	.word	0x08009408
 8005824:	0800940c 	.word	0x0800940c

08005828 <memset>:
 8005828:	4603      	mov	r3, r0
 800582a:	4402      	add	r2, r0
 800582c:	4293      	cmp	r3, r2
 800582e:	d100      	bne.n	8005832 <memset+0xa>
 8005830:	4770      	bx	lr
 8005832:	f803 1b01 	strb.w	r1, [r3], #1
 8005836:	e7f9      	b.n	800582c <memset+0x4>

08005838 <iprintf>:
 8005838:	b40f      	push	{r0, r1, r2, r3}
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <iprintf+0x2c>)
 800583c:	b513      	push	{r0, r1, r4, lr}
 800583e:	681c      	ldr	r4, [r3, #0]
 8005840:	b124      	cbz	r4, 800584c <iprintf+0x14>
 8005842:	69a3      	ldr	r3, [r4, #24]
 8005844:	b913      	cbnz	r3, 800584c <iprintf+0x14>
 8005846:	4620      	mov	r0, r4
 8005848:	f000 f9ac 	bl	8005ba4 <__sinit>
 800584c:	ab05      	add	r3, sp, #20
 800584e:	9a04      	ldr	r2, [sp, #16]
 8005850:	68a1      	ldr	r1, [r4, #8]
 8005852:	4620      	mov	r0, r4
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	f000 fb69 	bl	8005f2c <_vfiprintf_r>
 800585a:	b002      	add	sp, #8
 800585c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005860:	b004      	add	sp, #16
 8005862:	4770      	bx	lr
 8005864:	20000028 	.word	0x20000028

08005868 <setvbuf>:
 8005868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800586c:	461d      	mov	r5, r3
 800586e:	4b51      	ldr	r3, [pc, #324]	; (80059b4 <setvbuf+0x14c>)
 8005870:	4604      	mov	r4, r0
 8005872:	681e      	ldr	r6, [r3, #0]
 8005874:	460f      	mov	r7, r1
 8005876:	4690      	mov	r8, r2
 8005878:	b126      	cbz	r6, 8005884 <setvbuf+0x1c>
 800587a:	69b3      	ldr	r3, [r6, #24]
 800587c:	b913      	cbnz	r3, 8005884 <setvbuf+0x1c>
 800587e:	4630      	mov	r0, r6
 8005880:	f000 f990 	bl	8005ba4 <__sinit>
 8005884:	4b4c      	ldr	r3, [pc, #304]	; (80059b8 <setvbuf+0x150>)
 8005886:	429c      	cmp	r4, r3
 8005888:	d152      	bne.n	8005930 <setvbuf+0xc8>
 800588a:	6874      	ldr	r4, [r6, #4]
 800588c:	f1b8 0f02 	cmp.w	r8, #2
 8005890:	d006      	beq.n	80058a0 <setvbuf+0x38>
 8005892:	f1b8 0f01 	cmp.w	r8, #1
 8005896:	f200 8089 	bhi.w	80059ac <setvbuf+0x144>
 800589a:	2d00      	cmp	r5, #0
 800589c:	f2c0 8086 	blt.w	80059ac <setvbuf+0x144>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4630      	mov	r0, r6
 80058a4:	f000 f914 	bl	8005ad0 <_fflush_r>
 80058a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058aa:	b141      	cbz	r1, 80058be <setvbuf+0x56>
 80058ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b0:	4299      	cmp	r1, r3
 80058b2:	d002      	beq.n	80058ba <setvbuf+0x52>
 80058b4:	4630      	mov	r0, r6
 80058b6:	f000 fa6b 	bl	8005d90 <_free_r>
 80058ba:	2300      	movs	r3, #0
 80058bc:	6363      	str	r3, [r4, #52]	; 0x34
 80058be:	2300      	movs	r3, #0
 80058c0:	61a3      	str	r3, [r4, #24]
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	061b      	lsls	r3, r3, #24
 80058c8:	d503      	bpl.n	80058d2 <setvbuf+0x6a>
 80058ca:	6921      	ldr	r1, [r4, #16]
 80058cc:	4630      	mov	r0, r6
 80058ce:	f000 fa5f 	bl	8005d90 <_free_r>
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	f1b8 0f02 	cmp.w	r8, #2
 80058d8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80058dc:	f023 0303 	bic.w	r3, r3, #3
 80058e0:	81a3      	strh	r3, [r4, #12]
 80058e2:	d05d      	beq.n	80059a0 <setvbuf+0x138>
 80058e4:	ab01      	add	r3, sp, #4
 80058e6:	466a      	mov	r2, sp
 80058e8:	4621      	mov	r1, r4
 80058ea:	4630      	mov	r0, r6
 80058ec:	f000 f9e4 	bl	8005cb8 <__swhatbuf_r>
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	4318      	orrs	r0, r3
 80058f4:	81a0      	strh	r0, [r4, #12]
 80058f6:	bb2d      	cbnz	r5, 8005944 <setvbuf+0xdc>
 80058f8:	9d00      	ldr	r5, [sp, #0]
 80058fa:	4628      	mov	r0, r5
 80058fc:	f000 fa40 	bl	8005d80 <malloc>
 8005900:	4607      	mov	r7, r0
 8005902:	2800      	cmp	r0, #0
 8005904:	d14e      	bne.n	80059a4 <setvbuf+0x13c>
 8005906:	f8dd 9000 	ldr.w	r9, [sp]
 800590a:	45a9      	cmp	r9, r5
 800590c:	d13c      	bne.n	8005988 <setvbuf+0x120>
 800590e:	f04f 30ff 	mov.w	r0, #4294967295
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	f043 0302 	orr.w	r3, r3, #2
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	2300      	movs	r3, #0
 800591c:	60a3      	str	r3, [r4, #8]
 800591e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	2301      	movs	r3, #1
 8005928:	6163      	str	r3, [r4, #20]
 800592a:	b003      	add	sp, #12
 800592c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005930:	4b22      	ldr	r3, [pc, #136]	; (80059bc <setvbuf+0x154>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d101      	bne.n	800593a <setvbuf+0xd2>
 8005936:	68b4      	ldr	r4, [r6, #8]
 8005938:	e7a8      	b.n	800588c <setvbuf+0x24>
 800593a:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <setvbuf+0x158>)
 800593c:	429c      	cmp	r4, r3
 800593e:	bf08      	it	eq
 8005940:	68f4      	ldreq	r4, [r6, #12]
 8005942:	e7a3      	b.n	800588c <setvbuf+0x24>
 8005944:	2f00      	cmp	r7, #0
 8005946:	d0d8      	beq.n	80058fa <setvbuf+0x92>
 8005948:	69b3      	ldr	r3, [r6, #24]
 800594a:	b913      	cbnz	r3, 8005952 <setvbuf+0xea>
 800594c:	4630      	mov	r0, r6
 800594e:	f000 f929 	bl	8005ba4 <__sinit>
 8005952:	f1b8 0f01 	cmp.w	r8, #1
 8005956:	bf08      	it	eq
 8005958:	89a3      	ldrheq	r3, [r4, #12]
 800595a:	6027      	str	r7, [r4, #0]
 800595c:	bf04      	itt	eq
 800595e:	f043 0301 	orreq.w	r3, r3, #1
 8005962:	81a3      	strheq	r3, [r4, #12]
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800596a:	f013 0008 	ands.w	r0, r3, #8
 800596e:	d01b      	beq.n	80059a8 <setvbuf+0x140>
 8005970:	f013 0001 	ands.w	r0, r3, #1
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	bf1f      	itttt	ne
 800597a:	426d      	negne	r5, r5
 800597c:	60a3      	strne	r3, [r4, #8]
 800597e:	61a5      	strne	r5, [r4, #24]
 8005980:	4618      	movne	r0, r3
 8005982:	bf08      	it	eq
 8005984:	60a5      	streq	r5, [r4, #8]
 8005986:	e7d0      	b.n	800592a <setvbuf+0xc2>
 8005988:	4648      	mov	r0, r9
 800598a:	f000 f9f9 	bl	8005d80 <malloc>
 800598e:	4607      	mov	r7, r0
 8005990:	2800      	cmp	r0, #0
 8005992:	d0bc      	beq.n	800590e <setvbuf+0xa6>
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	464d      	mov	r5, r9
 8005998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	e7d3      	b.n	8005948 <setvbuf+0xe0>
 80059a0:	2000      	movs	r0, #0
 80059a2:	e7b6      	b.n	8005912 <setvbuf+0xaa>
 80059a4:	46a9      	mov	r9, r5
 80059a6:	e7f5      	b.n	8005994 <setvbuf+0x12c>
 80059a8:	60a0      	str	r0, [r4, #8]
 80059aa:	e7be      	b.n	800592a <setvbuf+0xc2>
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	e7bb      	b.n	800592a <setvbuf+0xc2>
 80059b2:	bf00      	nop
 80059b4:	20000028 	.word	0x20000028
 80059b8:	080091bc 	.word	0x080091bc
 80059bc:	080091dc 	.word	0x080091dc
 80059c0:	0800919c 	.word	0x0800919c

080059c4 <__sflush_r>:
 80059c4:	898a      	ldrh	r2, [r1, #12]
 80059c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ca:	4605      	mov	r5, r0
 80059cc:	0710      	lsls	r0, r2, #28
 80059ce:	460c      	mov	r4, r1
 80059d0:	d458      	bmi.n	8005a84 <__sflush_r+0xc0>
 80059d2:	684b      	ldr	r3, [r1, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dc05      	bgt.n	80059e4 <__sflush_r+0x20>
 80059d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	dc02      	bgt.n	80059e4 <__sflush_r+0x20>
 80059de:	2000      	movs	r0, #0
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059e6:	2e00      	cmp	r6, #0
 80059e8:	d0f9      	beq.n	80059de <__sflush_r+0x1a>
 80059ea:	2300      	movs	r3, #0
 80059ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059f0:	682f      	ldr	r7, [r5, #0]
 80059f2:	6a21      	ldr	r1, [r4, #32]
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	d032      	beq.n	8005a5e <__sflush_r+0x9a>
 80059f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	075a      	lsls	r2, r3, #29
 80059fe:	d505      	bpl.n	8005a0c <__sflush_r+0x48>
 8005a00:	6863      	ldr	r3, [r4, #4]
 8005a02:	1ac0      	subs	r0, r0, r3
 8005a04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a06:	b10b      	cbz	r3, 8005a0c <__sflush_r+0x48>
 8005a08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a0a:	1ac0      	subs	r0, r0, r3
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a12:	6a21      	ldr	r1, [r4, #32]
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b0      	blx	r6
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	d106      	bne.n	8005a2c <__sflush_r+0x68>
 8005a1e:	6829      	ldr	r1, [r5, #0]
 8005a20:	291d      	cmp	r1, #29
 8005a22:	d848      	bhi.n	8005ab6 <__sflush_r+0xf2>
 8005a24:	4a29      	ldr	r2, [pc, #164]	; (8005acc <__sflush_r+0x108>)
 8005a26:	40ca      	lsrs	r2, r1
 8005a28:	07d6      	lsls	r6, r2, #31
 8005a2a:	d544      	bpl.n	8005ab6 <__sflush_r+0xf2>
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	6062      	str	r2, [r4, #4]
 8005a30:	6922      	ldr	r2, [r4, #16]
 8005a32:	04d9      	lsls	r1, r3, #19
 8005a34:	6022      	str	r2, [r4, #0]
 8005a36:	d504      	bpl.n	8005a42 <__sflush_r+0x7e>
 8005a38:	1c42      	adds	r2, r0, #1
 8005a3a:	d101      	bne.n	8005a40 <__sflush_r+0x7c>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b903      	cbnz	r3, 8005a42 <__sflush_r+0x7e>
 8005a40:	6560      	str	r0, [r4, #84]	; 0x54
 8005a42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a44:	602f      	str	r7, [r5, #0]
 8005a46:	2900      	cmp	r1, #0
 8005a48:	d0c9      	beq.n	80059de <__sflush_r+0x1a>
 8005a4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a4e:	4299      	cmp	r1, r3
 8005a50:	d002      	beq.n	8005a58 <__sflush_r+0x94>
 8005a52:	4628      	mov	r0, r5
 8005a54:	f000 f99c 	bl	8005d90 <_free_r>
 8005a58:	2000      	movs	r0, #0
 8005a5a:	6360      	str	r0, [r4, #52]	; 0x34
 8005a5c:	e7c0      	b.n	80059e0 <__sflush_r+0x1c>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4628      	mov	r0, r5
 8005a62:	47b0      	blx	r6
 8005a64:	1c41      	adds	r1, r0, #1
 8005a66:	d1c8      	bne.n	80059fa <__sflush_r+0x36>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0c5      	beq.n	80059fa <__sflush_r+0x36>
 8005a6e:	2b1d      	cmp	r3, #29
 8005a70:	d001      	beq.n	8005a76 <__sflush_r+0xb2>
 8005a72:	2b16      	cmp	r3, #22
 8005a74:	d101      	bne.n	8005a7a <__sflush_r+0xb6>
 8005a76:	602f      	str	r7, [r5, #0]
 8005a78:	e7b1      	b.n	80059de <__sflush_r+0x1a>
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	e7ad      	b.n	80059e0 <__sflush_r+0x1c>
 8005a84:	690f      	ldr	r7, [r1, #16]
 8005a86:	2f00      	cmp	r7, #0
 8005a88:	d0a9      	beq.n	80059de <__sflush_r+0x1a>
 8005a8a:	0793      	lsls	r3, r2, #30
 8005a8c:	bf18      	it	ne
 8005a8e:	2300      	movne	r3, #0
 8005a90:	680e      	ldr	r6, [r1, #0]
 8005a92:	bf08      	it	eq
 8005a94:	694b      	ldreq	r3, [r1, #20]
 8005a96:	eba6 0807 	sub.w	r8, r6, r7
 8005a9a:	600f      	str	r7, [r1, #0]
 8005a9c:	608b      	str	r3, [r1, #8]
 8005a9e:	f1b8 0f00 	cmp.w	r8, #0
 8005aa2:	dd9c      	ble.n	80059de <__sflush_r+0x1a>
 8005aa4:	4643      	mov	r3, r8
 8005aa6:	463a      	mov	r2, r7
 8005aa8:	6a21      	ldr	r1, [r4, #32]
 8005aaa:	4628      	mov	r0, r5
 8005aac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aae:	47b0      	blx	r6
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	dc06      	bgt.n	8005ac2 <__sflush_r+0xfe>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac0:	e78e      	b.n	80059e0 <__sflush_r+0x1c>
 8005ac2:	4407      	add	r7, r0
 8005ac4:	eba8 0800 	sub.w	r8, r8, r0
 8005ac8:	e7e9      	b.n	8005a9e <__sflush_r+0xda>
 8005aca:	bf00      	nop
 8005acc:	20400001 	.word	0x20400001

08005ad0 <_fflush_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	690b      	ldr	r3, [r1, #16]
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	b1db      	cbz	r3, 8005b12 <_fflush_r+0x42>
 8005ada:	b118      	cbz	r0, 8005ae4 <_fflush_r+0x14>
 8005adc:	6983      	ldr	r3, [r0, #24]
 8005ade:	b90b      	cbnz	r3, 8005ae4 <_fflush_r+0x14>
 8005ae0:	f000 f860 	bl	8005ba4 <__sinit>
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <_fflush_r+0x48>)
 8005ae6:	429c      	cmp	r4, r3
 8005ae8:	d109      	bne.n	8005afe <_fflush_r+0x2e>
 8005aea:	686c      	ldr	r4, [r5, #4]
 8005aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af0:	b17b      	cbz	r3, 8005b12 <_fflush_r+0x42>
 8005af2:	4621      	mov	r1, r4
 8005af4:	4628      	mov	r0, r5
 8005af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005afa:	f7ff bf63 	b.w	80059c4 <__sflush_r>
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <_fflush_r+0x4c>)
 8005b00:	429c      	cmp	r4, r3
 8005b02:	d101      	bne.n	8005b08 <_fflush_r+0x38>
 8005b04:	68ac      	ldr	r4, [r5, #8]
 8005b06:	e7f1      	b.n	8005aec <_fflush_r+0x1c>
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <_fflush_r+0x50>)
 8005b0a:	429c      	cmp	r4, r3
 8005b0c:	bf08      	it	eq
 8005b0e:	68ec      	ldreq	r4, [r5, #12]
 8005b10:	e7ec      	b.n	8005aec <_fflush_r+0x1c>
 8005b12:	2000      	movs	r0, #0
 8005b14:	bd38      	pop	{r3, r4, r5, pc}
 8005b16:	bf00      	nop
 8005b18:	080091bc 	.word	0x080091bc
 8005b1c:	080091dc 	.word	0x080091dc
 8005b20:	0800919c 	.word	0x0800919c

08005b24 <std>:
 8005b24:	2300      	movs	r3, #0
 8005b26:	b510      	push	{r4, lr}
 8005b28:	4604      	mov	r4, r0
 8005b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b2e:	6083      	str	r3, [r0, #8]
 8005b30:	8181      	strh	r1, [r0, #12]
 8005b32:	6643      	str	r3, [r0, #100]	; 0x64
 8005b34:	81c2      	strh	r2, [r0, #14]
 8005b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b3a:	6183      	str	r3, [r0, #24]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	2208      	movs	r2, #8
 8005b40:	305c      	adds	r0, #92	; 0x5c
 8005b42:	f7ff fe71 	bl	8005828 <memset>
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <std+0x38>)
 8005b48:	6224      	str	r4, [r4, #32]
 8005b4a:	6263      	str	r3, [r4, #36]	; 0x24
 8005b4c:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <std+0x3c>)
 8005b4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b50:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <std+0x40>)
 8005b52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b54:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <std+0x44>)
 8005b56:	6323      	str	r3, [r4, #48]	; 0x30
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	bf00      	nop
 8005b5c:	08006489 	.word	0x08006489
 8005b60:	080064ab 	.word	0x080064ab
 8005b64:	080064e3 	.word	0x080064e3
 8005b68:	08006507 	.word	0x08006507

08005b6c <_cleanup_r>:
 8005b6c:	4901      	ldr	r1, [pc, #4]	; (8005b74 <_cleanup_r+0x8>)
 8005b6e:	f000 b885 	b.w	8005c7c <_fwalk_reent>
 8005b72:	bf00      	nop
 8005b74:	08005ad1 	.word	0x08005ad1

08005b78 <__sfmoreglue>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	2568      	movs	r5, #104	; 0x68
 8005b7c:	1e4a      	subs	r2, r1, #1
 8005b7e:	4355      	muls	r5, r2
 8005b80:	460e      	mov	r6, r1
 8005b82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b86:	f000 f94f 	bl	8005e28 <_malloc_r>
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	b140      	cbz	r0, 8005ba0 <__sfmoreglue+0x28>
 8005b8e:	2100      	movs	r1, #0
 8005b90:	e9c0 1600 	strd	r1, r6, [r0]
 8005b94:	300c      	adds	r0, #12
 8005b96:	60a0      	str	r0, [r4, #8]
 8005b98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b9c:	f7ff fe44 	bl	8005828 <memset>
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}

08005ba4 <__sinit>:
 8005ba4:	6983      	ldr	r3, [r0, #24]
 8005ba6:	b510      	push	{r4, lr}
 8005ba8:	4604      	mov	r4, r0
 8005baa:	bb33      	cbnz	r3, 8005bfa <__sinit+0x56>
 8005bac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005bb0:	6503      	str	r3, [r0, #80]	; 0x50
 8005bb2:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <__sinit+0x58>)
 8005bb4:	4a12      	ldr	r2, [pc, #72]	; (8005c00 <__sinit+0x5c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6282      	str	r2, [r0, #40]	; 0x28
 8005bba:	4298      	cmp	r0, r3
 8005bbc:	bf04      	itt	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	6183      	streq	r3, [r0, #24]
 8005bc2:	f000 f81f 	bl	8005c04 <__sfp>
 8005bc6:	6060      	str	r0, [r4, #4]
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 f81b 	bl	8005c04 <__sfp>
 8005bce:	60a0      	str	r0, [r4, #8]
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f000 f817 	bl	8005c04 <__sfp>
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	60e0      	str	r0, [r4, #12]
 8005bda:	2104      	movs	r1, #4
 8005bdc:	6860      	ldr	r0, [r4, #4]
 8005bde:	f7ff ffa1 	bl	8005b24 <std>
 8005be2:	2201      	movs	r2, #1
 8005be4:	2109      	movs	r1, #9
 8005be6:	68a0      	ldr	r0, [r4, #8]
 8005be8:	f7ff ff9c 	bl	8005b24 <std>
 8005bec:	2202      	movs	r2, #2
 8005bee:	2112      	movs	r1, #18
 8005bf0:	68e0      	ldr	r0, [r4, #12]
 8005bf2:	f7ff ff97 	bl	8005b24 <std>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	61a3      	str	r3, [r4, #24]
 8005bfa:	bd10      	pop	{r4, pc}
 8005bfc:	08009198 	.word	0x08009198
 8005c00:	08005b6d 	.word	0x08005b6d

08005c04 <__sfp>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <__sfp+0x70>)
 8005c08:	4607      	mov	r7, r0
 8005c0a:	681e      	ldr	r6, [r3, #0]
 8005c0c:	69b3      	ldr	r3, [r6, #24]
 8005c0e:	b913      	cbnz	r3, 8005c16 <__sfp+0x12>
 8005c10:	4630      	mov	r0, r6
 8005c12:	f7ff ffc7 	bl	8005ba4 <__sinit>
 8005c16:	3648      	adds	r6, #72	; 0x48
 8005c18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	d503      	bpl.n	8005c28 <__sfp+0x24>
 8005c20:	6833      	ldr	r3, [r6, #0]
 8005c22:	b133      	cbz	r3, 8005c32 <__sfp+0x2e>
 8005c24:	6836      	ldr	r6, [r6, #0]
 8005c26:	e7f7      	b.n	8005c18 <__sfp+0x14>
 8005c28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c2c:	b16d      	cbz	r5, 8005c4a <__sfp+0x46>
 8005c2e:	3468      	adds	r4, #104	; 0x68
 8005c30:	e7f4      	b.n	8005c1c <__sfp+0x18>
 8005c32:	2104      	movs	r1, #4
 8005c34:	4638      	mov	r0, r7
 8005c36:	f7ff ff9f 	bl	8005b78 <__sfmoreglue>
 8005c3a:	6030      	str	r0, [r6, #0]
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d1f1      	bne.n	8005c24 <__sfp+0x20>
 8005c40:	230c      	movs	r3, #12
 8005c42:	4604      	mov	r4, r0
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4620      	mov	r0, r4
 8005c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <__sfp+0x74>)
 8005c4c:	6665      	str	r5, [r4, #100]	; 0x64
 8005c4e:	e9c4 5500 	strd	r5, r5, [r4]
 8005c52:	60a5      	str	r5, [r4, #8]
 8005c54:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005c58:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	4629      	mov	r1, r5
 8005c60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c64:	f7ff fde0 	bl	8005828 <memset>
 8005c68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c70:	e7e9      	b.n	8005c46 <__sfp+0x42>
 8005c72:	bf00      	nop
 8005c74:	08009198 	.word	0x08009198
 8005c78:	ffff0001 	.word	0xffff0001

08005c7c <_fwalk_reent>:
 8005c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c80:	4680      	mov	r8, r0
 8005c82:	4689      	mov	r9, r1
 8005c84:	2600      	movs	r6, #0
 8005c86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c8a:	b914      	cbnz	r4, 8005c92 <_fwalk_reent+0x16>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c92:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005c96:	3f01      	subs	r7, #1
 8005c98:	d501      	bpl.n	8005c9e <_fwalk_reent+0x22>
 8005c9a:	6824      	ldr	r4, [r4, #0]
 8005c9c:	e7f5      	b.n	8005c8a <_fwalk_reent+0xe>
 8005c9e:	89ab      	ldrh	r3, [r5, #12]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d907      	bls.n	8005cb4 <_fwalk_reent+0x38>
 8005ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	d003      	beq.n	8005cb4 <_fwalk_reent+0x38>
 8005cac:	4629      	mov	r1, r5
 8005cae:	4640      	mov	r0, r8
 8005cb0:	47c8      	blx	r9
 8005cb2:	4306      	orrs	r6, r0
 8005cb4:	3568      	adds	r5, #104	; 0x68
 8005cb6:	e7ee      	b.n	8005c96 <_fwalk_reent+0x1a>

08005cb8 <__swhatbuf_r>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	460e      	mov	r6, r1
 8005cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc0:	b096      	sub	sp, #88	; 0x58
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	da07      	bge.n	8005cda <__swhatbuf_r+0x22>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	602b      	str	r3, [r5, #0]
 8005cce:	89b3      	ldrh	r3, [r6, #12]
 8005cd0:	061a      	lsls	r2, r3, #24
 8005cd2:	d410      	bmi.n	8005cf6 <__swhatbuf_r+0x3e>
 8005cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd8:	e00e      	b.n	8005cf8 <__swhatbuf_r+0x40>
 8005cda:	466a      	mov	r2, sp
 8005cdc:	f000 fcfa 	bl	80066d4 <_fstat_r>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	dbf2      	blt.n	8005cca <__swhatbuf_r+0x12>
 8005ce4:	9a01      	ldr	r2, [sp, #4]
 8005ce6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cee:	425a      	negs	r2, r3
 8005cf0:	415a      	adcs	r2, r3
 8005cf2:	602a      	str	r2, [r5, #0]
 8005cf4:	e7ee      	b.n	8005cd4 <__swhatbuf_r+0x1c>
 8005cf6:	2340      	movs	r3, #64	; 0x40
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	b016      	add	sp, #88	; 0x58
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}

08005d00 <__smakebuf_r>:
 8005d00:	898b      	ldrh	r3, [r1, #12]
 8005d02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d04:	079d      	lsls	r5, r3, #30
 8005d06:	4606      	mov	r6, r0
 8005d08:	460c      	mov	r4, r1
 8005d0a:	d507      	bpl.n	8005d1c <__smakebuf_r+0x1c>
 8005d0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	6123      	str	r3, [r4, #16]
 8005d14:	2301      	movs	r3, #1
 8005d16:	6163      	str	r3, [r4, #20]
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	ab01      	add	r3, sp, #4
 8005d1e:	466a      	mov	r2, sp
 8005d20:	f7ff ffca 	bl	8005cb8 <__swhatbuf_r>
 8005d24:	9900      	ldr	r1, [sp, #0]
 8005d26:	4605      	mov	r5, r0
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f000 f87d 	bl	8005e28 <_malloc_r>
 8005d2e:	b948      	cbnz	r0, 8005d44 <__smakebuf_r+0x44>
 8005d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d34:	059a      	lsls	r2, r3, #22
 8005d36:	d4ef      	bmi.n	8005d18 <__smakebuf_r+0x18>
 8005d38:	f023 0303 	bic.w	r3, r3, #3
 8005d3c:	f043 0302 	orr.w	r3, r3, #2
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	e7e3      	b.n	8005d0c <__smakebuf_r+0xc>
 8005d44:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <__smakebuf_r+0x7c>)
 8005d46:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	6020      	str	r0, [r4, #0]
 8005d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	9b00      	ldr	r3, [sp, #0]
 8005d54:	6120      	str	r0, [r4, #16]
 8005d56:	6163      	str	r3, [r4, #20]
 8005d58:	9b01      	ldr	r3, [sp, #4]
 8005d5a:	b15b      	cbz	r3, 8005d74 <__smakebuf_r+0x74>
 8005d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d60:	4630      	mov	r0, r6
 8005d62:	f000 fcc9 	bl	80066f8 <_isatty_r>
 8005d66:	b128      	cbz	r0, 8005d74 <__smakebuf_r+0x74>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	431d      	orrs	r5, r3
 8005d78:	81a5      	strh	r5, [r4, #12]
 8005d7a:	e7cd      	b.n	8005d18 <__smakebuf_r+0x18>
 8005d7c:	08005b6d 	.word	0x08005b6d

08005d80 <malloc>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <malloc+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f000 b84f 	b.w	8005e28 <_malloc_r>
 8005d8a:	bf00      	nop
 8005d8c:	20000028 	.word	0x20000028

08005d90 <_free_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4605      	mov	r5, r0
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d043      	beq.n	8005e20 <_free_r+0x90>
 8005d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d9c:	1f0c      	subs	r4, r1, #4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bfb8      	it	lt
 8005da2:	18e4      	addlt	r4, r4, r3
 8005da4:	f000 fcd8 	bl	8006758 <__malloc_lock>
 8005da8:	4a1e      	ldr	r2, [pc, #120]	; (8005e24 <_free_r+0x94>)
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	4610      	mov	r0, r2
 8005dae:	b933      	cbnz	r3, 8005dbe <_free_r+0x2e>
 8005db0:	6063      	str	r3, [r4, #4]
 8005db2:	6014      	str	r4, [r2, #0]
 8005db4:	4628      	mov	r0, r5
 8005db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dba:	f000 bcce 	b.w	800675a <__malloc_unlock>
 8005dbe:	42a3      	cmp	r3, r4
 8005dc0:	d90b      	bls.n	8005dda <_free_r+0x4a>
 8005dc2:	6821      	ldr	r1, [r4, #0]
 8005dc4:	1862      	adds	r2, r4, r1
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	bf01      	itttt	eq
 8005dca:	681a      	ldreq	r2, [r3, #0]
 8005dcc:	685b      	ldreq	r3, [r3, #4]
 8005dce:	1852      	addeq	r2, r2, r1
 8005dd0:	6022      	streq	r2, [r4, #0]
 8005dd2:	6063      	str	r3, [r4, #4]
 8005dd4:	6004      	str	r4, [r0, #0]
 8005dd6:	e7ed      	b.n	8005db4 <_free_r+0x24>
 8005dd8:	4613      	mov	r3, r2
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	b10a      	cbz	r2, 8005de2 <_free_r+0x52>
 8005dde:	42a2      	cmp	r2, r4
 8005de0:	d9fa      	bls.n	8005dd8 <_free_r+0x48>
 8005de2:	6819      	ldr	r1, [r3, #0]
 8005de4:	1858      	adds	r0, r3, r1
 8005de6:	42a0      	cmp	r0, r4
 8005de8:	d10b      	bne.n	8005e02 <_free_r+0x72>
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	4401      	add	r1, r0
 8005dee:	1858      	adds	r0, r3, r1
 8005df0:	4282      	cmp	r2, r0
 8005df2:	6019      	str	r1, [r3, #0]
 8005df4:	d1de      	bne.n	8005db4 <_free_r+0x24>
 8005df6:	6810      	ldr	r0, [r2, #0]
 8005df8:	6852      	ldr	r2, [r2, #4]
 8005dfa:	4401      	add	r1, r0
 8005dfc:	6019      	str	r1, [r3, #0]
 8005dfe:	605a      	str	r2, [r3, #4]
 8005e00:	e7d8      	b.n	8005db4 <_free_r+0x24>
 8005e02:	d902      	bls.n	8005e0a <_free_r+0x7a>
 8005e04:	230c      	movs	r3, #12
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	e7d4      	b.n	8005db4 <_free_r+0x24>
 8005e0a:	6820      	ldr	r0, [r4, #0]
 8005e0c:	1821      	adds	r1, r4, r0
 8005e0e:	428a      	cmp	r2, r1
 8005e10:	bf01      	itttt	eq
 8005e12:	6811      	ldreq	r1, [r2, #0]
 8005e14:	6852      	ldreq	r2, [r2, #4]
 8005e16:	1809      	addeq	r1, r1, r0
 8005e18:	6021      	streq	r1, [r4, #0]
 8005e1a:	6062      	str	r2, [r4, #4]
 8005e1c:	605c      	str	r4, [r3, #4]
 8005e1e:	e7c9      	b.n	8005db4 <_free_r+0x24>
 8005e20:	bd38      	pop	{r3, r4, r5, pc}
 8005e22:	bf00      	nop
 8005e24:	200000e8 	.word	0x200000e8

08005e28 <_malloc_r>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	1ccd      	adds	r5, r1, #3
 8005e2c:	f025 0503 	bic.w	r5, r5, #3
 8005e30:	3508      	adds	r5, #8
 8005e32:	2d0c      	cmp	r5, #12
 8005e34:	bf38      	it	cc
 8005e36:	250c      	movcc	r5, #12
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	db01      	blt.n	8005e42 <_malloc_r+0x1a>
 8005e3e:	42a9      	cmp	r1, r5
 8005e40:	d903      	bls.n	8005e4a <_malloc_r+0x22>
 8005e42:	230c      	movs	r3, #12
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	2000      	movs	r0, #0
 8005e48:	bd70      	pop	{r4, r5, r6, pc}
 8005e4a:	f000 fc85 	bl	8006758 <__malloc_lock>
 8005e4e:	4a21      	ldr	r2, [pc, #132]	; (8005ed4 <_malloc_r+0xac>)
 8005e50:	6814      	ldr	r4, [r2, #0]
 8005e52:	4621      	mov	r1, r4
 8005e54:	b991      	cbnz	r1, 8005e7c <_malloc_r+0x54>
 8005e56:	4c20      	ldr	r4, [pc, #128]	; (8005ed8 <_malloc_r+0xb0>)
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	b91b      	cbnz	r3, 8005e64 <_malloc_r+0x3c>
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f000 fb03 	bl	8006468 <_sbrk_r>
 8005e62:	6020      	str	r0, [r4, #0]
 8005e64:	4629      	mov	r1, r5
 8005e66:	4630      	mov	r0, r6
 8005e68:	f000 fafe 	bl	8006468 <_sbrk_r>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d124      	bne.n	8005eba <_malloc_r+0x92>
 8005e70:	230c      	movs	r3, #12
 8005e72:	4630      	mov	r0, r6
 8005e74:	6033      	str	r3, [r6, #0]
 8005e76:	f000 fc70 	bl	800675a <__malloc_unlock>
 8005e7a:	e7e4      	b.n	8005e46 <_malloc_r+0x1e>
 8005e7c:	680b      	ldr	r3, [r1, #0]
 8005e7e:	1b5b      	subs	r3, r3, r5
 8005e80:	d418      	bmi.n	8005eb4 <_malloc_r+0x8c>
 8005e82:	2b0b      	cmp	r3, #11
 8005e84:	d90f      	bls.n	8005ea6 <_malloc_r+0x7e>
 8005e86:	600b      	str	r3, [r1, #0]
 8005e88:	18cc      	adds	r4, r1, r3
 8005e8a:	50cd      	str	r5, [r1, r3]
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f000 fc64 	bl	800675a <__malloc_unlock>
 8005e92:	f104 000b 	add.w	r0, r4, #11
 8005e96:	1d23      	adds	r3, r4, #4
 8005e98:	f020 0007 	bic.w	r0, r0, #7
 8005e9c:	1ac3      	subs	r3, r0, r3
 8005e9e:	d0d3      	beq.n	8005e48 <_malloc_r+0x20>
 8005ea0:	425a      	negs	r2, r3
 8005ea2:	50e2      	str	r2, [r4, r3]
 8005ea4:	e7d0      	b.n	8005e48 <_malloc_r+0x20>
 8005ea6:	684b      	ldr	r3, [r1, #4]
 8005ea8:	428c      	cmp	r4, r1
 8005eaa:	bf16      	itet	ne
 8005eac:	6063      	strne	r3, [r4, #4]
 8005eae:	6013      	streq	r3, [r2, #0]
 8005eb0:	460c      	movne	r4, r1
 8005eb2:	e7eb      	b.n	8005e8c <_malloc_r+0x64>
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	6849      	ldr	r1, [r1, #4]
 8005eb8:	e7cc      	b.n	8005e54 <_malloc_r+0x2c>
 8005eba:	1cc4      	adds	r4, r0, #3
 8005ebc:	f024 0403 	bic.w	r4, r4, #3
 8005ec0:	42a0      	cmp	r0, r4
 8005ec2:	d005      	beq.n	8005ed0 <_malloc_r+0xa8>
 8005ec4:	1a21      	subs	r1, r4, r0
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f000 face 	bl	8006468 <_sbrk_r>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d0cf      	beq.n	8005e70 <_malloc_r+0x48>
 8005ed0:	6025      	str	r5, [r4, #0]
 8005ed2:	e7db      	b.n	8005e8c <_malloc_r+0x64>
 8005ed4:	200000e8 	.word	0x200000e8
 8005ed8:	200000ec 	.word	0x200000ec

08005edc <__sfputc_r>:
 8005edc:	6893      	ldr	r3, [r2, #8]
 8005ede:	b410      	push	{r4}
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	6093      	str	r3, [r2, #8]
 8005ee6:	da07      	bge.n	8005ef8 <__sfputc_r+0x1c>
 8005ee8:	6994      	ldr	r4, [r2, #24]
 8005eea:	42a3      	cmp	r3, r4
 8005eec:	db01      	blt.n	8005ef2 <__sfputc_r+0x16>
 8005eee:	290a      	cmp	r1, #10
 8005ef0:	d102      	bne.n	8005ef8 <__sfputc_r+0x1c>
 8005ef2:	bc10      	pop	{r4}
 8005ef4:	f000 bb0c 	b.w	8006510 <__swbuf_r>
 8005ef8:	6813      	ldr	r3, [r2, #0]
 8005efa:	1c58      	adds	r0, r3, #1
 8005efc:	6010      	str	r0, [r2, #0]
 8005efe:	7019      	strb	r1, [r3, #0]
 8005f00:	4608      	mov	r0, r1
 8005f02:	bc10      	pop	{r4}
 8005f04:	4770      	bx	lr

08005f06 <__sfputs_r>:
 8005f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f08:	4606      	mov	r6, r0
 8005f0a:	460f      	mov	r7, r1
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	18d5      	adds	r5, r2, r3
 8005f10:	42ac      	cmp	r4, r5
 8005f12:	d101      	bne.n	8005f18 <__sfputs_r+0x12>
 8005f14:	2000      	movs	r0, #0
 8005f16:	e007      	b.n	8005f28 <__sfputs_r+0x22>
 8005f18:	463a      	mov	r2, r7
 8005f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f7ff ffdc 	bl	8005edc <__sfputc_r>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d1f3      	bne.n	8005f10 <__sfputs_r+0xa>
 8005f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f2c <_vfiprintf_r>:
 8005f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f30:	460c      	mov	r4, r1
 8005f32:	b09d      	sub	sp, #116	; 0x74
 8005f34:	4617      	mov	r7, r2
 8005f36:	461d      	mov	r5, r3
 8005f38:	4606      	mov	r6, r0
 8005f3a:	b118      	cbz	r0, 8005f44 <_vfiprintf_r+0x18>
 8005f3c:	6983      	ldr	r3, [r0, #24]
 8005f3e:	b90b      	cbnz	r3, 8005f44 <_vfiprintf_r+0x18>
 8005f40:	f7ff fe30 	bl	8005ba4 <__sinit>
 8005f44:	4b7c      	ldr	r3, [pc, #496]	; (8006138 <_vfiprintf_r+0x20c>)
 8005f46:	429c      	cmp	r4, r3
 8005f48:	d158      	bne.n	8005ffc <_vfiprintf_r+0xd0>
 8005f4a:	6874      	ldr	r4, [r6, #4]
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	0718      	lsls	r0, r3, #28
 8005f50:	d55e      	bpl.n	8006010 <_vfiprintf_r+0xe4>
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d05b      	beq.n	8006010 <_vfiprintf_r+0xe4>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f62:	2330      	movs	r3, #48	; 0x30
 8005f64:	f04f 0b01 	mov.w	fp, #1
 8005f68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f6c:	9503      	str	r5, [sp, #12]
 8005f6e:	46b8      	mov	r8, r7
 8005f70:	4645      	mov	r5, r8
 8005f72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f76:	b10b      	cbz	r3, 8005f7c <_vfiprintf_r+0x50>
 8005f78:	2b25      	cmp	r3, #37	; 0x25
 8005f7a:	d154      	bne.n	8006026 <_vfiprintf_r+0xfa>
 8005f7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005f80:	d00b      	beq.n	8005f9a <_vfiprintf_r+0x6e>
 8005f82:	4653      	mov	r3, sl
 8005f84:	463a      	mov	r2, r7
 8005f86:	4621      	mov	r1, r4
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f7ff ffbc 	bl	8005f06 <__sfputs_r>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	f000 80c2 	beq.w	8006118 <_vfiprintf_r+0x1ec>
 8005f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f96:	4453      	add	r3, sl
 8005f98:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9a:	f898 3000 	ldrb.w	r3, [r8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80ba 	beq.w	8006118 <_vfiprintf_r+0x1ec>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8005faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	9307      	str	r3, [sp, #28]
 8005fb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fb6:	931a      	str	r3, [sp, #104]	; 0x68
 8005fb8:	46a8      	mov	r8, r5
 8005fba:	2205      	movs	r2, #5
 8005fbc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005fc0:	485e      	ldr	r0, [pc, #376]	; (800613c <_vfiprintf_r+0x210>)
 8005fc2:	f000 fbbb 	bl	800673c <memchr>
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	bb78      	cbnz	r0, 800602a <_vfiprintf_r+0xfe>
 8005fca:	06d9      	lsls	r1, r3, #27
 8005fcc:	bf44      	itt	mi
 8005fce:	2220      	movmi	r2, #32
 8005fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fd4:	071a      	lsls	r2, r3, #28
 8005fd6:	bf44      	itt	mi
 8005fd8:	222b      	movmi	r2, #43	; 0x2b
 8005fda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fde:	782a      	ldrb	r2, [r5, #0]
 8005fe0:	2a2a      	cmp	r2, #42	; 0x2a
 8005fe2:	d02a      	beq.n	800603a <_vfiprintf_r+0x10e>
 8005fe4:	46a8      	mov	r8, r5
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	250a      	movs	r5, #10
 8005fea:	9a07      	ldr	r2, [sp, #28]
 8005fec:	4641      	mov	r1, r8
 8005fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ff2:	3b30      	subs	r3, #48	; 0x30
 8005ff4:	2b09      	cmp	r3, #9
 8005ff6:	d969      	bls.n	80060cc <_vfiprintf_r+0x1a0>
 8005ff8:	b360      	cbz	r0, 8006054 <_vfiprintf_r+0x128>
 8005ffa:	e024      	b.n	8006046 <_vfiprintf_r+0x11a>
 8005ffc:	4b50      	ldr	r3, [pc, #320]	; (8006140 <_vfiprintf_r+0x214>)
 8005ffe:	429c      	cmp	r4, r3
 8006000:	d101      	bne.n	8006006 <_vfiprintf_r+0xda>
 8006002:	68b4      	ldr	r4, [r6, #8]
 8006004:	e7a2      	b.n	8005f4c <_vfiprintf_r+0x20>
 8006006:	4b4f      	ldr	r3, [pc, #316]	; (8006144 <_vfiprintf_r+0x218>)
 8006008:	429c      	cmp	r4, r3
 800600a:	bf08      	it	eq
 800600c:	68f4      	ldreq	r4, [r6, #12]
 800600e:	e79d      	b.n	8005f4c <_vfiprintf_r+0x20>
 8006010:	4621      	mov	r1, r4
 8006012:	4630      	mov	r0, r6
 8006014:	f000 fae0 	bl	80065d8 <__swsetup_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	d09d      	beq.n	8005f58 <_vfiprintf_r+0x2c>
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	b01d      	add	sp, #116	; 0x74
 8006022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006026:	46a8      	mov	r8, r5
 8006028:	e7a2      	b.n	8005f70 <_vfiprintf_r+0x44>
 800602a:	4a44      	ldr	r2, [pc, #272]	; (800613c <_vfiprintf_r+0x210>)
 800602c:	4645      	mov	r5, r8
 800602e:	1a80      	subs	r0, r0, r2
 8006030:	fa0b f000 	lsl.w	r0, fp, r0
 8006034:	4318      	orrs	r0, r3
 8006036:	9004      	str	r0, [sp, #16]
 8006038:	e7be      	b.n	8005fb8 <_vfiprintf_r+0x8c>
 800603a:	9a03      	ldr	r2, [sp, #12]
 800603c:	1d11      	adds	r1, r2, #4
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	9103      	str	r1, [sp, #12]
 8006042:	2a00      	cmp	r2, #0
 8006044:	db01      	blt.n	800604a <_vfiprintf_r+0x11e>
 8006046:	9207      	str	r2, [sp, #28]
 8006048:	e004      	b.n	8006054 <_vfiprintf_r+0x128>
 800604a:	4252      	negs	r2, r2
 800604c:	f043 0302 	orr.w	r3, r3, #2
 8006050:	9207      	str	r2, [sp, #28]
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	f898 3000 	ldrb.w	r3, [r8]
 8006058:	2b2e      	cmp	r3, #46	; 0x2e
 800605a:	d10e      	bne.n	800607a <_vfiprintf_r+0x14e>
 800605c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006060:	2b2a      	cmp	r3, #42	; 0x2a
 8006062:	d138      	bne.n	80060d6 <_vfiprintf_r+0x1aa>
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	f108 0802 	add.w	r8, r8, #2
 800606a:	1d1a      	adds	r2, r3, #4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	9203      	str	r2, [sp, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	bfb8      	it	lt
 8006074:	f04f 33ff 	movlt.w	r3, #4294967295
 8006078:	9305      	str	r3, [sp, #20]
 800607a:	4d33      	ldr	r5, [pc, #204]	; (8006148 <_vfiprintf_r+0x21c>)
 800607c:	2203      	movs	r2, #3
 800607e:	f898 1000 	ldrb.w	r1, [r8]
 8006082:	4628      	mov	r0, r5
 8006084:	f000 fb5a 	bl	800673c <memchr>
 8006088:	b140      	cbz	r0, 800609c <_vfiprintf_r+0x170>
 800608a:	2340      	movs	r3, #64	; 0x40
 800608c:	1b40      	subs	r0, r0, r5
 800608e:	fa03 f000 	lsl.w	r0, r3, r0
 8006092:	9b04      	ldr	r3, [sp, #16]
 8006094:	f108 0801 	add.w	r8, r8, #1
 8006098:	4303      	orrs	r3, r0
 800609a:	9304      	str	r3, [sp, #16]
 800609c:	f898 1000 	ldrb.w	r1, [r8]
 80060a0:	2206      	movs	r2, #6
 80060a2:	482a      	ldr	r0, [pc, #168]	; (800614c <_vfiprintf_r+0x220>)
 80060a4:	f108 0701 	add.w	r7, r8, #1
 80060a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ac:	f000 fb46 	bl	800673c <memchr>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d037      	beq.n	8006124 <_vfiprintf_r+0x1f8>
 80060b4:	4b26      	ldr	r3, [pc, #152]	; (8006150 <_vfiprintf_r+0x224>)
 80060b6:	bb1b      	cbnz	r3, 8006100 <_vfiprintf_r+0x1d4>
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	3307      	adds	r3, #7
 80060bc:	f023 0307 	bic.w	r3, r3, #7
 80060c0:	3308      	adds	r3, #8
 80060c2:	9303      	str	r3, [sp, #12]
 80060c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c6:	444b      	add	r3, r9
 80060c8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ca:	e750      	b.n	8005f6e <_vfiprintf_r+0x42>
 80060cc:	fb05 3202 	mla	r2, r5, r2, r3
 80060d0:	2001      	movs	r0, #1
 80060d2:	4688      	mov	r8, r1
 80060d4:	e78a      	b.n	8005fec <_vfiprintf_r+0xc0>
 80060d6:	2300      	movs	r3, #0
 80060d8:	250a      	movs	r5, #10
 80060da:	4619      	mov	r1, r3
 80060dc:	f108 0801 	add.w	r8, r8, #1
 80060e0:	9305      	str	r3, [sp, #20]
 80060e2:	4640      	mov	r0, r8
 80060e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060e8:	3a30      	subs	r2, #48	; 0x30
 80060ea:	2a09      	cmp	r2, #9
 80060ec:	d903      	bls.n	80060f6 <_vfiprintf_r+0x1ca>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0c3      	beq.n	800607a <_vfiprintf_r+0x14e>
 80060f2:	9105      	str	r1, [sp, #20]
 80060f4:	e7c1      	b.n	800607a <_vfiprintf_r+0x14e>
 80060f6:	fb05 2101 	mla	r1, r5, r1, r2
 80060fa:	2301      	movs	r3, #1
 80060fc:	4680      	mov	r8, r0
 80060fe:	e7f0      	b.n	80060e2 <_vfiprintf_r+0x1b6>
 8006100:	ab03      	add	r3, sp, #12
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	4622      	mov	r2, r4
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <_vfiprintf_r+0x228>)
 8006108:	a904      	add	r1, sp, #16
 800610a:	4630      	mov	r0, r6
 800610c:	f3af 8000 	nop.w
 8006110:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006114:	4681      	mov	r9, r0
 8006116:	d1d5      	bne.n	80060c4 <_vfiprintf_r+0x198>
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	065b      	lsls	r3, r3, #25
 800611c:	f53f af7e 	bmi.w	800601c <_vfiprintf_r+0xf0>
 8006120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006122:	e77d      	b.n	8006020 <_vfiprintf_r+0xf4>
 8006124:	ab03      	add	r3, sp, #12
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	4622      	mov	r2, r4
 800612a:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <_vfiprintf_r+0x228>)
 800612c:	a904      	add	r1, sp, #16
 800612e:	4630      	mov	r0, r6
 8006130:	f000 f888 	bl	8006244 <_printf_i>
 8006134:	e7ec      	b.n	8006110 <_vfiprintf_r+0x1e4>
 8006136:	bf00      	nop
 8006138:	080091bc 	.word	0x080091bc
 800613c:	080091fc 	.word	0x080091fc
 8006140:	080091dc 	.word	0x080091dc
 8006144:	0800919c 	.word	0x0800919c
 8006148:	08009202 	.word	0x08009202
 800614c:	08009206 	.word	0x08009206
 8006150:	00000000 	.word	0x00000000
 8006154:	08005f07 	.word	0x08005f07

08006158 <_printf_common>:
 8006158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	4691      	mov	r9, r2
 800615e:	461f      	mov	r7, r3
 8006160:	688a      	ldr	r2, [r1, #8]
 8006162:	690b      	ldr	r3, [r1, #16]
 8006164:	4606      	mov	r6, r0
 8006166:	4293      	cmp	r3, r2
 8006168:	bfb8      	it	lt
 800616a:	4613      	movlt	r3, r2
 800616c:	f8c9 3000 	str.w	r3, [r9]
 8006170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006174:	460c      	mov	r4, r1
 8006176:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800617a:	b112      	cbz	r2, 8006182 <_printf_common+0x2a>
 800617c:	3301      	adds	r3, #1
 800617e:	f8c9 3000 	str.w	r3, [r9]
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	0699      	lsls	r1, r3, #26
 8006186:	bf42      	ittt	mi
 8006188:	f8d9 3000 	ldrmi.w	r3, [r9]
 800618c:	3302      	addmi	r3, #2
 800618e:	f8c9 3000 	strmi.w	r3, [r9]
 8006192:	6825      	ldr	r5, [r4, #0]
 8006194:	f015 0506 	ands.w	r5, r5, #6
 8006198:	d107      	bne.n	80061aa <_printf_common+0x52>
 800619a:	f104 0a19 	add.w	sl, r4, #25
 800619e:	68e3      	ldr	r3, [r4, #12]
 80061a0:	f8d9 2000 	ldr.w	r2, [r9]
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	42ab      	cmp	r3, r5
 80061a8:	dc29      	bgt.n	80061fe <_printf_common+0xa6>
 80061aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	3300      	adds	r3, #0
 80061b2:	bf18      	it	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	0692      	lsls	r2, r2, #26
 80061b8:	d42e      	bmi.n	8006218 <_printf_common+0xc0>
 80061ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061be:	4639      	mov	r1, r7
 80061c0:	4630      	mov	r0, r6
 80061c2:	47c0      	blx	r8
 80061c4:	3001      	adds	r0, #1
 80061c6:	d021      	beq.n	800620c <_printf_common+0xb4>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	68e5      	ldr	r5, [r4, #12]
 80061cc:	f003 0306 	and.w	r3, r3, #6
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	bf18      	it	ne
 80061d4:	2500      	movne	r5, #0
 80061d6:	f8d9 2000 	ldr.w	r2, [r9]
 80061da:	f04f 0900 	mov.w	r9, #0
 80061de:	bf08      	it	eq
 80061e0:	1aad      	subeq	r5, r5, r2
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	6922      	ldr	r2, [r4, #16]
 80061e6:	bf08      	it	eq
 80061e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061ec:	4293      	cmp	r3, r2
 80061ee:	bfc4      	itt	gt
 80061f0:	1a9b      	subgt	r3, r3, r2
 80061f2:	18ed      	addgt	r5, r5, r3
 80061f4:	341a      	adds	r4, #26
 80061f6:	454d      	cmp	r5, r9
 80061f8:	d11a      	bne.n	8006230 <_printf_common+0xd8>
 80061fa:	2000      	movs	r0, #0
 80061fc:	e008      	b.n	8006210 <_printf_common+0xb8>
 80061fe:	2301      	movs	r3, #1
 8006200:	4652      	mov	r2, sl
 8006202:	4639      	mov	r1, r7
 8006204:	4630      	mov	r0, r6
 8006206:	47c0      	blx	r8
 8006208:	3001      	adds	r0, #1
 800620a:	d103      	bne.n	8006214 <_printf_common+0xbc>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006214:	3501      	adds	r5, #1
 8006216:	e7c2      	b.n	800619e <_printf_common+0x46>
 8006218:	2030      	movs	r0, #48	; 0x30
 800621a:	18e1      	adds	r1, r4, r3
 800621c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006226:	4422      	add	r2, r4
 8006228:	3302      	adds	r3, #2
 800622a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800622e:	e7c4      	b.n	80061ba <_printf_common+0x62>
 8006230:	2301      	movs	r3, #1
 8006232:	4622      	mov	r2, r4
 8006234:	4639      	mov	r1, r7
 8006236:	4630      	mov	r0, r6
 8006238:	47c0      	blx	r8
 800623a:	3001      	adds	r0, #1
 800623c:	d0e6      	beq.n	800620c <_printf_common+0xb4>
 800623e:	f109 0901 	add.w	r9, r9, #1
 8006242:	e7d8      	b.n	80061f6 <_printf_common+0x9e>

08006244 <_printf_i>:
 8006244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006248:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800624c:	460c      	mov	r4, r1
 800624e:	7e09      	ldrb	r1, [r1, #24]
 8006250:	b085      	sub	sp, #20
 8006252:	296e      	cmp	r1, #110	; 0x6e
 8006254:	4617      	mov	r7, r2
 8006256:	4606      	mov	r6, r0
 8006258:	4698      	mov	r8, r3
 800625a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800625c:	f000 80b3 	beq.w	80063c6 <_printf_i+0x182>
 8006260:	d822      	bhi.n	80062a8 <_printf_i+0x64>
 8006262:	2963      	cmp	r1, #99	; 0x63
 8006264:	d036      	beq.n	80062d4 <_printf_i+0x90>
 8006266:	d80a      	bhi.n	800627e <_printf_i+0x3a>
 8006268:	2900      	cmp	r1, #0
 800626a:	f000 80b9 	beq.w	80063e0 <_printf_i+0x19c>
 800626e:	2958      	cmp	r1, #88	; 0x58
 8006270:	f000 8083 	beq.w	800637a <_printf_i+0x136>
 8006274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006278:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800627c:	e032      	b.n	80062e4 <_printf_i+0xa0>
 800627e:	2964      	cmp	r1, #100	; 0x64
 8006280:	d001      	beq.n	8006286 <_printf_i+0x42>
 8006282:	2969      	cmp	r1, #105	; 0x69
 8006284:	d1f6      	bne.n	8006274 <_printf_i+0x30>
 8006286:	6820      	ldr	r0, [r4, #0]
 8006288:	6813      	ldr	r3, [r2, #0]
 800628a:	0605      	lsls	r5, r0, #24
 800628c:	f103 0104 	add.w	r1, r3, #4
 8006290:	d52a      	bpl.n	80062e8 <_printf_i+0xa4>
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6011      	str	r1, [r2, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	da03      	bge.n	80062a2 <_printf_i+0x5e>
 800629a:	222d      	movs	r2, #45	; 0x2d
 800629c:	425b      	negs	r3, r3
 800629e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80062a2:	486f      	ldr	r0, [pc, #444]	; (8006460 <_printf_i+0x21c>)
 80062a4:	220a      	movs	r2, #10
 80062a6:	e039      	b.n	800631c <_printf_i+0xd8>
 80062a8:	2973      	cmp	r1, #115	; 0x73
 80062aa:	f000 809d 	beq.w	80063e8 <_printf_i+0x1a4>
 80062ae:	d808      	bhi.n	80062c2 <_printf_i+0x7e>
 80062b0:	296f      	cmp	r1, #111	; 0x6f
 80062b2:	d020      	beq.n	80062f6 <_printf_i+0xb2>
 80062b4:	2970      	cmp	r1, #112	; 0x70
 80062b6:	d1dd      	bne.n	8006274 <_printf_i+0x30>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	f043 0320 	orr.w	r3, r3, #32
 80062be:	6023      	str	r3, [r4, #0]
 80062c0:	e003      	b.n	80062ca <_printf_i+0x86>
 80062c2:	2975      	cmp	r1, #117	; 0x75
 80062c4:	d017      	beq.n	80062f6 <_printf_i+0xb2>
 80062c6:	2978      	cmp	r1, #120	; 0x78
 80062c8:	d1d4      	bne.n	8006274 <_printf_i+0x30>
 80062ca:	2378      	movs	r3, #120	; 0x78
 80062cc:	4865      	ldr	r0, [pc, #404]	; (8006464 <_printf_i+0x220>)
 80062ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062d2:	e055      	b.n	8006380 <_printf_i+0x13c>
 80062d4:	6813      	ldr	r3, [r2, #0]
 80062d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062da:	1d19      	adds	r1, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6011      	str	r1, [r2, #0]
 80062e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e4:	2301      	movs	r3, #1
 80062e6:	e08c      	b.n	8006402 <_printf_i+0x1be>
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062ee:	6011      	str	r1, [r2, #0]
 80062f0:	bf18      	it	ne
 80062f2:	b21b      	sxthne	r3, r3
 80062f4:	e7cf      	b.n	8006296 <_printf_i+0x52>
 80062f6:	6813      	ldr	r3, [r2, #0]
 80062f8:	6825      	ldr	r5, [r4, #0]
 80062fa:	1d18      	adds	r0, r3, #4
 80062fc:	6010      	str	r0, [r2, #0]
 80062fe:	0628      	lsls	r0, r5, #24
 8006300:	d501      	bpl.n	8006306 <_printf_i+0xc2>
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	e002      	b.n	800630c <_printf_i+0xc8>
 8006306:	0668      	lsls	r0, r5, #25
 8006308:	d5fb      	bpl.n	8006302 <_printf_i+0xbe>
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	296f      	cmp	r1, #111	; 0x6f
 800630e:	bf14      	ite	ne
 8006310:	220a      	movne	r2, #10
 8006312:	2208      	moveq	r2, #8
 8006314:	4852      	ldr	r0, [pc, #328]	; (8006460 <_printf_i+0x21c>)
 8006316:	2100      	movs	r1, #0
 8006318:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800631c:	6865      	ldr	r5, [r4, #4]
 800631e:	2d00      	cmp	r5, #0
 8006320:	60a5      	str	r5, [r4, #8]
 8006322:	f2c0 8095 	blt.w	8006450 <_printf_i+0x20c>
 8006326:	6821      	ldr	r1, [r4, #0]
 8006328:	f021 0104 	bic.w	r1, r1, #4
 800632c:	6021      	str	r1, [r4, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d13d      	bne.n	80063ae <_printf_i+0x16a>
 8006332:	2d00      	cmp	r5, #0
 8006334:	f040 808e 	bne.w	8006454 <_printf_i+0x210>
 8006338:	4665      	mov	r5, ip
 800633a:	2a08      	cmp	r2, #8
 800633c:	d10b      	bne.n	8006356 <_printf_i+0x112>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	07db      	lsls	r3, r3, #31
 8006342:	d508      	bpl.n	8006356 <_printf_i+0x112>
 8006344:	6923      	ldr	r3, [r4, #16]
 8006346:	6862      	ldr	r2, [r4, #4]
 8006348:	429a      	cmp	r2, r3
 800634a:	bfde      	ittt	le
 800634c:	2330      	movle	r3, #48	; 0x30
 800634e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006352:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006356:	ebac 0305 	sub.w	r3, ip, r5
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	f8cd 8000 	str.w	r8, [sp]
 8006360:	463b      	mov	r3, r7
 8006362:	aa03      	add	r2, sp, #12
 8006364:	4621      	mov	r1, r4
 8006366:	4630      	mov	r0, r6
 8006368:	f7ff fef6 	bl	8006158 <_printf_common>
 800636c:	3001      	adds	r0, #1
 800636e:	d14d      	bne.n	800640c <_printf_i+0x1c8>
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	b005      	add	sp, #20
 8006376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800637a:	4839      	ldr	r0, [pc, #228]	; (8006460 <_printf_i+0x21c>)
 800637c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006380:	6813      	ldr	r3, [r2, #0]
 8006382:	6821      	ldr	r1, [r4, #0]
 8006384:	1d1d      	adds	r5, r3, #4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6015      	str	r5, [r2, #0]
 800638a:	060a      	lsls	r2, r1, #24
 800638c:	d50b      	bpl.n	80063a6 <_printf_i+0x162>
 800638e:	07ca      	lsls	r2, r1, #31
 8006390:	bf44      	itt	mi
 8006392:	f041 0120 	orrmi.w	r1, r1, #32
 8006396:	6021      	strmi	r1, [r4, #0]
 8006398:	b91b      	cbnz	r3, 80063a2 <_printf_i+0x15e>
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	f022 0220 	bic.w	r2, r2, #32
 80063a0:	6022      	str	r2, [r4, #0]
 80063a2:	2210      	movs	r2, #16
 80063a4:	e7b7      	b.n	8006316 <_printf_i+0xd2>
 80063a6:	064d      	lsls	r5, r1, #25
 80063a8:	bf48      	it	mi
 80063aa:	b29b      	uxthmi	r3, r3
 80063ac:	e7ef      	b.n	800638e <_printf_i+0x14a>
 80063ae:	4665      	mov	r5, ip
 80063b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80063b4:	fb02 3311 	mls	r3, r2, r1, r3
 80063b8:	5cc3      	ldrb	r3, [r0, r3]
 80063ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063be:	460b      	mov	r3, r1
 80063c0:	2900      	cmp	r1, #0
 80063c2:	d1f5      	bne.n	80063b0 <_printf_i+0x16c>
 80063c4:	e7b9      	b.n	800633a <_printf_i+0xf6>
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	6825      	ldr	r5, [r4, #0]
 80063ca:	1d18      	adds	r0, r3, #4
 80063cc:	6961      	ldr	r1, [r4, #20]
 80063ce:	6010      	str	r0, [r2, #0]
 80063d0:	0628      	lsls	r0, r5, #24
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	d501      	bpl.n	80063da <_printf_i+0x196>
 80063d6:	6019      	str	r1, [r3, #0]
 80063d8:	e002      	b.n	80063e0 <_printf_i+0x19c>
 80063da:	066a      	lsls	r2, r5, #25
 80063dc:	d5fb      	bpl.n	80063d6 <_printf_i+0x192>
 80063de:	8019      	strh	r1, [r3, #0]
 80063e0:	2300      	movs	r3, #0
 80063e2:	4665      	mov	r5, ip
 80063e4:	6123      	str	r3, [r4, #16]
 80063e6:	e7b9      	b.n	800635c <_printf_i+0x118>
 80063e8:	6813      	ldr	r3, [r2, #0]
 80063ea:	1d19      	adds	r1, r3, #4
 80063ec:	6011      	str	r1, [r2, #0]
 80063ee:	681d      	ldr	r5, [r3, #0]
 80063f0:	6862      	ldr	r2, [r4, #4]
 80063f2:	2100      	movs	r1, #0
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f9a1 	bl	800673c <memchr>
 80063fa:	b108      	cbz	r0, 8006400 <_printf_i+0x1bc>
 80063fc:	1b40      	subs	r0, r0, r5
 80063fe:	6060      	str	r0, [r4, #4]
 8006400:	6863      	ldr	r3, [r4, #4]
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	2300      	movs	r3, #0
 8006406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640a:	e7a7      	b.n	800635c <_printf_i+0x118>
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	462a      	mov	r2, r5
 8006410:	4639      	mov	r1, r7
 8006412:	4630      	mov	r0, r6
 8006414:	47c0      	blx	r8
 8006416:	3001      	adds	r0, #1
 8006418:	d0aa      	beq.n	8006370 <_printf_i+0x12c>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	079b      	lsls	r3, r3, #30
 800641e:	d413      	bmi.n	8006448 <_printf_i+0x204>
 8006420:	68e0      	ldr	r0, [r4, #12]
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	4298      	cmp	r0, r3
 8006426:	bfb8      	it	lt
 8006428:	4618      	movlt	r0, r3
 800642a:	e7a3      	b.n	8006374 <_printf_i+0x130>
 800642c:	2301      	movs	r3, #1
 800642e:	464a      	mov	r2, r9
 8006430:	4639      	mov	r1, r7
 8006432:	4630      	mov	r0, r6
 8006434:	47c0      	blx	r8
 8006436:	3001      	adds	r0, #1
 8006438:	d09a      	beq.n	8006370 <_printf_i+0x12c>
 800643a:	3501      	adds	r5, #1
 800643c:	68e3      	ldr	r3, [r4, #12]
 800643e:	9a03      	ldr	r2, [sp, #12]
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	42ab      	cmp	r3, r5
 8006444:	dcf2      	bgt.n	800642c <_printf_i+0x1e8>
 8006446:	e7eb      	b.n	8006420 <_printf_i+0x1dc>
 8006448:	2500      	movs	r5, #0
 800644a:	f104 0919 	add.w	r9, r4, #25
 800644e:	e7f5      	b.n	800643c <_printf_i+0x1f8>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1ac      	bne.n	80063ae <_printf_i+0x16a>
 8006454:	7803      	ldrb	r3, [r0, #0]
 8006456:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800645a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800645e:	e76c      	b.n	800633a <_printf_i+0xf6>
 8006460:	0800920d 	.word	0x0800920d
 8006464:	0800921e 	.word	0x0800921e

08006468 <_sbrk_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	2300      	movs	r3, #0
 800646c:	4c05      	ldr	r4, [pc, #20]	; (8006484 <_sbrk_r+0x1c>)
 800646e:	4605      	mov	r5, r0
 8006470:	4608      	mov	r0, r1
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	f7fb f984 	bl	8001780 <_sbrk>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_sbrk_r+0x1a>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	b103      	cbz	r3, 8006482 <_sbrk_r+0x1a>
 8006480:	602b      	str	r3, [r5, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	20000724 	.word	0x20000724

08006488 <__sread>:
 8006488:	b510      	push	{r4, lr}
 800648a:	460c      	mov	r4, r1
 800648c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006490:	f000 f964 	bl	800675c <_read_r>
 8006494:	2800      	cmp	r0, #0
 8006496:	bfab      	itete	ge
 8006498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800649a:	89a3      	ldrhlt	r3, [r4, #12]
 800649c:	181b      	addge	r3, r3, r0
 800649e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064a2:	bfac      	ite	ge
 80064a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80064a6:	81a3      	strhlt	r3, [r4, #12]
 80064a8:	bd10      	pop	{r4, pc}

080064aa <__swrite>:
 80064aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ae:	461f      	mov	r7, r3
 80064b0:	898b      	ldrh	r3, [r1, #12]
 80064b2:	4605      	mov	r5, r0
 80064b4:	05db      	lsls	r3, r3, #23
 80064b6:	460c      	mov	r4, r1
 80064b8:	4616      	mov	r6, r2
 80064ba:	d505      	bpl.n	80064c8 <__swrite+0x1e>
 80064bc:	2302      	movs	r3, #2
 80064be:	2200      	movs	r2, #0
 80064c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c4:	f000 f928 	bl	8006718 <_lseek_r>
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	4632      	mov	r2, r6
 80064cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064d0:	81a3      	strh	r3, [r4, #12]
 80064d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064d6:	463b      	mov	r3, r7
 80064d8:	4628      	mov	r0, r5
 80064da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064de:	f000 b869 	b.w	80065b4 <_write_r>

080064e2 <__sseek>:
 80064e2:	b510      	push	{r4, lr}
 80064e4:	460c      	mov	r4, r1
 80064e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ea:	f000 f915 	bl	8006718 <_lseek_r>
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	bf15      	itete	ne
 80064f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80064f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064fe:	81a3      	strheq	r3, [r4, #12]
 8006500:	bf18      	it	ne
 8006502:	81a3      	strhne	r3, [r4, #12]
 8006504:	bd10      	pop	{r4, pc}

08006506 <__sclose>:
 8006506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650a:	f000 b8d3 	b.w	80066b4 <_close_r>
	...

08006510 <__swbuf_r>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	460e      	mov	r6, r1
 8006514:	4614      	mov	r4, r2
 8006516:	4605      	mov	r5, r0
 8006518:	b118      	cbz	r0, 8006522 <__swbuf_r+0x12>
 800651a:	6983      	ldr	r3, [r0, #24]
 800651c:	b90b      	cbnz	r3, 8006522 <__swbuf_r+0x12>
 800651e:	f7ff fb41 	bl	8005ba4 <__sinit>
 8006522:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <__swbuf_r+0x98>)
 8006524:	429c      	cmp	r4, r3
 8006526:	d12a      	bne.n	800657e <__swbuf_r+0x6e>
 8006528:	686c      	ldr	r4, [r5, #4]
 800652a:	69a3      	ldr	r3, [r4, #24]
 800652c:	60a3      	str	r3, [r4, #8]
 800652e:	89a3      	ldrh	r3, [r4, #12]
 8006530:	071a      	lsls	r2, r3, #28
 8006532:	d52e      	bpl.n	8006592 <__swbuf_r+0x82>
 8006534:	6923      	ldr	r3, [r4, #16]
 8006536:	b363      	cbz	r3, 8006592 <__swbuf_r+0x82>
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	6820      	ldr	r0, [r4, #0]
 800653c:	b2f6      	uxtb	r6, r6
 800653e:	1ac0      	subs	r0, r0, r3
 8006540:	6963      	ldr	r3, [r4, #20]
 8006542:	4637      	mov	r7, r6
 8006544:	4283      	cmp	r3, r0
 8006546:	dc04      	bgt.n	8006552 <__swbuf_r+0x42>
 8006548:	4621      	mov	r1, r4
 800654a:	4628      	mov	r0, r5
 800654c:	f7ff fac0 	bl	8005ad0 <_fflush_r>
 8006550:	bb28      	cbnz	r0, 800659e <__swbuf_r+0x8e>
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	3001      	adds	r0, #1
 8006556:	3b01      	subs	r3, #1
 8006558:	60a3      	str	r3, [r4, #8]
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	6022      	str	r2, [r4, #0]
 8006560:	701e      	strb	r6, [r3, #0]
 8006562:	6963      	ldr	r3, [r4, #20]
 8006564:	4283      	cmp	r3, r0
 8006566:	d004      	beq.n	8006572 <__swbuf_r+0x62>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	07db      	lsls	r3, r3, #31
 800656c:	d519      	bpl.n	80065a2 <__swbuf_r+0x92>
 800656e:	2e0a      	cmp	r6, #10
 8006570:	d117      	bne.n	80065a2 <__swbuf_r+0x92>
 8006572:	4621      	mov	r1, r4
 8006574:	4628      	mov	r0, r5
 8006576:	f7ff faab 	bl	8005ad0 <_fflush_r>
 800657a:	b190      	cbz	r0, 80065a2 <__swbuf_r+0x92>
 800657c:	e00f      	b.n	800659e <__swbuf_r+0x8e>
 800657e:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <__swbuf_r+0x9c>)
 8006580:	429c      	cmp	r4, r3
 8006582:	d101      	bne.n	8006588 <__swbuf_r+0x78>
 8006584:	68ac      	ldr	r4, [r5, #8]
 8006586:	e7d0      	b.n	800652a <__swbuf_r+0x1a>
 8006588:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <__swbuf_r+0xa0>)
 800658a:	429c      	cmp	r4, r3
 800658c:	bf08      	it	eq
 800658e:	68ec      	ldreq	r4, [r5, #12]
 8006590:	e7cb      	b.n	800652a <__swbuf_r+0x1a>
 8006592:	4621      	mov	r1, r4
 8006594:	4628      	mov	r0, r5
 8006596:	f000 f81f 	bl	80065d8 <__swsetup_r>
 800659a:	2800      	cmp	r0, #0
 800659c:	d0cc      	beq.n	8006538 <__swbuf_r+0x28>
 800659e:	f04f 37ff 	mov.w	r7, #4294967295
 80065a2:	4638      	mov	r0, r7
 80065a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a6:	bf00      	nop
 80065a8:	080091bc 	.word	0x080091bc
 80065ac:	080091dc 	.word	0x080091dc
 80065b0:	0800919c 	.word	0x0800919c

080065b4 <_write_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4605      	mov	r5, r0
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	2200      	movs	r2, #0
 80065be:	4c05      	ldr	r4, [pc, #20]	; (80065d4 <_write_r+0x20>)
 80065c0:	6022      	str	r2, [r4, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f7fc f810 	bl	80025e8 <_write>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_write_r+0x1e>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_write_r+0x1e>
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	20000724 	.word	0x20000724

080065d8 <__swsetup_r>:
 80065d8:	4b32      	ldr	r3, [pc, #200]	; (80066a4 <__swsetup_r+0xcc>)
 80065da:	b570      	push	{r4, r5, r6, lr}
 80065dc:	681d      	ldr	r5, [r3, #0]
 80065de:	4606      	mov	r6, r0
 80065e0:	460c      	mov	r4, r1
 80065e2:	b125      	cbz	r5, 80065ee <__swsetup_r+0x16>
 80065e4:	69ab      	ldr	r3, [r5, #24]
 80065e6:	b913      	cbnz	r3, 80065ee <__swsetup_r+0x16>
 80065e8:	4628      	mov	r0, r5
 80065ea:	f7ff fadb 	bl	8005ba4 <__sinit>
 80065ee:	4b2e      	ldr	r3, [pc, #184]	; (80066a8 <__swsetup_r+0xd0>)
 80065f0:	429c      	cmp	r4, r3
 80065f2:	d10f      	bne.n	8006614 <__swsetup_r+0x3c>
 80065f4:	686c      	ldr	r4, [r5, #4]
 80065f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	0715      	lsls	r5, r2, #28
 80065fe:	d42c      	bmi.n	800665a <__swsetup_r+0x82>
 8006600:	06d0      	lsls	r0, r2, #27
 8006602:	d411      	bmi.n	8006628 <__swsetup_r+0x50>
 8006604:	2209      	movs	r2, #9
 8006606:	6032      	str	r2, [r6, #0]
 8006608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	f04f 30ff 	mov.w	r0, #4294967295
 8006612:	e03e      	b.n	8006692 <__swsetup_r+0xba>
 8006614:	4b25      	ldr	r3, [pc, #148]	; (80066ac <__swsetup_r+0xd4>)
 8006616:	429c      	cmp	r4, r3
 8006618:	d101      	bne.n	800661e <__swsetup_r+0x46>
 800661a:	68ac      	ldr	r4, [r5, #8]
 800661c:	e7eb      	b.n	80065f6 <__swsetup_r+0x1e>
 800661e:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <__swsetup_r+0xd8>)
 8006620:	429c      	cmp	r4, r3
 8006622:	bf08      	it	eq
 8006624:	68ec      	ldreq	r4, [r5, #12]
 8006626:	e7e6      	b.n	80065f6 <__swsetup_r+0x1e>
 8006628:	0751      	lsls	r1, r2, #29
 800662a:	d512      	bpl.n	8006652 <__swsetup_r+0x7a>
 800662c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800662e:	b141      	cbz	r1, 8006642 <__swsetup_r+0x6a>
 8006630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006634:	4299      	cmp	r1, r3
 8006636:	d002      	beq.n	800663e <__swsetup_r+0x66>
 8006638:	4630      	mov	r0, r6
 800663a:	f7ff fba9 	bl	8005d90 <_free_r>
 800663e:	2300      	movs	r3, #0
 8006640:	6363      	str	r3, [r4, #52]	; 0x34
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	2300      	movs	r3, #0
 800664c:	6063      	str	r3, [r4, #4]
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	f043 0308 	orr.w	r3, r3, #8
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	b94b      	cbnz	r3, 8006672 <__swsetup_r+0x9a>
 800665e:	89a3      	ldrh	r3, [r4, #12]
 8006660:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006668:	d003      	beq.n	8006672 <__swsetup_r+0x9a>
 800666a:	4621      	mov	r1, r4
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff fb47 	bl	8005d00 <__smakebuf_r>
 8006672:	89a2      	ldrh	r2, [r4, #12]
 8006674:	f012 0301 	ands.w	r3, r2, #1
 8006678:	d00c      	beq.n	8006694 <__swsetup_r+0xbc>
 800667a:	2300      	movs	r3, #0
 800667c:	60a3      	str	r3, [r4, #8]
 800667e:	6963      	ldr	r3, [r4, #20]
 8006680:	425b      	negs	r3, r3
 8006682:	61a3      	str	r3, [r4, #24]
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	b953      	cbnz	r3, 800669e <__swsetup_r+0xc6>
 8006688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800668c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006690:	d1ba      	bne.n	8006608 <__swsetup_r+0x30>
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	0792      	lsls	r2, r2, #30
 8006696:	bf58      	it	pl
 8006698:	6963      	ldrpl	r3, [r4, #20]
 800669a:	60a3      	str	r3, [r4, #8]
 800669c:	e7f2      	b.n	8006684 <__swsetup_r+0xac>
 800669e:	2000      	movs	r0, #0
 80066a0:	e7f7      	b.n	8006692 <__swsetup_r+0xba>
 80066a2:	bf00      	nop
 80066a4:	20000028 	.word	0x20000028
 80066a8:	080091bc 	.word	0x080091bc
 80066ac:	080091dc 	.word	0x080091dc
 80066b0:	0800919c 	.word	0x0800919c

080066b4 <_close_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	2300      	movs	r3, #0
 80066b8:	4c05      	ldr	r4, [pc, #20]	; (80066d0 <_close_r+0x1c>)
 80066ba:	4605      	mov	r5, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	6023      	str	r3, [r4, #0]
 80066c0:	f7fb ffbe 	bl	8002640 <_close>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_close_r+0x1a>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_close_r+0x1a>
 80066cc:	602b      	str	r3, [r5, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	20000724 	.word	0x20000724

080066d4 <_fstat_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	2300      	movs	r3, #0
 80066d8:	4c06      	ldr	r4, [pc, #24]	; (80066f4 <_fstat_r+0x20>)
 80066da:	4605      	mov	r5, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	f7fb fffd 	bl	80026e0 <_fstat>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	d102      	bne.n	80066f0 <_fstat_r+0x1c>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	b103      	cbz	r3, 80066f0 <_fstat_r+0x1c>
 80066ee:	602b      	str	r3, [r5, #0]
 80066f0:	bd38      	pop	{r3, r4, r5, pc}
 80066f2:	bf00      	nop
 80066f4:	20000724 	.word	0x20000724

080066f8 <_isatty_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	2300      	movs	r3, #0
 80066fc:	4c05      	ldr	r4, [pc, #20]	; (8006714 <_isatty_r+0x1c>)
 80066fe:	4605      	mov	r5, r0
 8006700:	4608      	mov	r0, r1
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	f7fb ff5a 	bl	80025bc <_isatty>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_isatty_r+0x1a>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	b103      	cbz	r3, 8006712 <_isatty_r+0x1a>
 8006710:	602b      	str	r3, [r5, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	20000724 	.word	0x20000724

08006718 <_lseek_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4605      	mov	r5, r0
 800671c:	4608      	mov	r0, r1
 800671e:	4611      	mov	r1, r2
 8006720:	2200      	movs	r2, #0
 8006722:	4c05      	ldr	r4, [pc, #20]	; (8006738 <_lseek_r+0x20>)
 8006724:	6022      	str	r2, [r4, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	f7fb ffa1 	bl	800266e <_lseek>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_lseek_r+0x1e>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	b103      	cbz	r3, 8006736 <_lseek_r+0x1e>
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	20000724 	.word	0x20000724

0800673c <memchr>:
 800673c:	b510      	push	{r4, lr}
 800673e:	b2c9      	uxtb	r1, r1
 8006740:	4402      	add	r2, r0
 8006742:	4290      	cmp	r0, r2
 8006744:	4603      	mov	r3, r0
 8006746:	d101      	bne.n	800674c <memchr+0x10>
 8006748:	2300      	movs	r3, #0
 800674a:	e003      	b.n	8006754 <memchr+0x18>
 800674c:	781c      	ldrb	r4, [r3, #0]
 800674e:	3001      	adds	r0, #1
 8006750:	428c      	cmp	r4, r1
 8006752:	d1f6      	bne.n	8006742 <memchr+0x6>
 8006754:	4618      	mov	r0, r3
 8006756:	bd10      	pop	{r4, pc}

08006758 <__malloc_lock>:
 8006758:	4770      	bx	lr

0800675a <__malloc_unlock>:
 800675a:	4770      	bx	lr

0800675c <_read_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4605      	mov	r5, r0
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	2200      	movs	r2, #0
 8006766:	4c05      	ldr	r4, [pc, #20]	; (800677c <_read_r+0x20>)
 8006768:	6022      	str	r2, [r4, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	f7fb ff90 	bl	8002690 <_read>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_read_r+0x1e>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	b103      	cbz	r3, 800677a <_read_r+0x1e>
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	20000724 	.word	0x20000724

08006780 <sin>:
 8006780:	b530      	push	{r4, r5, lr}
 8006782:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <sin+0x6c>)
 8006784:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006788:	4293      	cmp	r3, r2
 800678a:	b087      	sub	sp, #28
 800678c:	dc06      	bgt.n	800679c <sin+0x1c>
 800678e:	2300      	movs	r3, #0
 8006790:	2200      	movs	r2, #0
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	f000 fe27 	bl	80073e8 <__kernel_sin>
 800679a:	e006      	b.n	80067aa <sin+0x2a>
 800679c:	4a14      	ldr	r2, [pc, #80]	; (80067f0 <sin+0x70>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	dd05      	ble.n	80067ae <sin+0x2e>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	f7f9 fcd7 	bl	8000158 <__aeabi_dsub>
 80067aa:	b007      	add	sp, #28
 80067ac:	bd30      	pop	{r4, r5, pc}
 80067ae:	aa02      	add	r2, sp, #8
 80067b0:	f000 f822 	bl	80067f8 <__ieee754_rem_pio2>
 80067b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b8:	f000 0403 	and.w	r4, r0, #3
 80067bc:	2c01      	cmp	r4, #1
 80067be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c2:	d005      	beq.n	80067d0 <sin+0x50>
 80067c4:	2c02      	cmp	r4, #2
 80067c6:	d006      	beq.n	80067d6 <sin+0x56>
 80067c8:	b964      	cbnz	r4, 80067e4 <sin+0x64>
 80067ca:	2401      	movs	r4, #1
 80067cc:	9400      	str	r4, [sp, #0]
 80067ce:	e7e2      	b.n	8006796 <sin+0x16>
 80067d0:	f000 fa02 	bl	8006bd8 <__kernel_cos>
 80067d4:	e7e9      	b.n	80067aa <sin+0x2a>
 80067d6:	2401      	movs	r4, #1
 80067d8:	9400      	str	r4, [sp, #0]
 80067da:	f000 fe05 	bl	80073e8 <__kernel_sin>
 80067de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80067e2:	e7e2      	b.n	80067aa <sin+0x2a>
 80067e4:	f000 f9f8 	bl	8006bd8 <__kernel_cos>
 80067e8:	e7f9      	b.n	80067de <sin+0x5e>
 80067ea:	bf00      	nop
 80067ec:	3fe921fb 	.word	0x3fe921fb
 80067f0:	7fefffff 	.word	0x7fefffff
 80067f4:	00000000 	.word	0x00000000

080067f8 <__ieee754_rem_pio2>:
 80067f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	4614      	mov	r4, r2
 80067fe:	4ac2      	ldr	r2, [pc, #776]	; (8006b08 <__ieee754_rem_pio2+0x310>)
 8006800:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006804:	4592      	cmp	sl, r2
 8006806:	b08d      	sub	sp, #52	; 0x34
 8006808:	468b      	mov	fp, r1
 800680a:	dc07      	bgt.n	800681c <__ieee754_rem_pio2+0x24>
 800680c:	2200      	movs	r2, #0
 800680e:	2300      	movs	r3, #0
 8006810:	e9c4 0100 	strd	r0, r1, [r4]
 8006814:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006818:	2500      	movs	r5, #0
 800681a:	e023      	b.n	8006864 <__ieee754_rem_pio2+0x6c>
 800681c:	4abb      	ldr	r2, [pc, #748]	; (8006b0c <__ieee754_rem_pio2+0x314>)
 800681e:	4592      	cmp	sl, r2
 8006820:	dc71      	bgt.n	8006906 <__ieee754_rem_pio2+0x10e>
 8006822:	a3ab      	add	r3, pc, #684	; (adr r3, 8006ad0 <__ieee754_rem_pio2+0x2d8>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	2900      	cmp	r1, #0
 800682a:	4db9      	ldr	r5, [pc, #740]	; (8006b10 <__ieee754_rem_pio2+0x318>)
 800682c:	dd36      	ble.n	800689c <__ieee754_rem_pio2+0xa4>
 800682e:	f7f9 fc93 	bl	8000158 <__aeabi_dsub>
 8006832:	45aa      	cmp	sl, r5
 8006834:	4606      	mov	r6, r0
 8006836:	460f      	mov	r7, r1
 8006838:	d018      	beq.n	800686c <__ieee754_rem_pio2+0x74>
 800683a:	a3a7      	add	r3, pc, #668	; (adr r3, 8006ad8 <__ieee754_rem_pio2+0x2e0>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 fc8a 	bl	8000158 <__aeabi_dsub>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4630      	mov	r0, r6
 800684a:	e9c4 2300 	strd	r2, r3, [r4]
 800684e:	4639      	mov	r1, r7
 8006850:	f7f9 fc82 	bl	8000158 <__aeabi_dsub>
 8006854:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ad8 <__ieee754_rem_pio2+0x2e0>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7f9 fc7d 	bl	8000158 <__aeabi_dsub>
 800685e:	2501      	movs	r5, #1
 8006860:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006864:	4628      	mov	r0, r5
 8006866:	b00d      	add	sp, #52	; 0x34
 8006868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	a39c      	add	r3, pc, #624	; (adr r3, 8006ae0 <__ieee754_rem_pio2+0x2e8>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fc71 	bl	8000158 <__aeabi_dsub>
 8006876:	a39c      	add	r3, pc, #624	; (adr r3, 8006ae8 <__ieee754_rem_pio2+0x2f0>)
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	4606      	mov	r6, r0
 800687e:	460f      	mov	r7, r1
 8006880:	f7f9 fc6a 	bl	8000158 <__aeabi_dsub>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4630      	mov	r0, r6
 800688a:	e9c4 2300 	strd	r2, r3, [r4]
 800688e:	4639      	mov	r1, r7
 8006890:	f7f9 fc62 	bl	8000158 <__aeabi_dsub>
 8006894:	a394      	add	r3, pc, #592	; (adr r3, 8006ae8 <__ieee754_rem_pio2+0x2f0>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	e7de      	b.n	800685a <__ieee754_rem_pio2+0x62>
 800689c:	f7f9 fc5e 	bl	800015c <__adddf3>
 80068a0:	45aa      	cmp	sl, r5
 80068a2:	4606      	mov	r6, r0
 80068a4:	460f      	mov	r7, r1
 80068a6:	d016      	beq.n	80068d6 <__ieee754_rem_pio2+0xde>
 80068a8:	a38b      	add	r3, pc, #556	; (adr r3, 8006ad8 <__ieee754_rem_pio2+0x2e0>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7f9 fc55 	bl	800015c <__adddf3>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4630      	mov	r0, r6
 80068b8:	e9c4 2300 	strd	r2, r3, [r4]
 80068bc:	4639      	mov	r1, r7
 80068be:	f7f9 fc4b 	bl	8000158 <__aeabi_dsub>
 80068c2:	a385      	add	r3, pc, #532	; (adr r3, 8006ad8 <__ieee754_rem_pio2+0x2e0>)
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f7f9 fc48 	bl	800015c <__adddf3>
 80068cc:	f04f 35ff 	mov.w	r5, #4294967295
 80068d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068d4:	e7c6      	b.n	8006864 <__ieee754_rem_pio2+0x6c>
 80068d6:	a382      	add	r3, pc, #520	; (adr r3, 8006ae0 <__ieee754_rem_pio2+0x2e8>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fc3e 	bl	800015c <__adddf3>
 80068e0:	a381      	add	r3, pc, #516	; (adr r3, 8006ae8 <__ieee754_rem_pio2+0x2f0>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	4606      	mov	r6, r0
 80068e8:	460f      	mov	r7, r1
 80068ea:	f7f9 fc37 	bl	800015c <__adddf3>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4630      	mov	r0, r6
 80068f4:	e9c4 2300 	strd	r2, r3, [r4]
 80068f8:	4639      	mov	r1, r7
 80068fa:	f7f9 fc2d 	bl	8000158 <__aeabi_dsub>
 80068fe:	a37a      	add	r3, pc, #488	; (adr r3, 8006ae8 <__ieee754_rem_pio2+0x2f0>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	e7e0      	b.n	80068c8 <__ieee754_rem_pio2+0xd0>
 8006906:	4a83      	ldr	r2, [pc, #524]	; (8006b14 <__ieee754_rem_pio2+0x31c>)
 8006908:	4592      	cmp	sl, r2
 800690a:	f300 80d2 	bgt.w	8006ab2 <__ieee754_rem_pio2+0x2ba>
 800690e:	f000 fe21 	bl	8007554 <fabs>
 8006912:	a377      	add	r3, pc, #476	; (adr r3, 8006af0 <__ieee754_rem_pio2+0x2f8>)
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	4606      	mov	r6, r0
 800691a:	460f      	mov	r7, r1
 800691c:	f7f9 fdd4 	bl	80004c8 <__aeabi_dmul>
 8006920:	2200      	movs	r2, #0
 8006922:	4b7d      	ldr	r3, [pc, #500]	; (8006b18 <__ieee754_rem_pio2+0x320>)
 8006924:	f7f9 fc1a 	bl	800015c <__adddf3>
 8006928:	f7fa f868 	bl	80009fc <__aeabi_d2iz>
 800692c:	4605      	mov	r5, r0
 800692e:	f7f9 fd61 	bl	80003f4 <__aeabi_i2d>
 8006932:	a367      	add	r3, pc, #412	; (adr r3, 8006ad0 <__ieee754_rem_pio2+0x2d8>)
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800693c:	f7f9 fdc4 	bl	80004c8 <__aeabi_dmul>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4630      	mov	r0, r6
 8006946:	4639      	mov	r1, r7
 8006948:	f7f9 fc06 	bl	8000158 <__aeabi_dsub>
 800694c:	a362      	add	r3, pc, #392	; (adr r3, 8006ad8 <__ieee754_rem_pio2+0x2e0>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800695a:	f7f9 fdb5 	bl	80004c8 <__aeabi_dmul>
 800695e:	2d1f      	cmp	r5, #31
 8006960:	4680      	mov	r8, r0
 8006962:	4689      	mov	r9, r1
 8006964:	dc0e      	bgt.n	8006984 <__ieee754_rem_pio2+0x18c>
 8006966:	4b6d      	ldr	r3, [pc, #436]	; (8006b1c <__ieee754_rem_pio2+0x324>)
 8006968:	1e6a      	subs	r2, r5, #1
 800696a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696e:	4553      	cmp	r3, sl
 8006970:	d008      	beq.n	8006984 <__ieee754_rem_pio2+0x18c>
 8006972:	4642      	mov	r2, r8
 8006974:	464b      	mov	r3, r9
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7f9 fbed 	bl	8000158 <__aeabi_dsub>
 800697e:	e9c4 0100 	strd	r0, r1, [r4]
 8006982:	e011      	b.n	80069a8 <__ieee754_rem_pio2+0x1b0>
 8006984:	464b      	mov	r3, r9
 8006986:	4642      	mov	r2, r8
 8006988:	4630      	mov	r0, r6
 800698a:	4639      	mov	r1, r7
 800698c:	f7f9 fbe4 	bl	8000158 <__aeabi_dsub>
 8006990:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006994:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006998:	ebaa 0303 	sub.w	r3, sl, r3
 800699c:	2b10      	cmp	r3, #16
 800699e:	dc1f      	bgt.n	80069e0 <__ieee754_rem_pio2+0x1e8>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	e9c4 2300 	strd	r2, r3, [r4]
 80069a8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80069ac:	4630      	mov	r0, r6
 80069ae:	4653      	mov	r3, sl
 80069b0:	4639      	mov	r1, r7
 80069b2:	f7f9 fbd1 	bl	8000158 <__aeabi_dsub>
 80069b6:	4642      	mov	r2, r8
 80069b8:	464b      	mov	r3, r9
 80069ba:	f7f9 fbcd 	bl	8000158 <__aeabi_dsub>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	f1bb 0f00 	cmp.w	fp, #0
 80069c6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80069ca:	f6bf af4b 	bge.w	8006864 <__ieee754_rem_pio2+0x6c>
 80069ce:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80069d2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 80069d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80069da:	60e1      	str	r1, [r4, #12]
 80069dc:	426d      	negs	r5, r5
 80069de:	e741      	b.n	8006864 <__ieee754_rem_pio2+0x6c>
 80069e0:	a33f      	add	r3, pc, #252	; (adr r3, 8006ae0 <__ieee754_rem_pio2+0x2e8>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ea:	f7f9 fd6d 	bl	80004c8 <__aeabi_dmul>
 80069ee:	4680      	mov	r8, r0
 80069f0:	4689      	mov	r9, r1
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4630      	mov	r0, r6
 80069f8:	4639      	mov	r1, r7
 80069fa:	f7f9 fbad 	bl	8000158 <__aeabi_dsub>
 80069fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7f9 fba5 	bl	8000158 <__aeabi_dsub>
 8006a0e:	4642      	mov	r2, r8
 8006a10:	464b      	mov	r3, r9
 8006a12:	f7f9 fba1 	bl	8000158 <__aeabi_dsub>
 8006a16:	a334      	add	r3, pc, #208	; (adr r3, 8006ae8 <__ieee754_rem_pio2+0x2f0>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	460f      	mov	r7, r1
 8006a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a24:	f7f9 fd50 	bl	80004c8 <__aeabi_dmul>
 8006a28:	4632      	mov	r2, r6
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	f7f9 fb94 	bl	8000158 <__aeabi_dsub>
 8006a30:	460b      	mov	r3, r1
 8006a32:	4602      	mov	r2, r0
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a3c:	f7f9 fb8c 	bl	8000158 <__aeabi_dsub>
 8006a40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006a44:	ebaa 0a03 	sub.w	sl, sl, r3
 8006a48:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8006a4c:	dc06      	bgt.n	8006a5c <__ieee754_rem_pio2+0x264>
 8006a4e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	e9c4 2300 	strd	r2, r3, [r4]
 8006a5a:	e7a5      	b.n	80069a8 <__ieee754_rem_pio2+0x1b0>
 8006a5c:	a326      	add	r3, pc, #152	; (adr r3, 8006af8 <__ieee754_rem_pio2+0x300>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a66:	f7f9 fd2f 	bl	80004c8 <__aeabi_dmul>
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	4689      	mov	r9, r1
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a76:	f7f9 fb6f 	bl	8000158 <__aeabi_dsub>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a86:	f7f9 fb67 	bl	8000158 <__aeabi_dsub>
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	f7f9 fb63 	bl	8000158 <__aeabi_dsub>
 8006a92:	a31b      	add	r3, pc, #108	; (adr r3, 8006b00 <__ieee754_rem_pio2+0x308>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	4680      	mov	r8, r0
 8006a9a:	4689      	mov	r9, r1
 8006a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa0:	f7f9 fd12 	bl	80004c8 <__aeabi_dmul>
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	f7f9 fb56 	bl	8000158 <__aeabi_dsub>
 8006aac:	4680      	mov	r8, r0
 8006aae:	4689      	mov	r9, r1
 8006ab0:	e75f      	b.n	8006972 <__ieee754_rem_pio2+0x17a>
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <__ieee754_rem_pio2+0x328>)
 8006ab4:	4592      	cmp	sl, r2
 8006ab6:	dd35      	ble.n	8006b24 <__ieee754_rem_pio2+0x32c>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	f7f9 fb4c 	bl	8000158 <__aeabi_dsub>
 8006ac0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ac4:	e9c4 0100 	strd	r0, r1, [r4]
 8006ac8:	e6a6      	b.n	8006818 <__ieee754_rem_pio2+0x20>
 8006aca:	bf00      	nop
 8006acc:	f3af 8000 	nop.w
 8006ad0:	54400000 	.word	0x54400000
 8006ad4:	3ff921fb 	.word	0x3ff921fb
 8006ad8:	1a626331 	.word	0x1a626331
 8006adc:	3dd0b461 	.word	0x3dd0b461
 8006ae0:	1a600000 	.word	0x1a600000
 8006ae4:	3dd0b461 	.word	0x3dd0b461
 8006ae8:	2e037073 	.word	0x2e037073
 8006aec:	3ba3198a 	.word	0x3ba3198a
 8006af0:	6dc9c883 	.word	0x6dc9c883
 8006af4:	3fe45f30 	.word	0x3fe45f30
 8006af8:	2e000000 	.word	0x2e000000
 8006afc:	3ba3198a 	.word	0x3ba3198a
 8006b00:	252049c1 	.word	0x252049c1
 8006b04:	397b839a 	.word	0x397b839a
 8006b08:	3fe921fb 	.word	0x3fe921fb
 8006b0c:	4002d97b 	.word	0x4002d97b
 8006b10:	3ff921fb 	.word	0x3ff921fb
 8006b14:	413921fb 	.word	0x413921fb
 8006b18:	3fe00000 	.word	0x3fe00000
 8006b1c:	08009230 	.word	0x08009230
 8006b20:	7fefffff 	.word	0x7fefffff
 8006b24:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006b28:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006b2c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006b30:	460f      	mov	r7, r1
 8006b32:	4606      	mov	r6, r0
 8006b34:	f7f9 ff62 	bl	80009fc <__aeabi_d2iz>
 8006b38:	f7f9 fc5c 	bl	80003f4 <__aeabi_i2d>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4630      	mov	r0, r6
 8006b42:	4639      	mov	r1, r7
 8006b44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b48:	f7f9 fb06 	bl	8000158 <__aeabi_dsub>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <__ieee754_rem_pio2+0x3d8>)
 8006b50:	f7f9 fcba 	bl	80004c8 <__aeabi_dmul>
 8006b54:	460f      	mov	r7, r1
 8006b56:	4606      	mov	r6, r0
 8006b58:	f7f9 ff50 	bl	80009fc <__aeabi_d2iz>
 8006b5c:	f7f9 fc4a 	bl	80003f4 <__aeabi_i2d>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4630      	mov	r0, r6
 8006b66:	4639      	mov	r1, r7
 8006b68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b6c:	f7f9 faf4 	bl	8000158 <__aeabi_dsub>
 8006b70:	2200      	movs	r2, #0
 8006b72:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <__ieee754_rem_pio2+0x3d8>)
 8006b74:	f7f9 fca8 	bl	80004c8 <__aeabi_dmul>
 8006b78:	f04f 0803 	mov.w	r8, #3
 8006b7c:	2600      	movs	r6, #0
 8006b7e:	2700      	movs	r7, #0
 8006b80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006b88:	4632      	mov	r2, r6
 8006b8a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006b8e:	463b      	mov	r3, r7
 8006b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8006b94:	f7f9 ff00 	bl	8000998 <__aeabi_dcmpeq>
 8006b98:	b9b8      	cbnz	r0, 8006bca <__ieee754_rem_pio2+0x3d2>
 8006b9a:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <__ieee754_rem_pio2+0x3dc>)
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	a806      	add	r0, sp, #24
 8006ba8:	4643      	mov	r3, r8
 8006baa:	f000 f8d3 	bl	8006d54 <__kernel_rem_pio2>
 8006bae:	f1bb 0f00 	cmp.w	fp, #0
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	f6bf ae56 	bge.w	8006864 <__ieee754_rem_pio2+0x6c>
 8006bb8:	6863      	ldr	r3, [r4, #4]
 8006bba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006bbe:	6063      	str	r3, [r4, #4]
 8006bc0:	68e3      	ldr	r3, [r4, #12]
 8006bc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006bc6:	60e3      	str	r3, [r4, #12]
 8006bc8:	e708      	b.n	80069dc <__ieee754_rem_pio2+0x1e4>
 8006bca:	46d0      	mov	r8, sl
 8006bcc:	e7dc      	b.n	8006b88 <__ieee754_rem_pio2+0x390>
 8006bce:	bf00      	nop
 8006bd0:	41700000 	.word	0x41700000
 8006bd4:	080092b0 	.word	0x080092b0

08006bd8 <__kernel_cos>:
 8006bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006be0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006be4:	4680      	mov	r8, r0
 8006be6:	460f      	mov	r7, r1
 8006be8:	e9cd 2300 	strd	r2, r3, [sp]
 8006bec:	da04      	bge.n	8006bf8 <__kernel_cos+0x20>
 8006bee:	f7f9 ff05 	bl	80009fc <__aeabi_d2iz>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	f000 8086 	beq.w	8006d04 <__kernel_cos+0x12c>
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	4639      	mov	r1, r7
 8006c00:	f7f9 fc62 	bl	80004c8 <__aeabi_dmul>
 8006c04:	2200      	movs	r2, #0
 8006c06:	4b4e      	ldr	r3, [pc, #312]	; (8006d40 <__kernel_cos+0x168>)
 8006c08:	4604      	mov	r4, r0
 8006c0a:	460d      	mov	r5, r1
 8006c0c:	f7f9 fc5c 	bl	80004c8 <__aeabi_dmul>
 8006c10:	a33f      	add	r3, pc, #252	; (adr r3, 8006d10 <__kernel_cos+0x138>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	4682      	mov	sl, r0
 8006c18:	468b      	mov	fp, r1
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	f7f9 fc53 	bl	80004c8 <__aeabi_dmul>
 8006c22:	a33d      	add	r3, pc, #244	; (adr r3, 8006d18 <__kernel_cos+0x140>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f7f9 fa98 	bl	800015c <__adddf3>
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	462b      	mov	r3, r5
 8006c30:	f7f9 fc4a 	bl	80004c8 <__aeabi_dmul>
 8006c34:	a33a      	add	r3, pc, #232	; (adr r3, 8006d20 <__kernel_cos+0x148>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 fa8d 	bl	8000158 <__aeabi_dsub>
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	f7f9 fc41 	bl	80004c8 <__aeabi_dmul>
 8006c46:	a338      	add	r3, pc, #224	; (adr r3, 8006d28 <__kernel_cos+0x150>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 fa86 	bl	800015c <__adddf3>
 8006c50:	4622      	mov	r2, r4
 8006c52:	462b      	mov	r3, r5
 8006c54:	f7f9 fc38 	bl	80004c8 <__aeabi_dmul>
 8006c58:	a335      	add	r3, pc, #212	; (adr r3, 8006d30 <__kernel_cos+0x158>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fa7b 	bl	8000158 <__aeabi_dsub>
 8006c62:	4622      	mov	r2, r4
 8006c64:	462b      	mov	r3, r5
 8006c66:	f7f9 fc2f 	bl	80004c8 <__aeabi_dmul>
 8006c6a:	a333      	add	r3, pc, #204	; (adr r3, 8006d38 <__kernel_cos+0x160>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f7f9 fa74 	bl	800015c <__adddf3>
 8006c74:	4622      	mov	r2, r4
 8006c76:	462b      	mov	r3, r5
 8006c78:	f7f9 fc26 	bl	80004c8 <__aeabi_dmul>
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	462b      	mov	r3, r5
 8006c80:	f7f9 fc22 	bl	80004c8 <__aeabi_dmul>
 8006c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c88:	4604      	mov	r4, r0
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f7f9 fc1a 	bl	80004c8 <__aeabi_dmul>
 8006c94:	460b      	mov	r3, r1
 8006c96:	4602      	mov	r2, r0
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7f9 fa5c 	bl	8000158 <__aeabi_dsub>
 8006ca0:	4b28      	ldr	r3, [pc, #160]	; (8006d44 <__kernel_cos+0x16c>)
 8006ca2:	4680      	mov	r8, r0
 8006ca4:	429e      	cmp	r6, r3
 8006ca6:	4689      	mov	r9, r1
 8006ca8:	dc0e      	bgt.n	8006cc8 <__kernel_cos+0xf0>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4650      	mov	r0, sl
 8006cb0:	4659      	mov	r1, fp
 8006cb2:	f7f9 fa51 	bl	8000158 <__aeabi_dsub>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	2000      	movs	r0, #0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4922      	ldr	r1, [pc, #136]	; (8006d48 <__kernel_cos+0x170>)
 8006cbe:	f7f9 fa4b 	bl	8000158 <__aeabi_dsub>
 8006cc2:	b003      	add	sp, #12
 8006cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc8:	2400      	movs	r4, #0
 8006cca:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <__kernel_cos+0x174>)
 8006ccc:	4622      	mov	r2, r4
 8006cce:	429e      	cmp	r6, r3
 8006cd0:	bfcc      	ite	gt
 8006cd2:	4d1f      	ldrgt	r5, [pc, #124]	; (8006d50 <__kernel_cos+0x178>)
 8006cd4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006cd8:	462b      	mov	r3, r5
 8006cda:	2000      	movs	r0, #0
 8006cdc:	491a      	ldr	r1, [pc, #104]	; (8006d48 <__kernel_cos+0x170>)
 8006cde:	f7f9 fa3b 	bl	8000158 <__aeabi_dsub>
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	460f      	mov	r7, r1
 8006ce8:	462b      	mov	r3, r5
 8006cea:	4650      	mov	r0, sl
 8006cec:	4659      	mov	r1, fp
 8006cee:	f7f9 fa33 	bl	8000158 <__aeabi_dsub>
 8006cf2:	4642      	mov	r2, r8
 8006cf4:	464b      	mov	r3, r9
 8006cf6:	f7f9 fa2f 	bl	8000158 <__aeabi_dsub>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4630      	mov	r0, r6
 8006d00:	4639      	mov	r1, r7
 8006d02:	e7dc      	b.n	8006cbe <__kernel_cos+0xe6>
 8006d04:	2000      	movs	r0, #0
 8006d06:	4910      	ldr	r1, [pc, #64]	; (8006d48 <__kernel_cos+0x170>)
 8006d08:	e7db      	b.n	8006cc2 <__kernel_cos+0xea>
 8006d0a:	bf00      	nop
 8006d0c:	f3af 8000 	nop.w
 8006d10:	be8838d4 	.word	0xbe8838d4
 8006d14:	bda8fae9 	.word	0xbda8fae9
 8006d18:	bdb4b1c4 	.word	0xbdb4b1c4
 8006d1c:	3e21ee9e 	.word	0x3e21ee9e
 8006d20:	809c52ad 	.word	0x809c52ad
 8006d24:	3e927e4f 	.word	0x3e927e4f
 8006d28:	19cb1590 	.word	0x19cb1590
 8006d2c:	3efa01a0 	.word	0x3efa01a0
 8006d30:	16c15177 	.word	0x16c15177
 8006d34:	3f56c16c 	.word	0x3f56c16c
 8006d38:	5555554c 	.word	0x5555554c
 8006d3c:	3fa55555 	.word	0x3fa55555
 8006d40:	3fe00000 	.word	0x3fe00000
 8006d44:	3fd33332 	.word	0x3fd33332
 8006d48:	3ff00000 	.word	0x3ff00000
 8006d4c:	3fe90000 	.word	0x3fe90000
 8006d50:	3fd20000 	.word	0x3fd20000

08006d54 <__kernel_rem_pio2>:
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006d5c:	9307      	str	r3, [sp, #28]
 8006d5e:	9104      	str	r1, [sp, #16]
 8006d60:	4bbf      	ldr	r3, [pc, #764]	; (8007060 <__kernel_rem_pio2+0x30c>)
 8006d62:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006d64:	1ed4      	subs	r4, r2, #3
 8006d66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	9302      	str	r3, [sp, #8]
 8006d6e:	9b07      	ldr	r3, [sp, #28]
 8006d70:	9008      	str	r0, [sp, #32]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	9306      	str	r3, [sp, #24]
 8006d76:	2318      	movs	r3, #24
 8006d78:	fb94 f4f3 	sdiv	r4, r4, r3
 8006d7c:	f06f 0317 	mvn.w	r3, #23
 8006d80:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006d84:	fb04 3303 	mla	r3, r4, r3, r3
 8006d88:	eb03 0a02 	add.w	sl, r3, r2
 8006d8c:	9a06      	ldr	r2, [sp, #24]
 8006d8e:	9b02      	ldr	r3, [sp, #8]
 8006d90:	1aa7      	subs	r7, r4, r2
 8006d92:	eb03 0802 	add.w	r8, r3, r2
 8006d96:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006d98:	2200      	movs	r2, #0
 8006d9a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006d9e:	2300      	movs	r3, #0
 8006da0:	ae1e      	add	r6, sp, #120	; 0x78
 8006da2:	4545      	cmp	r5, r8
 8006da4:	dd14      	ble.n	8006dd0 <__kernel_rem_pio2+0x7c>
 8006da6:	2600      	movs	r6, #0
 8006da8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8006dac:	9b02      	ldr	r3, [sp, #8]
 8006dae:	429e      	cmp	r6, r3
 8006db0:	dc39      	bgt.n	8006e26 <__kernel_rem_pio2+0xd2>
 8006db2:	9b08      	ldr	r3, [sp, #32]
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	3b08      	subs	r3, #8
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	9b07      	ldr	r3, [sp, #28]
 8006dbe:	f04f 0900 	mov.w	r9, #0
 8006dc2:	199d      	adds	r5, r3, r6
 8006dc4:	ab20      	add	r3, sp, #128	; 0x80
 8006dc6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006dca:	9305      	str	r3, [sp, #20]
 8006dcc:	2700      	movs	r7, #0
 8006dce:	e023      	b.n	8006e18 <__kernel_rem_pio2+0xc4>
 8006dd0:	42ef      	cmn	r7, r5
 8006dd2:	d40b      	bmi.n	8006dec <__kernel_rem_pio2+0x98>
 8006dd4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006dd8:	e9cd 2300 	strd	r2, r3, [sp]
 8006ddc:	f7f9 fb0a 	bl	80003f4 <__aeabi_i2d>
 8006de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006de4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8006de8:	3501      	adds	r5, #1
 8006dea:	e7da      	b.n	8006da2 <__kernel_rem_pio2+0x4e>
 8006dec:	4610      	mov	r0, r2
 8006dee:	4619      	mov	r1, r3
 8006df0:	e7f8      	b.n	8006de4 <__kernel_rem_pio2+0x90>
 8006df2:	9905      	ldr	r1, [sp, #20]
 8006df4:	9d00      	ldr	r5, [sp, #0]
 8006df6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006dfa:	9105      	str	r1, [sp, #20]
 8006dfc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8006e00:	9500      	str	r5, [sp, #0]
 8006e02:	f7f9 fb61 	bl	80004c8 <__aeabi_dmul>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 f9a5 	bl	800015c <__adddf3>
 8006e12:	4680      	mov	r8, r0
 8006e14:	4689      	mov	r9, r1
 8006e16:	3701      	adds	r7, #1
 8006e18:	9b06      	ldr	r3, [sp, #24]
 8006e1a:	429f      	cmp	r7, r3
 8006e1c:	dde9      	ble.n	8006df2 <__kernel_rem_pio2+0x9e>
 8006e1e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8006e22:	3601      	adds	r6, #1
 8006e24:	e7c2      	b.n	8006dac <__kernel_rem_pio2+0x58>
 8006e26:	9b02      	ldr	r3, [sp, #8]
 8006e28:	aa0c      	add	r2, sp, #48	; 0x30
 8006e2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e30:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006e32:	9f02      	ldr	r7, [sp, #8]
 8006e34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006e38:	930a      	str	r3, [sp, #40]	; 0x28
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	ab98      	add	r3, sp, #608	; 0x260
 8006e3e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8006e42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e4a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006e4e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006e52:	ab98      	add	r3, sp, #608	; 0x260
 8006e54:	445b      	add	r3, fp
 8006e56:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8006e5a:	1bbb      	subs	r3, r7, r6
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc71      	bgt.n	8006f44 <__kernel_rem_pio2+0x1f0>
 8006e60:	4652      	mov	r2, sl
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	f000 fbff 	bl	8007668 <scalbn>
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006e70:	4604      	mov	r4, r0
 8006e72:	460d      	mov	r5, r1
 8006e74:	f7f9 fb28 	bl	80004c8 <__aeabi_dmul>
 8006e78:	f000 fb72 	bl	8007560 <floor>
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4b79      	ldr	r3, [pc, #484]	; (8007064 <__kernel_rem_pio2+0x310>)
 8006e80:	f7f9 fb22 	bl	80004c8 <__aeabi_dmul>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7f9 f964 	bl	8000158 <__aeabi_dsub>
 8006e90:	460d      	mov	r5, r1
 8006e92:	4604      	mov	r4, r0
 8006e94:	f7f9 fdb2 	bl	80009fc <__aeabi_d2iz>
 8006e98:	9005      	str	r0, [sp, #20]
 8006e9a:	f7f9 faab 	bl	80003f4 <__aeabi_i2d>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	f7f9 f957 	bl	8000158 <__aeabi_dsub>
 8006eaa:	f1ba 0f00 	cmp.w	sl, #0
 8006eae:	4680      	mov	r8, r0
 8006eb0:	4689      	mov	r9, r1
 8006eb2:	dd6c      	ble.n	8006f8e <__kernel_rem_pio2+0x23a>
 8006eb4:	1e7a      	subs	r2, r7, #1
 8006eb6:	ab0c      	add	r3, sp, #48	; 0x30
 8006eb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006ebc:	f1ca 0118 	rsb	r1, sl, #24
 8006ec0:	9c05      	ldr	r4, [sp, #20]
 8006ec2:	fa40 f301 	asr.w	r3, r0, r1
 8006ec6:	441c      	add	r4, r3
 8006ec8:	408b      	lsls	r3, r1
 8006eca:	1ac0      	subs	r0, r0, r3
 8006ecc:	ab0c      	add	r3, sp, #48	; 0x30
 8006ece:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006ed2:	f1ca 0317 	rsb	r3, sl, #23
 8006ed6:	9405      	str	r4, [sp, #20]
 8006ed8:	fa40 f303 	asr.w	r3, r0, r3
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	9b00      	ldr	r3, [sp, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	dd62      	ble.n	8006faa <__kernel_rem_pio2+0x256>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006eea:	4614      	mov	r4, r2
 8006eec:	9b05      	ldr	r3, [sp, #20]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	9305      	str	r3, [sp, #20]
 8006ef2:	4297      	cmp	r7, r2
 8006ef4:	f300 809f 	bgt.w	8007036 <__kernel_rem_pio2+0x2e2>
 8006ef8:	f1ba 0f00 	cmp.w	sl, #0
 8006efc:	dd07      	ble.n	8006f0e <__kernel_rem_pio2+0x1ba>
 8006efe:	f1ba 0f01 	cmp.w	sl, #1
 8006f02:	f000 80bb 	beq.w	800707c <__kernel_rem_pio2+0x328>
 8006f06:	f1ba 0f02 	cmp.w	sl, #2
 8006f0a:	f000 80c1 	beq.w	8007090 <__kernel_rem_pio2+0x33c>
 8006f0e:	9b00      	ldr	r3, [sp, #0]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d14a      	bne.n	8006faa <__kernel_rem_pio2+0x256>
 8006f14:	4642      	mov	r2, r8
 8006f16:	464b      	mov	r3, r9
 8006f18:	2000      	movs	r0, #0
 8006f1a:	4953      	ldr	r1, [pc, #332]	; (8007068 <__kernel_rem_pio2+0x314>)
 8006f1c:	f7f9 f91c 	bl	8000158 <__aeabi_dsub>
 8006f20:	4680      	mov	r8, r0
 8006f22:	4689      	mov	r9, r1
 8006f24:	2c00      	cmp	r4, #0
 8006f26:	d040      	beq.n	8006faa <__kernel_rem_pio2+0x256>
 8006f28:	4652      	mov	r2, sl
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	494e      	ldr	r1, [pc, #312]	; (8007068 <__kernel_rem_pio2+0x314>)
 8006f2e:	f000 fb9b 	bl	8007668 <scalbn>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4640      	mov	r0, r8
 8006f38:	4649      	mov	r1, r9
 8006f3a:	f7f9 f90d 	bl	8000158 <__aeabi_dsub>
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4689      	mov	r9, r1
 8006f42:	e032      	b.n	8006faa <__kernel_rem_pio2+0x256>
 8006f44:	2200      	movs	r2, #0
 8006f46:	4b49      	ldr	r3, [pc, #292]	; (800706c <__kernel_rem_pio2+0x318>)
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	f7f9 fabc 	bl	80004c8 <__aeabi_dmul>
 8006f50:	f7f9 fd54 	bl	80009fc <__aeabi_d2iz>
 8006f54:	f7f9 fa4e 	bl	80003f4 <__aeabi_i2d>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4b45      	ldr	r3, [pc, #276]	; (8007070 <__kernel_rem_pio2+0x31c>)
 8006f5c:	e9cd 0100 	strd	r0, r1, [sp]
 8006f60:	f7f9 fab2 	bl	80004c8 <__aeabi_dmul>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	f7f9 f8f4 	bl	8000158 <__aeabi_dsub>
 8006f70:	f7f9 fd44 	bl	80009fc <__aeabi_d2iz>
 8006f74:	ab0c      	add	r3, sp, #48	; 0x30
 8006f76:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006f7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f82:	f7f9 f8eb 	bl	800015c <__adddf3>
 8006f86:	3601      	adds	r6, #1
 8006f88:	4680      	mov	r8, r0
 8006f8a:	4689      	mov	r9, r1
 8006f8c:	e765      	b.n	8006e5a <__kernel_rem_pio2+0x106>
 8006f8e:	d105      	bne.n	8006f9c <__kernel_rem_pio2+0x248>
 8006f90:	1e7b      	subs	r3, r7, #1
 8006f92:	aa0c      	add	r2, sp, #48	; 0x30
 8006f94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006f98:	15c3      	asrs	r3, r0, #23
 8006f9a:	e79f      	b.n	8006edc <__kernel_rem_pio2+0x188>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4b35      	ldr	r3, [pc, #212]	; (8007074 <__kernel_rem_pio2+0x320>)
 8006fa0:	f7f9 fd18 	bl	80009d4 <__aeabi_dcmpge>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d143      	bne.n	8007030 <__kernel_rem_pio2+0x2dc>
 8006fa8:	9000      	str	r0, [sp, #0]
 8006faa:	2200      	movs	r2, #0
 8006fac:	2300      	movs	r3, #0
 8006fae:	4640      	mov	r0, r8
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	f7f9 fcf1 	bl	8000998 <__aeabi_dcmpeq>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	f000 80c3 	beq.w	8007142 <__kernel_rem_pio2+0x3ee>
 8006fbc:	1e7c      	subs	r4, r7, #1
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	9902      	ldr	r1, [sp, #8]
 8006fc4:	428b      	cmp	r3, r1
 8006fc6:	da6a      	bge.n	800709e <__kernel_rem_pio2+0x34a>
 8006fc8:	2a00      	cmp	r2, #0
 8006fca:	f000 8084 	beq.w	80070d6 <__kernel_rem_pio2+0x382>
 8006fce:	ab0c      	add	r3, sp, #48	; 0x30
 8006fd0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006fd4:	f1aa 0a18 	sub.w	sl, sl, #24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80b0 	beq.w	800713e <__kernel_rem_pio2+0x3ea>
 8006fde:	4652      	mov	r2, sl
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	4921      	ldr	r1, [pc, #132]	; (8007068 <__kernel_rem_pio2+0x314>)
 8006fe4:	f000 fb40 	bl	8007668 <scalbn>
 8006fe8:	4625      	mov	r5, r4
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	f04f 0a00 	mov.w	sl, #0
 8006ff2:	00e3      	lsls	r3, r4, #3
 8006ff4:	aa98      	add	r2, sp, #608	; 0x260
 8006ff6:	eb02 0803 	add.w	r8, r2, r3
 8006ffa:	f8df b070 	ldr.w	fp, [pc, #112]	; 800706c <__kernel_rem_pio2+0x318>
 8006ffe:	9306      	str	r3, [sp, #24]
 8007000:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8007004:	2d00      	cmp	r5, #0
 8007006:	f280 80d2 	bge.w	80071ae <__kernel_rem_pio2+0x45a>
 800700a:	2500      	movs	r5, #0
 800700c:	9a06      	ldr	r2, [sp, #24]
 800700e:	ab98      	add	r3, sp, #608	; 0x260
 8007010:	189e      	adds	r6, r3, r2
 8007012:	3ea8      	subs	r6, #168	; 0xa8
 8007014:	1b63      	subs	r3, r4, r5
 8007016:	2b00      	cmp	r3, #0
 8007018:	f2c0 80f9 	blt.w	800720e <__kernel_rem_pio2+0x4ba>
 800701c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8007078 <__kernel_rem_pio2+0x324>
 8007020:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8007024:	f04f 0a00 	mov.w	sl, #0
 8007028:	f04f 0b00 	mov.w	fp, #0
 800702c:	2700      	movs	r7, #0
 800702e:	e0e2      	b.n	80071f6 <__kernel_rem_pio2+0x4a2>
 8007030:	2302      	movs	r3, #2
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	e756      	b.n	8006ee4 <__kernel_rem_pio2+0x190>
 8007036:	ab0c      	add	r3, sp, #48	; 0x30
 8007038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703c:	b94c      	cbnz	r4, 8007052 <__kernel_rem_pio2+0x2fe>
 800703e:	b12b      	cbz	r3, 800704c <__kernel_rem_pio2+0x2f8>
 8007040:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007044:	a80c      	add	r0, sp, #48	; 0x30
 8007046:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800704a:	2301      	movs	r3, #1
 800704c:	3201      	adds	r2, #1
 800704e:	461c      	mov	r4, r3
 8007050:	e74f      	b.n	8006ef2 <__kernel_rem_pio2+0x19e>
 8007052:	1acb      	subs	r3, r1, r3
 8007054:	a80c      	add	r0, sp, #48	; 0x30
 8007056:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800705a:	4623      	mov	r3, r4
 800705c:	e7f6      	b.n	800704c <__kernel_rem_pio2+0x2f8>
 800705e:	bf00      	nop
 8007060:	080093f8 	.word	0x080093f8
 8007064:	40200000 	.word	0x40200000
 8007068:	3ff00000 	.word	0x3ff00000
 800706c:	3e700000 	.word	0x3e700000
 8007070:	41700000 	.word	0x41700000
 8007074:	3fe00000 	.word	0x3fe00000
 8007078:	080093b0 	.word	0x080093b0
 800707c:	1e7a      	subs	r2, r7, #1
 800707e:	ab0c      	add	r3, sp, #48	; 0x30
 8007080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007084:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007088:	a90c      	add	r1, sp, #48	; 0x30
 800708a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800708e:	e73e      	b.n	8006f0e <__kernel_rem_pio2+0x1ba>
 8007090:	1e7a      	subs	r2, r7, #1
 8007092:	ab0c      	add	r3, sp, #48	; 0x30
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800709c:	e7f4      	b.n	8007088 <__kernel_rem_pio2+0x334>
 800709e:	a90c      	add	r1, sp, #48	; 0x30
 80070a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	430a      	orrs	r2, r1
 80070a8:	e78b      	b.n	8006fc2 <__kernel_rem_pio2+0x26e>
 80070aa:	3401      	adds	r4, #1
 80070ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	d0fa      	beq.n	80070aa <__kernel_rem_pio2+0x356>
 80070b4:	ab98      	add	r3, sp, #608	; 0x260
 80070b6:	449b      	add	fp, r3
 80070b8:	9b07      	ldr	r3, [sp, #28]
 80070ba:	1c7e      	adds	r6, r7, #1
 80070bc:	19dd      	adds	r5, r3, r7
 80070be:	ab98      	add	r3, sp, #608	; 0x260
 80070c0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80070c4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 80070c8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80070cc:	443c      	add	r4, r7
 80070ce:	42b4      	cmp	r4, r6
 80070d0:	da04      	bge.n	80070dc <__kernel_rem_pio2+0x388>
 80070d2:	4627      	mov	r7, r4
 80070d4:	e6b1      	b.n	8006e3a <__kernel_rem_pio2+0xe6>
 80070d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d8:	2401      	movs	r4, #1
 80070da:	e7e7      	b.n	80070ac <__kernel_rem_pio2+0x358>
 80070dc:	f105 0308 	add.w	r3, r5, #8
 80070e0:	9309      	str	r3, [sp, #36]	; 0x24
 80070e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e4:	2700      	movs	r7, #0
 80070e6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80070ea:	f7f9 f983 	bl	80003f4 <__aeabi_i2d>
 80070ee:	f04f 0800 	mov.w	r8, #0
 80070f2:	f04f 0900 	mov.w	r9, #0
 80070f6:	9b08      	ldr	r3, [sp, #32]
 80070f8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80070fc:	3b08      	subs	r3, #8
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	f105 0310 	add.w	r3, r5, #16
 8007104:	9305      	str	r3, [sp, #20]
 8007106:	9b06      	ldr	r3, [sp, #24]
 8007108:	429f      	cmp	r7, r3
 800710a:	dd04      	ble.n	8007116 <__kernel_rem_pio2+0x3c2>
 800710c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8007110:	3601      	adds	r6, #1
 8007112:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007114:	e7db      	b.n	80070ce <__kernel_rem_pio2+0x37a>
 8007116:	9905      	ldr	r1, [sp, #20]
 8007118:	9d00      	ldr	r5, [sp, #0]
 800711a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800711e:	9105      	str	r1, [sp, #20]
 8007120:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8007124:	9500      	str	r5, [sp, #0]
 8007126:	f7f9 f9cf 	bl	80004c8 <__aeabi_dmul>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4640      	mov	r0, r8
 8007130:	4649      	mov	r1, r9
 8007132:	f7f9 f813 	bl	800015c <__adddf3>
 8007136:	3701      	adds	r7, #1
 8007138:	4680      	mov	r8, r0
 800713a:	4689      	mov	r9, r1
 800713c:	e7e3      	b.n	8007106 <__kernel_rem_pio2+0x3b2>
 800713e:	3c01      	subs	r4, #1
 8007140:	e745      	b.n	8006fce <__kernel_rem_pio2+0x27a>
 8007142:	f1ca 0200 	rsb	r2, sl, #0
 8007146:	4640      	mov	r0, r8
 8007148:	4649      	mov	r1, r9
 800714a:	f000 fa8d 	bl	8007668 <scalbn>
 800714e:	2200      	movs	r2, #0
 8007150:	4ba3      	ldr	r3, [pc, #652]	; (80073e0 <__kernel_rem_pio2+0x68c>)
 8007152:	4604      	mov	r4, r0
 8007154:	460d      	mov	r5, r1
 8007156:	f7f9 fc3d 	bl	80009d4 <__aeabi_dcmpge>
 800715a:	b1f8      	cbz	r0, 800719c <__kernel_rem_pio2+0x448>
 800715c:	2200      	movs	r2, #0
 800715e:	4ba1      	ldr	r3, [pc, #644]	; (80073e4 <__kernel_rem_pio2+0x690>)
 8007160:	4620      	mov	r0, r4
 8007162:	4629      	mov	r1, r5
 8007164:	f7f9 f9b0 	bl	80004c8 <__aeabi_dmul>
 8007168:	f7f9 fc48 	bl	80009fc <__aeabi_d2iz>
 800716c:	4606      	mov	r6, r0
 800716e:	f7f9 f941 	bl	80003f4 <__aeabi_i2d>
 8007172:	2200      	movs	r2, #0
 8007174:	4b9a      	ldr	r3, [pc, #616]	; (80073e0 <__kernel_rem_pio2+0x68c>)
 8007176:	f7f9 f9a7 	bl	80004c8 <__aeabi_dmul>
 800717a:	460b      	mov	r3, r1
 800717c:	4602      	mov	r2, r0
 800717e:	4629      	mov	r1, r5
 8007180:	4620      	mov	r0, r4
 8007182:	f7f8 ffe9 	bl	8000158 <__aeabi_dsub>
 8007186:	f7f9 fc39 	bl	80009fc <__aeabi_d2iz>
 800718a:	1c7c      	adds	r4, r7, #1
 800718c:	ab0c      	add	r3, sp, #48	; 0x30
 800718e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007192:	f10a 0a18 	add.w	sl, sl, #24
 8007196:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800719a:	e720      	b.n	8006fde <__kernel_rem_pio2+0x28a>
 800719c:	4620      	mov	r0, r4
 800719e:	4629      	mov	r1, r5
 80071a0:	f7f9 fc2c 	bl	80009fc <__aeabi_d2iz>
 80071a4:	ab0c      	add	r3, sp, #48	; 0x30
 80071a6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80071aa:	463c      	mov	r4, r7
 80071ac:	e717      	b.n	8006fde <__kernel_rem_pio2+0x28a>
 80071ae:	ab0c      	add	r3, sp, #48	; 0x30
 80071b0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071b4:	f7f9 f91e 	bl	80003f4 <__aeabi_i2d>
 80071b8:	4632      	mov	r2, r6
 80071ba:	463b      	mov	r3, r7
 80071bc:	f7f9 f984 	bl	80004c8 <__aeabi_dmul>
 80071c0:	4652      	mov	r2, sl
 80071c2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80071c6:	465b      	mov	r3, fp
 80071c8:	4630      	mov	r0, r6
 80071ca:	4639      	mov	r1, r7
 80071cc:	f7f9 f97c 	bl	80004c8 <__aeabi_dmul>
 80071d0:	3d01      	subs	r5, #1
 80071d2:	4606      	mov	r6, r0
 80071d4:	460f      	mov	r7, r1
 80071d6:	e715      	b.n	8007004 <__kernel_rem_pio2+0x2b0>
 80071d8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80071dc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80071e0:	f7f9 f972 	bl	80004c8 <__aeabi_dmul>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4650      	mov	r0, sl
 80071ea:	4659      	mov	r1, fp
 80071ec:	f7f8 ffb6 	bl	800015c <__adddf3>
 80071f0:	4682      	mov	sl, r0
 80071f2:	468b      	mov	fp, r1
 80071f4:	3701      	adds	r7, #1
 80071f6:	9b02      	ldr	r3, [sp, #8]
 80071f8:	429f      	cmp	r7, r3
 80071fa:	dc01      	bgt.n	8007200 <__kernel_rem_pio2+0x4ac>
 80071fc:	42bd      	cmp	r5, r7
 80071fe:	daeb      	bge.n	80071d8 <__kernel_rem_pio2+0x484>
 8007200:	ab48      	add	r3, sp, #288	; 0x120
 8007202:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007206:	e9c3 ab00 	strd	sl, fp, [r3]
 800720a:	3501      	adds	r5, #1
 800720c:	e702      	b.n	8007014 <__kernel_rem_pio2+0x2c0>
 800720e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007210:	2b03      	cmp	r3, #3
 8007212:	d86c      	bhi.n	80072ee <__kernel_rem_pio2+0x59a>
 8007214:	e8df f003 	tbb	[pc, r3]
 8007218:	022f2f59 	.word	0x022f2f59
 800721c:	9a06      	ldr	r2, [sp, #24]
 800721e:	ab48      	add	r3, sp, #288	; 0x120
 8007220:	189d      	adds	r5, r3, r2
 8007222:	46aa      	mov	sl, r5
 8007224:	46a3      	mov	fp, r4
 8007226:	f1bb 0f00 	cmp.w	fp, #0
 800722a:	f300 8087 	bgt.w	800733c <__kernel_rem_pio2+0x5e8>
 800722e:	46a2      	mov	sl, r4
 8007230:	f1ba 0f01 	cmp.w	sl, #1
 8007234:	f300 809f 	bgt.w	8007376 <__kernel_rem_pio2+0x622>
 8007238:	2700      	movs	r7, #0
 800723a:	463e      	mov	r6, r7
 800723c:	9d06      	ldr	r5, [sp, #24]
 800723e:	ab48      	add	r3, sp, #288	; 0x120
 8007240:	3508      	adds	r5, #8
 8007242:	441d      	add	r5, r3
 8007244:	2c01      	cmp	r4, #1
 8007246:	f300 80b3 	bgt.w	80073b0 <__kernel_rem_pio2+0x65c>
 800724a:	9b00      	ldr	r3, [sp, #0]
 800724c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800724e:	9849      	ldr	r0, [sp, #292]	; 0x124
 8007250:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8007252:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 80b5 	bne.w	80073c4 <__kernel_rem_pio2+0x670>
 800725a:	4603      	mov	r3, r0
 800725c:	462a      	mov	r2, r5
 800725e:	9804      	ldr	r0, [sp, #16]
 8007260:	e9c0 2300 	strd	r2, r3, [r0]
 8007264:	4622      	mov	r2, r4
 8007266:	460b      	mov	r3, r1
 8007268:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800726c:	463a      	mov	r2, r7
 800726e:	4633      	mov	r3, r6
 8007270:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007274:	e03b      	b.n	80072ee <__kernel_rem_pio2+0x59a>
 8007276:	f04f 0c00 	mov.w	ip, #0
 800727a:	4626      	mov	r6, r4
 800727c:	4667      	mov	r7, ip
 800727e:	9d06      	ldr	r5, [sp, #24]
 8007280:	ab48      	add	r3, sp, #288	; 0x120
 8007282:	3508      	adds	r5, #8
 8007284:	441d      	add	r5, r3
 8007286:	2e00      	cmp	r6, #0
 8007288:	da42      	bge.n	8007310 <__kernel_rem_pio2+0x5bc>
 800728a:	9b00      	ldr	r3, [sp, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d049      	beq.n	8007324 <__kernel_rem_pio2+0x5d0>
 8007290:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8007294:	4662      	mov	r2, ip
 8007296:	460b      	mov	r3, r1
 8007298:	9904      	ldr	r1, [sp, #16]
 800729a:	2601      	movs	r6, #1
 800729c:	e9c1 2300 	strd	r2, r3, [r1]
 80072a0:	a948      	add	r1, sp, #288	; 0x120
 80072a2:	463b      	mov	r3, r7
 80072a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072a8:	f7f8 ff56 	bl	8000158 <__aeabi_dsub>
 80072ac:	4684      	mov	ip, r0
 80072ae:	460f      	mov	r7, r1
 80072b0:	ad48      	add	r5, sp, #288	; 0x120
 80072b2:	42b4      	cmp	r4, r6
 80072b4:	da38      	bge.n	8007328 <__kernel_rem_pio2+0x5d4>
 80072b6:	9b00      	ldr	r3, [sp, #0]
 80072b8:	b10b      	cbz	r3, 80072be <__kernel_rem_pio2+0x56a>
 80072ba:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80072be:	4662      	mov	r2, ip
 80072c0:	463b      	mov	r3, r7
 80072c2:	9904      	ldr	r1, [sp, #16]
 80072c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80072c8:	e011      	b.n	80072ee <__kernel_rem_pio2+0x59a>
 80072ca:	2700      	movs	r7, #0
 80072cc:	463d      	mov	r5, r7
 80072ce:	9b06      	ldr	r3, [sp, #24]
 80072d0:	aa98      	add	r2, sp, #608	; 0x260
 80072d2:	4413      	add	r3, r2
 80072d4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 80072d8:	2c00      	cmp	r4, #0
 80072da:	da0f      	bge.n	80072fc <__kernel_rem_pio2+0x5a8>
 80072dc:	9b00      	ldr	r3, [sp, #0]
 80072de:	b10b      	cbz	r3, 80072e4 <__kernel_rem_pio2+0x590>
 80072e0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80072e4:	463a      	mov	r2, r7
 80072e6:	462b      	mov	r3, r5
 80072e8:	9904      	ldr	r1, [sp, #16]
 80072ea:	e9c1 2300 	strd	r2, r3, [r1]
 80072ee:	9b05      	ldr	r3, [sp, #20]
 80072f0:	f003 0007 	and.w	r0, r3, #7
 80072f4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80072f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fc:	4638      	mov	r0, r7
 80072fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007302:	4629      	mov	r1, r5
 8007304:	f7f8 ff2a 	bl	800015c <__adddf3>
 8007308:	3c01      	subs	r4, #1
 800730a:	4607      	mov	r7, r0
 800730c:	460d      	mov	r5, r1
 800730e:	e7e3      	b.n	80072d8 <__kernel_rem_pio2+0x584>
 8007310:	4660      	mov	r0, ip
 8007312:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007316:	4639      	mov	r1, r7
 8007318:	f7f8 ff20 	bl	800015c <__adddf3>
 800731c:	3e01      	subs	r6, #1
 800731e:	4684      	mov	ip, r0
 8007320:	460f      	mov	r7, r1
 8007322:	e7b0      	b.n	8007286 <__kernel_rem_pio2+0x532>
 8007324:	4639      	mov	r1, r7
 8007326:	e7b5      	b.n	8007294 <__kernel_rem_pio2+0x540>
 8007328:	4660      	mov	r0, ip
 800732a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800732e:	4639      	mov	r1, r7
 8007330:	f7f8 ff14 	bl	800015c <__adddf3>
 8007334:	3601      	adds	r6, #1
 8007336:	4684      	mov	ip, r0
 8007338:	460f      	mov	r7, r1
 800733a:	e7ba      	b.n	80072b2 <__kernel_rem_pio2+0x55e>
 800733c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8007340:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8007344:	4640      	mov	r0, r8
 8007346:	4649      	mov	r1, r9
 8007348:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800734c:	f7f8 ff06 	bl	800015c <__adddf3>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4606      	mov	r6, r0
 8007356:	460f      	mov	r7, r1
 8007358:	4640      	mov	r0, r8
 800735a:	4649      	mov	r1, r9
 800735c:	f7f8 fefc 	bl	8000158 <__aeabi_dsub>
 8007360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007364:	f7f8 fefa 	bl	800015c <__adddf3>
 8007368:	f10b 3bff 	add.w	fp, fp, #4294967295
 800736c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007370:	e9ca 6700 	strd	r6, r7, [sl]
 8007374:	e757      	b.n	8007226 <__kernel_rem_pio2+0x4d2>
 8007376:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800737a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800737e:	4630      	mov	r0, r6
 8007380:	4639      	mov	r1, r7
 8007382:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007386:	f7f8 fee9 	bl	800015c <__adddf3>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4680      	mov	r8, r0
 8007390:	4689      	mov	r9, r1
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f8 fedf 	bl	8000158 <__aeabi_dsub>
 800739a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800739e:	f7f8 fedd 	bl	800015c <__adddf3>
 80073a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073a6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80073aa:	e9c5 8900 	strd	r8, r9, [r5]
 80073ae:	e73f      	b.n	8007230 <__kernel_rem_pio2+0x4dc>
 80073b0:	4638      	mov	r0, r7
 80073b2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80073b6:	4631      	mov	r1, r6
 80073b8:	f7f8 fed0 	bl	800015c <__adddf3>
 80073bc:	3c01      	subs	r4, #1
 80073be:	4607      	mov	r7, r0
 80073c0:	460e      	mov	r6, r1
 80073c2:	e73f      	b.n	8007244 <__kernel_rem_pio2+0x4f0>
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80073ca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80073ce:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80073d2:	601d      	str	r5, [r3, #0]
 80073d4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80073d8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80073dc:	615e      	str	r6, [r3, #20]
 80073de:	e786      	b.n	80072ee <__kernel_rem_pio2+0x59a>
 80073e0:	41700000 	.word	0x41700000
 80073e4:	3e700000 	.word	0x3e700000

080073e8 <__kernel_sin>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	b086      	sub	sp, #24
 80073ee:	e9cd 2300 	strd	r2, r3, [sp]
 80073f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80073fa:	4682      	mov	sl, r0
 80073fc:	460c      	mov	r4, r1
 80073fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007400:	da03      	bge.n	800740a <__kernel_sin+0x22>
 8007402:	f7f9 fafb 	bl	80009fc <__aeabi_d2iz>
 8007406:	2800      	cmp	r0, #0
 8007408:	d050      	beq.n	80074ac <__kernel_sin+0xc4>
 800740a:	4652      	mov	r2, sl
 800740c:	4623      	mov	r3, r4
 800740e:	4650      	mov	r0, sl
 8007410:	4621      	mov	r1, r4
 8007412:	f7f9 f859 	bl	80004c8 <__aeabi_dmul>
 8007416:	4606      	mov	r6, r0
 8007418:	460f      	mov	r7, r1
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4650      	mov	r0, sl
 8007420:	4621      	mov	r1, r4
 8007422:	f7f9 f851 	bl	80004c8 <__aeabi_dmul>
 8007426:	a33e      	add	r3, pc, #248	; (adr r3, 8007520 <__kernel_sin+0x138>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	4680      	mov	r8, r0
 800742e:	4689      	mov	r9, r1
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f9 f848 	bl	80004c8 <__aeabi_dmul>
 8007438:	a33b      	add	r3, pc, #236	; (adr r3, 8007528 <__kernel_sin+0x140>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f8 fe8b 	bl	8000158 <__aeabi_dsub>
 8007442:	4632      	mov	r2, r6
 8007444:	463b      	mov	r3, r7
 8007446:	f7f9 f83f 	bl	80004c8 <__aeabi_dmul>
 800744a:	a339      	add	r3, pc, #228	; (adr r3, 8007530 <__kernel_sin+0x148>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f7f8 fe84 	bl	800015c <__adddf3>
 8007454:	4632      	mov	r2, r6
 8007456:	463b      	mov	r3, r7
 8007458:	f7f9 f836 	bl	80004c8 <__aeabi_dmul>
 800745c:	a336      	add	r3, pc, #216	; (adr r3, 8007538 <__kernel_sin+0x150>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f7f8 fe79 	bl	8000158 <__aeabi_dsub>
 8007466:	4632      	mov	r2, r6
 8007468:	463b      	mov	r3, r7
 800746a:	f7f9 f82d 	bl	80004c8 <__aeabi_dmul>
 800746e:	a334      	add	r3, pc, #208	; (adr r3, 8007540 <__kernel_sin+0x158>)
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f7f8 fe72 	bl	800015c <__adddf3>
 8007478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800747c:	b9dd      	cbnz	r5, 80074b6 <__kernel_sin+0xce>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4630      	mov	r0, r6
 8007484:	4639      	mov	r1, r7
 8007486:	f7f9 f81f 	bl	80004c8 <__aeabi_dmul>
 800748a:	a32f      	add	r3, pc, #188	; (adr r3, 8007548 <__kernel_sin+0x160>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 fe62 	bl	8000158 <__aeabi_dsub>
 8007494:	4642      	mov	r2, r8
 8007496:	464b      	mov	r3, r9
 8007498:	f7f9 f816 	bl	80004c8 <__aeabi_dmul>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4650      	mov	r0, sl
 80074a2:	4621      	mov	r1, r4
 80074a4:	f7f8 fe5a 	bl	800015c <__adddf3>
 80074a8:	4682      	mov	sl, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	4650      	mov	r0, sl
 80074ae:	4621      	mov	r1, r4
 80074b0:	b006      	add	sp, #24
 80074b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b6:	2200      	movs	r2, #0
 80074b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074bc:	4b24      	ldr	r3, [pc, #144]	; (8007550 <__kernel_sin+0x168>)
 80074be:	f7f9 f803 	bl	80004c8 <__aeabi_dmul>
 80074c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074ca:	4640      	mov	r0, r8
 80074cc:	4649      	mov	r1, r9
 80074ce:	f7f8 fffb 	bl	80004c8 <__aeabi_dmul>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074da:	f7f8 fe3d 	bl	8000158 <__aeabi_dsub>
 80074de:	4632      	mov	r2, r6
 80074e0:	463b      	mov	r3, r7
 80074e2:	f7f8 fff1 	bl	80004c8 <__aeabi_dmul>
 80074e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ea:	f7f8 fe35 	bl	8000158 <__aeabi_dsub>
 80074ee:	a316      	add	r3, pc, #88	; (adr r3, 8007548 <__kernel_sin+0x160>)
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	4606      	mov	r6, r0
 80074f6:	460f      	mov	r7, r1
 80074f8:	4640      	mov	r0, r8
 80074fa:	4649      	mov	r1, r9
 80074fc:	f7f8 ffe4 	bl	80004c8 <__aeabi_dmul>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4630      	mov	r0, r6
 8007506:	4639      	mov	r1, r7
 8007508:	f7f8 fe28 	bl	800015c <__adddf3>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4650      	mov	r0, sl
 8007512:	4621      	mov	r1, r4
 8007514:	f7f8 fe20 	bl	8000158 <__aeabi_dsub>
 8007518:	e7c6      	b.n	80074a8 <__kernel_sin+0xc0>
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w
 8007520:	5acfd57c 	.word	0x5acfd57c
 8007524:	3de5d93a 	.word	0x3de5d93a
 8007528:	8a2b9ceb 	.word	0x8a2b9ceb
 800752c:	3e5ae5e6 	.word	0x3e5ae5e6
 8007530:	57b1fe7d 	.word	0x57b1fe7d
 8007534:	3ec71de3 	.word	0x3ec71de3
 8007538:	19c161d5 	.word	0x19c161d5
 800753c:	3f2a01a0 	.word	0x3f2a01a0
 8007540:	1110f8a6 	.word	0x1110f8a6
 8007544:	3f811111 	.word	0x3f811111
 8007548:	55555549 	.word	0x55555549
 800754c:	3fc55555 	.word	0x3fc55555
 8007550:	3fe00000 	.word	0x3fe00000

08007554 <fabs>:
 8007554:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007558:	4619      	mov	r1, r3
 800755a:	4770      	bx	lr
 800755c:	0000      	movs	r0, r0
	...

08007560 <floor>:
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007568:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800756c:	2e13      	cmp	r6, #19
 800756e:	4607      	mov	r7, r0
 8007570:	460b      	mov	r3, r1
 8007572:	460c      	mov	r4, r1
 8007574:	4605      	mov	r5, r0
 8007576:	dc35      	bgt.n	80075e4 <floor+0x84>
 8007578:	2e00      	cmp	r6, #0
 800757a:	da16      	bge.n	80075aa <floor+0x4a>
 800757c:	a336      	add	r3, pc, #216	; (adr r3, 8007658 <floor+0xf8>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f8 fdeb 	bl	800015c <__adddf3>
 8007586:	2200      	movs	r2, #0
 8007588:	2300      	movs	r3, #0
 800758a:	f7f9 fa2d 	bl	80009e8 <__aeabi_dcmpgt>
 800758e:	b148      	cbz	r0, 80075a4 <floor+0x44>
 8007590:	2c00      	cmp	r4, #0
 8007592:	da5b      	bge.n	800764c <floor+0xec>
 8007594:	2500      	movs	r5, #0
 8007596:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800759a:	4a31      	ldr	r2, [pc, #196]	; (8007660 <floor+0x100>)
 800759c:	433b      	orrs	r3, r7
 800759e:	42ab      	cmp	r3, r5
 80075a0:	bf18      	it	ne
 80075a2:	4614      	movne	r4, r2
 80075a4:	4623      	mov	r3, r4
 80075a6:	462f      	mov	r7, r5
 80075a8:	e026      	b.n	80075f8 <floor+0x98>
 80075aa:	4a2e      	ldr	r2, [pc, #184]	; (8007664 <floor+0x104>)
 80075ac:	fa42 f806 	asr.w	r8, r2, r6
 80075b0:	ea01 0208 	and.w	r2, r1, r8
 80075b4:	4302      	orrs	r2, r0
 80075b6:	d01f      	beq.n	80075f8 <floor+0x98>
 80075b8:	a327      	add	r3, pc, #156	; (adr r3, 8007658 <floor+0xf8>)
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	f7f8 fdcd 	bl	800015c <__adddf3>
 80075c2:	2200      	movs	r2, #0
 80075c4:	2300      	movs	r3, #0
 80075c6:	f7f9 fa0f 	bl	80009e8 <__aeabi_dcmpgt>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d0ea      	beq.n	80075a4 <floor+0x44>
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	bfbe      	ittt	lt
 80075d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80075d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80075da:	19a4      	addlt	r4, r4, r6
 80075dc:	ea24 0408 	bic.w	r4, r4, r8
 80075e0:	2500      	movs	r5, #0
 80075e2:	e7df      	b.n	80075a4 <floor+0x44>
 80075e4:	2e33      	cmp	r6, #51	; 0x33
 80075e6:	dd0b      	ble.n	8007600 <floor+0xa0>
 80075e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80075ec:	d104      	bne.n	80075f8 <floor+0x98>
 80075ee:	4602      	mov	r2, r0
 80075f0:	f7f8 fdb4 	bl	800015c <__adddf3>
 80075f4:	4607      	mov	r7, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4638      	mov	r0, r7
 80075fa:	4619      	mov	r1, r3
 80075fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007600:	f04f 32ff 	mov.w	r2, #4294967295
 8007604:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8007608:	fa22 f808 	lsr.w	r8, r2, r8
 800760c:	ea18 0f00 	tst.w	r8, r0
 8007610:	d0f2      	beq.n	80075f8 <floor+0x98>
 8007612:	a311      	add	r3, pc, #68	; (adr r3, 8007658 <floor+0xf8>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f7f8 fda0 	bl	800015c <__adddf3>
 800761c:	2200      	movs	r2, #0
 800761e:	2300      	movs	r3, #0
 8007620:	f7f9 f9e2 	bl	80009e8 <__aeabi_dcmpgt>
 8007624:	2800      	cmp	r0, #0
 8007626:	d0bd      	beq.n	80075a4 <floor+0x44>
 8007628:	2c00      	cmp	r4, #0
 800762a:	da02      	bge.n	8007632 <floor+0xd2>
 800762c:	2e14      	cmp	r6, #20
 800762e:	d103      	bne.n	8007638 <floor+0xd8>
 8007630:	3401      	adds	r4, #1
 8007632:	ea25 0508 	bic.w	r5, r5, r8
 8007636:	e7b5      	b.n	80075a4 <floor+0x44>
 8007638:	2301      	movs	r3, #1
 800763a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800763e:	fa03 f606 	lsl.w	r6, r3, r6
 8007642:	4435      	add	r5, r6
 8007644:	42bd      	cmp	r5, r7
 8007646:	bf38      	it	cc
 8007648:	18e4      	addcc	r4, r4, r3
 800764a:	e7f2      	b.n	8007632 <floor+0xd2>
 800764c:	2500      	movs	r5, #0
 800764e:	462c      	mov	r4, r5
 8007650:	e7a8      	b.n	80075a4 <floor+0x44>
 8007652:	bf00      	nop
 8007654:	f3af 8000 	nop.w
 8007658:	8800759c 	.word	0x8800759c
 800765c:	7e37e43c 	.word	0x7e37e43c
 8007660:	bff00000 	.word	0xbff00000
 8007664:	000fffff 	.word	0x000fffff

08007668 <scalbn>:
 8007668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766a:	4616      	mov	r6, r2
 800766c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007670:	4604      	mov	r4, r0
 8007672:	460d      	mov	r5, r1
 8007674:	460b      	mov	r3, r1
 8007676:	b982      	cbnz	r2, 800769a <scalbn+0x32>
 8007678:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800767c:	4303      	orrs	r3, r0
 800767e:	d034      	beq.n	80076ea <scalbn+0x82>
 8007680:	4b2d      	ldr	r3, [pc, #180]	; (8007738 <scalbn+0xd0>)
 8007682:	2200      	movs	r2, #0
 8007684:	f7f8 ff20 	bl	80004c8 <__aeabi_dmul>
 8007688:	4b2c      	ldr	r3, [pc, #176]	; (800773c <scalbn+0xd4>)
 800768a:	4604      	mov	r4, r0
 800768c:	429e      	cmp	r6, r3
 800768e:	460d      	mov	r5, r1
 8007690:	da0d      	bge.n	80076ae <scalbn+0x46>
 8007692:	a325      	add	r3, pc, #148	; (adr r3, 8007728 <scalbn+0xc0>)
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	e01c      	b.n	80076d4 <scalbn+0x6c>
 800769a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800769e:	42ba      	cmp	r2, r7
 80076a0:	d109      	bne.n	80076b6 <scalbn+0x4e>
 80076a2:	4602      	mov	r2, r0
 80076a4:	f7f8 fd5a 	bl	800015c <__adddf3>
 80076a8:	4604      	mov	r4, r0
 80076aa:	460d      	mov	r5, r1
 80076ac:	e01d      	b.n	80076ea <scalbn+0x82>
 80076ae:	460b      	mov	r3, r1
 80076b0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80076b4:	3a36      	subs	r2, #54	; 0x36
 80076b6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80076ba:	4432      	add	r2, r6
 80076bc:	428a      	cmp	r2, r1
 80076be:	dd0c      	ble.n	80076da <scalbn+0x72>
 80076c0:	4622      	mov	r2, r4
 80076c2:	462b      	mov	r3, r5
 80076c4:	a11a      	add	r1, pc, #104	; (adr r1, 8007730 <scalbn+0xc8>)
 80076c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076ca:	f000 f83b 	bl	8007744 <copysign>
 80076ce:	a318      	add	r3, pc, #96	; (adr r3, 8007730 <scalbn+0xc8>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f8 fef8 	bl	80004c8 <__aeabi_dmul>
 80076d8:	e7e6      	b.n	80076a8 <scalbn+0x40>
 80076da:	2a00      	cmp	r2, #0
 80076dc:	dd08      	ble.n	80076f0 <scalbn+0x88>
 80076de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076e6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076f0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80076f4:	da0b      	bge.n	800770e <scalbn+0xa6>
 80076f6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80076fa:	429e      	cmp	r6, r3
 80076fc:	4622      	mov	r2, r4
 80076fe:	462b      	mov	r3, r5
 8007700:	dce0      	bgt.n	80076c4 <scalbn+0x5c>
 8007702:	a109      	add	r1, pc, #36	; (adr r1, 8007728 <scalbn+0xc0>)
 8007704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007708:	f000 f81c 	bl	8007744 <copysign>
 800770c:	e7c1      	b.n	8007692 <scalbn+0x2a>
 800770e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007712:	3236      	adds	r2, #54	; 0x36
 8007714:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007718:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800771c:	4620      	mov	r0, r4
 800771e:	4629      	mov	r1, r5
 8007720:	2200      	movs	r2, #0
 8007722:	4b07      	ldr	r3, [pc, #28]	; (8007740 <scalbn+0xd8>)
 8007724:	e7d6      	b.n	80076d4 <scalbn+0x6c>
 8007726:	bf00      	nop
 8007728:	c2f8f359 	.word	0xc2f8f359
 800772c:	01a56e1f 	.word	0x01a56e1f
 8007730:	8800759c 	.word	0x8800759c
 8007734:	7e37e43c 	.word	0x7e37e43c
 8007738:	43500000 	.word	0x43500000
 800773c:	ffff3cb0 	.word	0xffff3cb0
 8007740:	3c900000 	.word	0x3c900000

08007744 <copysign>:
 8007744:	b530      	push	{r4, r5, lr}
 8007746:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800774a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800774e:	ea42 0503 	orr.w	r5, r2, r3
 8007752:	4629      	mov	r1, r5
 8007754:	bd30      	pop	{r4, r5, pc}
	...

08007758 <_init>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr

08007764 <_fini>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr
